[{"/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/index.js":"1","/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/App.js":"2","/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/Register.jsx":"3","/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/Footer.jsx":"4","/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/Login.jsx":"5","/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/Leaderboard.jsx":"6","/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/Profile.jsx":"7","/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/WelcomePage.jsx":"8","/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/GameConsole.jsx":"9","/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/hooks/useApplicationData.js":"10","/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/GameCompleteMsg.jsx":"11","/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/NavbarTC.jsx":"12","/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/EditUser.jsx":"13","/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/EditPassword.jsx":"14","/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/Attempts.jsx":"15"},{"size":219,"mtime":1613183293159,"results":"16","hashOfConfig":"17"},{"size":1166,"mtime":1613597429334,"results":"18","hashOfConfig":"17"},{"size":4972,"mtime":1613524052186,"results":"19","hashOfConfig":"17"},{"size":1208,"mtime":1613524334388,"results":"20","hashOfConfig":"17"},{"size":2087,"mtime":1613524052177,"results":"21","hashOfConfig":"17"},{"size":4251,"mtime":1613524334391,"results":"22","hashOfConfig":"17"},{"size":4103,"mtime":1613543682884,"results":"23","hashOfConfig":"17"},{"size":1954,"mtime":1613597710275,"results":"24","hashOfConfig":"17"},{"size":7903,"mtime":1613596741094,"results":"25","hashOfConfig":"17"},{"size":1374,"mtime":1613524052190,"results":"26","hashOfConfig":"17"},{"size":459,"mtime":1613524052171,"results":"27","hashOfConfig":"17"},{"size":3293,"mtime":1613524052179,"results":"28","hashOfConfig":"17"},{"size":4748,"mtime":1613524334387,"results":"29","hashOfConfig":"17"},{"size":1837,"mtime":1613524052163,"results":"30","hashOfConfig":"17"},{"size":6639,"mtime":1613596741090,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1kac59u",{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"34"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"34"},"/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/index.js",[],["68","69"],"/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/App.js",["70","71"],"import React, { useState } from 'react';\nimport useApplicationData from \"./hooks/useApplicationData\"\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\n// Import Components\nimport Footer from \"./components/Footer.jsx\";\nimport Leaderboard from \"./components/Leaderboard.jsx\";\nimport Profile from \"./components/Profile.jsx\";\nimport Welcomepage from \"./components/WelcomePage.jsx\";\nimport GameConsole from \"./components/GameConsole.jsx\";\nimport NavbarTC from \"./components/NavbarTC.jsx\";\n\n// Import stylesheets\nimport './App.css';\n\nfunction App() {\n\n  const { contents } = useApplicationData();\n\n  return (\n    <Router>\n      <div className=\"app\">\n        <NavbarTC />\n        <Switch>\n          <Route path=\"/leaderboard\">\n            <Leaderboard />\n          </Route>\n          <Route path=\"/profile\">\n            <Profile />\n          </Route>\n          <Route path=\"/play\">\n            <GameConsole \n              contents={contents}\n            />\n          </Route>\n          <Route path=\"/\">\n            <Welcomepage />\n          </Route>\n        </Switch>\n        <Footer />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;","/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/Register.jsx",[],"/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/Footer.jsx",[],"/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/Login.jsx",[],"/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/Leaderboard.jsx",["72","73"],"import React, { useState, useMemo } from 'react'\nimport {Container, Table} from 'react-bootstrap';\nimport useApplicationData from \"../hooks/useApplicationData\"\nimport \"./Leaderboard.css\"\n\nfunction Leaderboard(props) {\n  \n  const { users, setUsers } = useApplicationData()\n\n  const [sortType, setSortType] = useState('levels');\n\n  const sortedUsers = useMemo(() => {\n    const sortArray = type => {\n      const types = {\n        wordsPerMin: 'words_per_min',\n        levels: 'highest_level_cleared',\n      };\n      const sortProperty = types[type];\n      const secondarySortProperty = types[type === 'levels' ? 'wordsPerMin' : 'levels']\n      const sorted = [...users].sort((a, b) => {\n        const initialDiff = b[sortProperty] - a[sortProperty]\n        if (initialDiff === 0) {\n          return b[secondarySortProperty] - a[secondarySortProperty]\n        } else {\n          return initialDiff;\n        }\n      });\n      return sorted;\n    };\n    return sortArray(sortType)\n  }, [users, sortType])\n\n\n\n  return (\n    <div className=\"leaderboard\">\n      <Container className=\"leadercontainer\">\n      <Table striped bordered hover variant=\"dark\">\n        <thead>\n          <tr>\n            <th colSpan=\"4\" classname=\"align-me\">Leaderboard</th>\n          </tr>\n          <tr>\n            <th>Ranking</th>\n            <th>Username</th>\n            <th>Highest Level</th>\n            <th>Words Per Minute</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>1st</td>\n            <td>@{sortedUsers[0] && sortedUsers[0].username}</td>\n            <td>{sortedUsers[0] && sortedUsers[0].highest_level_cleared}</td>\n            <td>{sortedUsers[0] && sortedUsers[0].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>2nd</td>\n            <td>@{sortedUsers[1] && sortedUsers[1].username}</td>\n            <td>{sortedUsers[1] && sortedUsers[1].highest_level_cleared}</td>\n            <td>{sortedUsers[1] && sortedUsers[1].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>3rd</td>\n            <td>@{sortedUsers[2] && sortedUsers[2].username}</td>\n            <td>{sortedUsers[2] && sortedUsers[2].highest_level_cleared}</td>\n            <td>{sortedUsers[2] && sortedUsers[2].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>4th</td>\n            <td>@{sortedUsers[3] && sortedUsers[3].username}</td>\n            <td>{sortedUsers[3] && sortedUsers[3].highest_level_cleared}</td>\n            <td>{sortedUsers[3] && sortedUsers[3].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>5th</td>\n            <td>@{sortedUsers[4] && sortedUsers[4].username}</td>\n            <td>{sortedUsers[4] && sortedUsers[4].highest_level_cleared}</td>\n            <td>{sortedUsers[4] && sortedUsers[4].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>6th</td>\n            <td>@{sortedUsers[5] && sortedUsers[5].username}</td>\n            <td>{sortedUsers[5] && sortedUsers[5].highest_level_cleared}</td>\n            <td>{sortedUsers[5] && sortedUsers[5].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>7th</td>\n            <td>@{sortedUsers[6] && sortedUsers[6].username}</td>\n            <td>{sortedUsers[6] && sortedUsers[6].highest_level_cleared}</td>\n            <td>{sortedUsers[6] && sortedUsers[6].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>8th</td>\n            <td>@{sortedUsers[7] && sortedUsers[7].username}</td>\n            <td>{sortedUsers[7] && sortedUsers[7].highest_level_cleared}</td>\n            <td>{sortedUsers[7] && sortedUsers[7].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>9th</td>\n            <td>@{sortedUsers[8] && sortedUsers[8].username}</td>\n            <td>{sortedUsers[8] && sortedUsers[8].highest_level_cleared}</td>\n            <td>{sortedUsers[8] && sortedUsers[8].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>10th</td>\n            <td>@{sortedUsers[9] && sortedUsers[9].username}</td>\n            <td>{sortedUsers[9] && sortedUsers[9].highest_level_cleared}</td>\n            <td>{sortedUsers[9] && sortedUsers[9].words_per_min}</td>\n          </tr>\n        </tbody>\n      </Table>\n      </Container>\n    </div>\n  )\n}\n\nexport default Leaderboard\n","/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/Profile.jsx",[],"/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/WelcomePage.jsx",["74","75","76","77","78"],"import React, { useState } from 'react';\nimport { Container, Jumbotron, Image, Button, Fade } from 'react-bootstrap';\nimport Typing from \"react-typing-animation\";\nimport useSound from 'use-sound';\nimport DelayLink from 'react-delay-link';\nimport \"./WelcomePage.css\";\nimport Leaderboard from \"./Leaderboard\"\nimport useApplicationData from '../hooks/useApplicationData';\n\n\nfunction Welcomepage() {\n\n  const { checkLoggedIn } = useApplicationData();\n\n  const soundUrl = \"./sounds/SuperMarioBros.mp3\";\n\n  const [play] = useSound(soundUrl);\n\n  const [index, setIndex] = useState(0);\n\n  const handleSelect = (selectedIndex, e) => {\n    setIndex(selectedIndex);\n  };\n\n  return (\n    <div className=\"welcome-container\">\n      <Jumbotron fluid>\n        <Container>\n          <Image src=\"images/typing-icon.png\" className=\"typing-icon\" />\n          <h1>\n            <Typing speed={40}>\n              Welcome to Typecraft!\n            </Typing>\n          </h1>\n          <p>\n            Before you start playing, here's how the game is going to work:\n          </p>\n          <ul>\n            1. A selection of words will appear on the screen\n          </ul>\n          <ul>\n            2. You have to type the words as fast as possible!\n          </ul>\n          <ul>\n            3. You won't be able to advance on to the next level if there are any mistakes so make sure you check for mistakes as well\n          </ul>\n          <ul>\n            4. As the levels go up. the time allocated to each level will stay the same but the amount of words will get bigger.\n          </ul>\n          <ul>\n            5. When you run out of time without having finished typing your paragraph, Game Over!\n          </ul>\n          <DelayLink delay={3000} to=\"/play\" clickAction={play} replace={false}>\n            <Button variant=\"primary\" size=\"lg\">Play Game</Button>\n          </DelayLink>\n        </Container>\n      </Jumbotron>\n    </div>\n  )\n}\n\nexport default Welcomepage\n\n","/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/GameConsole.jsx",["79","80","81"],"import React, { useState, useEffect } from 'react';\nimport axios from \"axios\";\nimport { Jumbotron, Button, ProgressBar, Spinner, InputGroup, FormControl, Card } from 'react-bootstrap';\nimport GameCompleteMsg from './GameCompleteMsg';\nimport \"./GameConsole.css\"\n\nfunction GameConsole(props) {\n\n  const [seconds, setSeconds] = useState(30);\n  const [typingIn, setTypingIn] = useState(\"\");\n  const [currentLevel, setCurrentLevel] = useState(0);\n  const [intervalId, setIntervalId] = useState(null)\n  const [levelContent, setLevelContent] = useState(\"\")\n  const [levelStarted, setLevelStarted] = useState(false)\n\n  const Timer = function (seconds){\n    setLevelStarted(true)\n    setSeconds(seconds)\n    if (seconds > 0) {\n      setIntervalId(setInterval(() => setSeconds((s) => s-1), 1000))\n    } else {\n      setSeconds(\"Game Over\");\n    }\n  }\n\n  const highlightWords = (event) => {\n    let value = event.target.value;\n    let txt = document.getElementById(\"console-text\").innerText;\n    let idx = txt.indexOf(value);\n    if(idx >= 0) {\n      let newText = [txt.substring(0, idx), <strong>{txt.substring(idx, idx + value.length)}</strong>, txt.substring(idx + value.length)];\n      setTypingIn(value);\n      setLevelContent(newText);\n    } else {\n      setLevelContent(levelContent);\n      setTypingIn(value);\n    }    \n  }\n\n  const totalWordsCorrect = function(inputField, currentLevelContent) {\n    const typedIn = inputField.split(' ')\n    const matchingwords = []\n    for (let i = 0; i < typedIn.length; i++) {\n      if(typedIn[i] === currentLevelContent[i])\n      matchingwords.push(typedIn[i])\n      }\n    return matchingwords.length\n  }\n  \n  const resetLevel = function () {\n    setLevelStarted(false)\n    setLevelContent(\"Are you Ready to start\")\n    setTypingIn(\"\");\n    clearInterval(intervalId)\n    setCurrentLevel(currentLevel);\n    setSeconds(30)\n  }\n\n  useEffect(() => {\n    if(seconds === 0){\n      setSeconds(\"Game Over\")\n      let currentLevelWords = props.contents[currentLevel].content.split(' ')\n      let totalOfCorrectWords = totalWordsCorrect(typingIn, currentLevelWords)\n      clearInterval(intervalId)\n      console.log(\"totalOFcorrectword function gives\", totalOfCorrectWords)\n      console.log(\"current level gives\", currentLevel)\n      axios.post('/attempts', {\n        user_id: JSON.parse(localStorage.getItem(\"user_details\"))?.id,\n        level_id: currentLevel + 1,\n        words_completed: totalOfCorrectWords,\n        time_taken: 30,\n        passed: false\n      })\n      .then(res => {\n        console.log(\"I DID REACH HERE\")\n        console.log(res);\n      })\n    }\n  }, [seconds, intervalId]);\n\n  const startGame = function() {\n    setLevelStarted(true)\n    if(currentLevel === 0){\n      setTypingIn(\"\");\n      setLevelContent(props.contents[currentLevel]?.content)\n      clearInterval(intervalId)\n      setCurrentLevel(0);\n      Timer(30)\n    } else {\n      setTypingIn(\"\");\n      clearInterval(intervalId)\n      setLevelContent(props.contents[currentLevel]?.content)\n      Timer(30)\n    }\n  }\n\n  const restartfromFirstLevel = function() {\n    setLevelStarted(false)\n    setLevelContent(\"Are you Ready to start\")\n    setTypingIn(\"\");\n    clearInterval(intervalId)\n    setCurrentLevel(0);\n    setSeconds(30)\n  }\n\n  const resumeFromLastClearedLevel = function () {\n    setLevelStarted(false)\n    setLevelContent(\"Are you Ready to start\")\n    setTypingIn(\"\");\n    clearInterval(intervalId)\n    setCurrentLevel(JSON.parse(localStorage.getItem(\"user_details\"))?.highest_level_cleared);\n    setSeconds(30)\n  }\n\n  //Post request to attempts if both the text areas are the same\n  useEffect(() => {\n    if(typingIn === props.contents[currentLevel]?.content && typingIn !== \"\") {\n      let correctWords = props.contents[currentLevel].content.split(' ').length;\n      let secondsLeft = 30 - seconds;\n      setLevelContent(\"Time for next level. Press the button below when you're ready to start\")\n      clearInterval(intervalId);\n      setCurrentLevel(currentLevel + 1);\n      setSeconds(30)\n      setTypingIn(\"\");\n      axios.post('/attempts', {\n        user_id: JSON.parse(localStorage.getItem(\"user_details\"))?.id,\n        level_id: currentLevel + 1,\n        words_completed: correctWords,\n        time_taken: secondsLeft,\n        passed: true\n    })\n      .then(res => {\n        console.log(\"user completed level posted to db\", res);\n      })\n    }\n  }, [typingIn, intervalId])\n  \n  const handleChange = (e) => {\n    e.preventDefault();\n  };\n\n  return (\n    <div className=\"gameconsole\">\n      <Jumbotron>\n        <h1>TypeCraft</h1>\n        <>\n          <Spinner animation=\"border\" variant=\"primary\" />\n          <Spinner animation=\"border\" variant=\"secondary\" />\n          <Spinner animation=\"border\" variant=\"success\" />\n          <Spinner animation=\"border\" variant=\"danger\" />\n          <Spinner animation=\"border\" variant=\"warning\" />\n          <Spinner animation=\"border\" variant=\"info\" />\n          <Spinner animation=\"border\" variant=\"light\" />\n          <Spinner animation=\"border\" variant=\"dark\" />\n          <Spinner animation=\"grow\" variant=\"primary\" />\n          <Spinner animation=\"grow\" variant=\"secondary\" />\n          <Spinner animation=\"grow\" variant=\"success\" />\n          <Spinner animation=\"grow\" variant=\"danger\" />\n          <Spinner animation=\"grow\" variant=\"warning\" />\n          <Spinner animation=\"grow\" variant=\"info\" />\n          <Spinner animation=\"grow\" variant=\"light\" />\n          <Spinner animation=\"grow\" variant=\"dark\" />\n        </>\n        <br /><br /><br />\n        <ProgressBar aria-valuemin=\"0\" aria-valuemax=\"100\" animated now={props.contents[currentLevel] ? (typingIn.length/props.contents[currentLevel].content.length) * 100 : 1} variant=\"success\" />\n        <br />\n        <Card>\n          <Card.Header>{seconds}</Card.Header>\n          <Card.Body>\n            <blockquote className=\"blockquote mb-0\">\n              <div id=\"console-text\">\n                {levelContent || setLevelContent(\"Are you Ready to start\")}\n              </div>\n            </blockquote>\n          </Card.Body>\n        </Card>\n        <br />\n        <InputGroup>\n          <InputGroup.Prepend>\n            <InputGroup.Text id=\"textarea\">TYPE HERE:</InputGroup.Text>\n          </InputGroup.Prepend>\n          <FormControl as=\"textarea\" \n            // onChange={(event) => setTypingIn(event.target.value)}\n            onChange={(event) => highlightWords(event)}\n            value={typingIn}\n            id=\"textarea\"\n            aria-label=\"With textarea\" \n            onCut={handleChange}\n            onCopy={handleChange}\n            onPaste={handleChange}\n            />\n        </InputGroup>\n        <br />\n        <p>\n          {levelStarted === false && currentLevel !== 0? \n            <Button variant=\"primary\" onClick={restartfromFirstLevel}>\n              Start from the begining\n            </Button> : null}\n          {levelStarted === false && currentLevel !== JSON.parse(localStorage.getItem(\"user_details\"))?.highest_level_cleared? \n            <Button className=\"startGame\" variant=\"primary\" onClick={resumeFromLastClearedLevel} onclick='button.style.display = \"none\"'>\n              Start from last cleared level\n            </Button> : null}\n            {levelStarted === true ?\n            <Button className=\"restartGame\" variant=\"primary\" onClick={resetLevel}>\n              Restart Level \n            </Button> : null}\n           {levelStarted === false ? \n            <Button\n              className=\"startGame\"\n              variant=\"primary\"\n              onClick={startGame}\n            >\n            {levelStarted === true ? `Start Game ` : `Start Level ${currentLevel+1}!`}\n            </Button> : null ||\n            <Button className=\"restartGame\" variant=\"primary\" onClick={restartfromFirstLevel}>\n            Go back to Level 1\n            </Button>}\n        </p>\n      </Jumbotron>\n    </div>\n  )\n}\n\nexport default GameConsole\n","/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/hooks/useApplicationData.js",[],"/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/GameCompleteMsg.jsx",[],"/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/NavbarTC.jsx",[],"/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/EditUser.jsx",[],"/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/EditPassword.jsx",[],"/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/Attempts.jsx",["82","83","84"],"import React, { useState, useMemo } from 'react';\nimport { Container, Table, Alert, Button } from 'react-bootstrap';\nimport useApplicationData from \"../hooks/useApplicationData\";\nimport Moment from 'react-moment';\nimport useSound from 'use-sound';\nimport DelayLink from 'react-delay-link';\n\nfunction Attempts() {\n\n  const soundUrl = \"./sounds/roll.mp3\";\n\n  const [play] = useSound(soundUrl);\n\n  const roundTo = require('round-to');\n\n  const { attempts, setAttempts } = useApplicationData()\n\n  const [sortType, setSortType] = useState('levels');\n\n  const sortedAttempts = useMemo(() => {\n    const sortArray = type => {\n      const types = {\n        wordsPerMin: 'words_completed',\n        levels: 'level_id',\n      };\n      const sortProperty = types[type];\n      const secondarySortProperty = types[type === 'levels' ? 'wordsPerMin' : 'levels']\n      const sorted = [...attempts].sort((a, b) => {\n        const initialDiff = b[sortProperty] - a[sortProperty]\n        if (initialDiff === 0) {\n          return b[secondarySortProperty] - a[secondarySortProperty]\n        } else {\n          return initialDiff;\n        }\n      });\n      return sorted;\n    };\n    return sortArray(sortType)\n  }, [attempts, sortType])\n\n  const currentUser = (localStorage.getItem(\"user_details\") && JSON.parse(localStorage.getItem(\"user_details\"))?.id)\n\n  const sortedUsersId = () => {\n    let result = [];\n    for (let i = 0; i < sortedAttempts.length; i++) {\n      result.push(sortedAttempts[i].user_id)\n  }\n    return result\n  }\n\n  const currentUserArray = useMemo(() => {\n    let result = []\n    for (let attempt of sortedAttempts)\n      if (attempt.user_id === currentUser && attempt.passed === true) {\n        result.push(attempt)\n      }\n    return result\n  })\n\n  console.log(currentUserArray[0])\n\n  if (sortedUsersId().includes(currentUser)) {\n    return (\n      <div className=\"leaderboard\">\n        <Container className=\"leadercontainer\">\n          <Table striped bordered hover variant=\"dark\">\n            <thead>\n              <tr>\n                <th>Date</th>\n                <th>Level</th>\n                <th>Time Completed</th>\n                <th>Words Per Minute</th>\n              </tr>\n            </thead>\n            <tbody>\n              {currentUserArray[0] ? (\n                <tr>\n                <td>\n                  <Moment format='MMMM Do, YYYY'>\n                    {currentUserArray[0] && currentUserArray[0].attempted_at}\n                  </Moment>\n                </td>\n                <td>{currentUserArray[0] && currentUserArray[0].level_id}</td>\n                <td>{currentUserArray[0] && currentUserArray[0].time_taken + \" Seconds\"}</td>\n                <td>{roundTo((currentUserArray[0] && currentUserArray[0].words_completed) * 60 / (currentUserArray[0] && currentUserArray[0].time_taken), 2)}</td>\n              </tr>) : null\n              }\n              {currentUserArray[1] ? (              \n              <tr>\n                <td>\n                  <Moment format=\"MMMM Do, YYYY\">\n                    {currentUserArray[1] && currentUserArray[1].attempted_at}\n                  </Moment>\n                </td>\n                <td>{currentUserArray[1] && currentUserArray[1].level_id}</td>\n                <td>{currentUserArray[1] && currentUserArray[1].time_taken + \" Seconds\"}</td>\n                <td>{roundTo((currentUserArray[1] && currentUserArray[1].words_completed) * 60 / (currentUserArray[1] && currentUserArray[1].time_taken), 2)}</td>\n              </tr>) : null\n              }\n              {currentUserArray[2] ? (\n              <tr>\n                <td>\n                  <Moment format=\"MMMM Do, YYYY\">\n                    {currentUserArray[2] && currentUserArray[2].attempted_at}\n                  </Moment>\n                </td>\n                <td>{currentUserArray[2] && currentUserArray[2].level_id}</td>\n                <td>{currentUserArray[2] && currentUserArray[2].time_taken + \" Seconds\"}</td>\n                <td>{roundTo((currentUserArray[2] && currentUserArray[2].words_completed) * 60 / (currentUserArray[2] && currentUserArray[2].time_taken), 2)}</td>\n              </tr>) : null\n              }\n              {currentUserArray[3] ? (\n              <tr>\n                <td>\n                  <Moment format=\"MMMM Do, YYYY\">\n                    {currentUserArray[3] && currentUserArray[3].attempted_at}\n                  </Moment>\n                </td>\n                <td>{currentUserArray[3] && currentUserArray[3].level_id}</td>\n                <td>{currentUserArray[3] && currentUserArray[3].time_taken + \" Seconds\"}</td>\n                <td>{roundTo((currentUserArray[3] && currentUserArray[3].words_completed) * 60 / (currentUserArray[3] && currentUserArray[3].time_taken), 2)}</td>\n              </tr>) : null\n              }\n              {currentUserArray[4] ? (\n              <tr>\n                <td>\n                  <Moment format=\"MMMM Do, YYYY\">\n                    {currentUserArray[4] && currentUserArray[4].attempted_at}\n                  </Moment>\n                </td>\n                <td>{currentUserArray[4] && currentUserArray[4].level_id}</td>\n                <td>{currentUserArray[4] && currentUserArray[4].time_taken + \" Seconds\"}</td>\n                <td>{roundTo((currentUserArray[4] && currentUserArray[4].words_completed) * 60 / (currentUserArray[4] && currentUserArray[4].time_taken), 2)}</td>\n              </tr>) : null\n              }\n            </tbody>\n          </Table>\n          <Alert variant=\"success\">\n        <Alert.Heading>Hey, nice to see you!</Alert.Heading>\n        <p>\n          Congrats on the rad scores! Looks like you're doing quite well but don't let that stop you. Click on the button below to try and reach even better scores!\n        </p>\n        <hr />\n        <p className=\"mb-0\">\n          <DelayLink delay={3000} to=\"/play\" clickAction={play} replace={false}>\n            <Button variant=\"primary\" size=\"lg\">Play Game</Button>\n          </DelayLink>\n        </p>\n      </Alert>\n        </Container>\n      </div>\n    )\n  } else {\n    return (\n      <Alert variant=\"danger\">\n        <Alert.Heading>Hey, nice to see you!</Alert.Heading>\n        <p>\n          Aww yeah, so it looks like you haven't actually played yet. No worries! Simply click on the button below to play this super awesome game and build up your typing chops!\n        </p>\n        <hr />\n        <p className=\"mb-0\">\n          <DelayLink delay={3000} to=\"/play\" clickAction={play} replace={false}>\n            <Button variant=\"primary\" size=\"lg\">Play Game</Button>\n          </DelayLink>\n        </p>\n      </Alert>\n    )\n  }\n}\n\nexport default Attempts\n",{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","severity":1,"message":"90","line":1,"column":17,"nodeType":"91","messageId":"92","endLine":1,"endColumn":25},{"ruleId":"89","severity":1,"message":"93","line":3,"column":50,"nodeType":"91","messageId":"92","endLine":3,"endColumn":54},{"ruleId":"89","severity":1,"message":"94","line":8,"column":18,"nodeType":"91","messageId":"92","endLine":8,"endColumn":26},{"ruleId":"89","severity":1,"message":"95","line":10,"column":20,"nodeType":"91","messageId":"92","endLine":10,"endColumn":31},{"ruleId":"89","severity":1,"message":"96","line":2,"column":47,"nodeType":"91","messageId":"92","endLine":2,"endColumn":51},{"ruleId":"89","severity":1,"message":"97","line":7,"column":8,"nodeType":"91","messageId":"92","endLine":7,"endColumn":19},{"ruleId":"89","severity":1,"message":"98","line":13,"column":11,"nodeType":"91","messageId":"92","endLine":13,"endColumn":24},{"ruleId":"89","severity":1,"message":"99","line":19,"column":10,"nodeType":"91","messageId":"92","endLine":19,"endColumn":15},{"ruleId":"89","severity":1,"message":"100","line":21,"column":9,"nodeType":"91","messageId":"92","endLine":21,"endColumn":21},{"ruleId":"89","severity":1,"message":"101","line":4,"column":8,"nodeType":"91","messageId":"92","endLine":4,"endColumn":23},{"ruleId":"102","severity":1,"message":"103","line":79,"column":6,"nodeType":"104","endLine":79,"endColumn":27,"suggestions":"105"},{"ruleId":"102","severity":1,"message":"106","line":136,"column":6,"nodeType":"104","endLine":136,"endColumn":28,"suggestions":"107"},{"ruleId":"89","severity":1,"message":"108","line":16,"column":21,"nodeType":"91","messageId":"92","endLine":16,"endColumn":32},{"ruleId":"89","severity":1,"message":"95","line":18,"column":20,"nodeType":"91","messageId":"92","endLine":18,"endColumn":31},{"ruleId":"102","severity":1,"message":"109","line":51,"column":28,"nodeType":"91","endLine":51,"endColumn":35},"no-native-reassign",["110"],"no-negated-in-lhs",["111"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'setUsers' is assigned a value but never used.","'setSortType' is assigned a value but never used.","'Fade' is defined but never used.","'Leaderboard' is defined but never used.","'checkLoggedIn' is assigned a value but never used.","'index' is assigned a value but never used.","'handleSelect' is assigned a value but never used.","'GameCompleteMsg' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'currentLevel', 'props.contents', and 'typingIn'. Either include them or remove the dependency array.","ArrayExpression",["112"],"React Hook useEffect has missing dependencies: 'currentLevel', 'props.contents', and 'seconds'. Either include them or remove the dependency array. You can also do a functional update 'setCurrentLevel(c => ...)' if you only need 'currentLevel' in the 'setCurrentLevel' call.",["113"],"'setAttempts' is assigned a value but never used.","React Hook useMemo does nothing when called with only one argument. Did you forget to pass an array of dependencies?","no-global-assign","no-unsafe-negation",{"desc":"114","fix":"115"},{"desc":"116","fix":"117"},"Update the dependencies array to be: [seconds, intervalId, props.contents, currentLevel, typingIn]",{"range":"118","text":"119"},"Update the dependencies array to be: [typingIn, intervalId, props.contents, currentLevel, seconds]",{"range":"120","text":"121"},[2602,2623],"[seconds, intervalId, props.contents, currentLevel, typingIn]",[4379,4401],"[typingIn, intervalId, props.contents, currentLevel, seconds]"]