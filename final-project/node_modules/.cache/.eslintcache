[{"/home/robert/lighthouse/final-project-lhl/final-project/src/index.js":"1","/home/robert/lighthouse/final-project-lhl/final-project/src/App.js":"2","/home/robert/lighthouse/final-project-lhl/final-project/src/components/Register.jsx":"3","/home/robert/lighthouse/final-project-lhl/final-project/src/components/Login.jsx":"4","/home/robert/lighthouse/final-project-lhl/final-project/src/components/Footer.jsx":"5","/home/robert/lighthouse/final-project-lhl/final-project/src/components/Leaderboard.jsx":"6","/home/robert/lighthouse/final-project-lhl/final-project/src/components/Profile.jsx":"7","/home/robert/lighthouse/final-project-lhl/final-project/src/components/WelcomePage.jsx":"8","/home/robert/lighthouse/final-project-lhl/final-project/src/components/GameConsole.jsx":"9","/home/robert/lighthouse/final-project-lhl/final-project/src/hooks/useApplicationData.js":"10","/home/robert/lighthouse/final-project-lhl/final-project/src/components/GameCompleteMsg.jsx":"11","/home/robert/lighthouse/final-project-lhl/final-project/src/components/NavbarTC.jsx":"12","/home/robert/lighthouse/final-project-lhl/final-project/src/components/EditUser.jsx":"13","/home/robert/lighthouse/final-project-lhl/final-project/src/components/EditPassword.jsx":"14"},{"size":219,"mtime":1613239059969,"results":"15","hashOfConfig":"16"},{"size":1263,"mtime":1613500459617,"results":"17","hashOfConfig":"16"},{"size":4930,"mtime":1613511970478,"results":"18","hashOfConfig":"16"},{"size":2261,"mtime":1613511970478,"results":"19","hashOfConfig":"16"},{"size":1129,"mtime":1613511970478,"results":"20","hashOfConfig":"16"},{"size":4251,"mtime":1613512419619,"results":"21","hashOfConfig":"16"},{"size":3760,"mtime":1613511970478,"results":"22","hashOfConfig":"16"},{"size":1512,"mtime":1613511970478,"results":"23","hashOfConfig":"16"},{"size":5233,"mtime":1613511970478,"results":"24","hashOfConfig":"16"},{"size":1338,"mtime":1613500459617,"results":"25","hashOfConfig":"16"},{"size":459,"mtime":1613511970478,"results":"26","hashOfConfig":"16"},{"size":3301,"mtime":1613511970478,"results":"27","hashOfConfig":"16"},{"size":4716,"mtime":1613512232341,"results":"28","hashOfConfig":"16"},{"size":1837,"mtime":1613512038675,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"pev822",{"filePath":"33","messages":"34","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"32"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"/home/robert/lighthouse/final-project-lhl/final-project/src/index.js",[],["62","63"],"/home/robert/lighthouse/final-project-lhl/final-project/src/App.js",["64","65","66","67","68","69","70"],"import React, { useState } from 'react';\nimport useApplicationData from \"./hooks/useApplicationData\"\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\n// Import Components\nimport Footer from \"./components/Footer.jsx\";\nimport Leaderboard from \"./components/Leaderboard.jsx\";\nimport Profile from \"./components/Profile.jsx\";\nimport Welcomepage from \"./components/WelcomePage.jsx\";\nimport GameConsole from \"./components/GameConsole.jsx\";\nimport NavbarTC from \"./components/NavbarTC.jsx\";\n\n// Import stylesheets\nimport './App.css';\n\nfunction App() {\n\n  const {\n    contents, \n    setContents,\n    gameConsole,\n    updateGameConsole,\n    userInput,\n    setUserInput\n  } = useApplicationData();\n\n  return (\n    <Router>\n      <div className=\"app\">\n        <NavbarTC />\n        <Switch>\n          <Route path=\"/leaderboard\">\n            <Leaderboard />\n          </Route>\n          <Route path=\"/profile\">\n            <Profile />\n          </Route>\n          <Route path=\"/play\">\n            <GameConsole \n              contents={contents}\n            />\n          </Route>\n          <Route path=\"/\">\n            <Welcomepage />\n          </Route>\n        </Switch>\n        <Footer />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;","/home/robert/lighthouse/final-project-lhl/final-project/src/components/Register.jsx",[],"/home/robert/lighthouse/final-project-lhl/final-project/src/components/Login.jsx",[],"/home/robert/lighthouse/final-project-lhl/final-project/src/components/Footer.jsx",[],"/home/robert/lighthouse/final-project-lhl/final-project/src/components/Leaderboard.jsx",["71","72"],"/home/robert/lighthouse/final-project-lhl/final-project/src/components/Profile.jsx",[],"/home/robert/lighthouse/final-project-lhl/final-project/src/components/WelcomePage.jsx",[],"/home/robert/lighthouse/final-project-lhl/final-project/src/components/GameConsole.jsx",["73","74"],"import React, { useState, useEffect } from 'react';\nimport axios from \"axios\";\nimport { Jumbotron, Button, ProgressBar, Spinner, InputGroup, FormControl, Card } from 'react-bootstrap';\nimport GameCompleteMsg from './GameCompleteMsg';\nimport \"./GameConsole.css\"\n\n\nfunction GameConsole(props) {\n\n  const [seconds, setSeconds] = useState(30);\n  const [typingIn, setTypingIn] = useState(\"\");\n  const [currentLevel, setCurrentLevel] = useState(0);\n  const [intervalId, setIntervalId] = useState(null)\n\n  const Timer = function (seconds){\n    setSeconds(seconds)\n    if (seconds > 0) {\n      setIntervalId(setInterval(() => setSeconds((s) => s-1), 1000))\n    } else {\n      setSeconds(\"Game Over\");\n    }\n  }\n\n  const totalWordsCorrect = function(inputField, currentLevelContent) {\n    const typedIn = inputField.split(' ')\n    const matchingwords = []\n    for (let i = 0; i < typedIn.length; i++) {\n      if(typedIn[i] === currentLevelContent[i])\n      matchingwords.push(typedIn[i])\n      }\n    return matchingwords.length\n  }\n  \n  const resetLevel = function () {\n    clearInterval(intervalId)\n    setCurrentLevel(0);\n    Timer(30)\n  }\n\n  useEffect(() => {\n    if(seconds === 0){\n      setSeconds(\"Game Over\")\n      let currentLevelWords = props.contents[currentLevel].content.split(' ')\n      let totalOfCorrectWords = totalWordsCorrect(typingIn, currentLevelWords)\n      clearInterval(intervalId)\n      axios.post('http://localhost:3004/api/attempts', {\n        user_id: \"\",\n        level_id: currentLevel + 1,\n        words_completed: totalOfCorrectWords,\n        time_taken: 30,\n        passed: false\n    })\n    .catch(error => (console.log(error)))\n    }\n  },[seconds, intervalId]);\n\n  const startGame = function() {\n    if(currentLevel === 0){\n      clearInterval(intervalId)\n      setCurrentLevel(0);\n      Timer(30)\n    } else {\n      clearInterval(intervalId)\n      Timer(30)\n    }\n  }\n\n  //Post request to attempts if both the text areas are the same\n  useEffect(() => {\n    if(typingIn === props.contents[currentLevel]?.content && typingIn !== \"\") {\n      let correctWords = props.contents[currentLevel].content.split(' ').length;\n      let secondsLeft = 30 - seconds;\n      clearInterval(intervalId);\n      setCurrentLevel(currentLevel + 1);\n      setSeconds(30)\n      setTypingIn(\"\");\n      axios.post('http://localhost:3004/api/attempts', {\n        user_id: \"\",\n        level_id: currentLevel + 1,\n        words_completed: correctWords,\n        time_taken: secondsLeft,\n        passed: true\n    })\n      .then(res => {\n        console.log(res);\n      })\n      .catch(error => (console.log(error)))\n    }\n  }, [typingIn, intervalId]) \n\n  return (\n    <div className=\"gameconsole\">\n      <Jumbotron>\n        <h1>TypeCraft</h1>\n        <>\n          <Spinner animation=\"border\" variant=\"primary\" />\n          <Spinner animation=\"border\" variant=\"secondary\" />\n          <Spinner animation=\"border\" variant=\"success\" />\n          <Spinner animation=\"border\" variant=\"danger\" />\n          <Spinner animation=\"border\" variant=\"warning\" />\n          <Spinner animation=\"border\" variant=\"info\" />\n          <Spinner animation=\"border\" variant=\"light\" />\n          <Spinner animation=\"border\" variant=\"dark\" />\n          <Spinner animation=\"grow\" variant=\"primary\" />\n          <Spinner animation=\"grow\" variant=\"secondary\" />\n          <Spinner animation=\"grow\" variant=\"success\" />\n          <Spinner animation=\"grow\" variant=\"danger\" />\n          <Spinner animation=\"grow\" variant=\"warning\" />\n          <Spinner animation=\"grow\" variant=\"info\" />\n          <Spinner animation=\"grow\" variant=\"light\" />\n          <Spinner animation=\"grow\" variant=\"dark\" />\n        </>\n        <br /><br /><br />\n        <ProgressBar aria-valuemin=\"0\" aria-valuemax=\"100\" animated now={props.contents[currentLevel]? (typingIn.length/props.contents[currentLevel].content.length) * 100 : 1} variant=\"success\" />\n        <br />\n        <Card>\n          <Card.Header>{seconds}</Card.Header>\n          <Card.Body>\n            <blockquote className=\"blockquote mb-0\">\n              <div>\n                {props.contents[currentLevel]?.content || <GameCompleteMsg />}\n              </div>\n            </blockquote>\n          </Card.Body>\n        </Card>\n        <br />\n        <InputGroup>\n          <InputGroup.Prepend>\n            <InputGroup.Text id=\"textarea\">TYPE HERE:</InputGroup.Text>\n          </InputGroup.Prepend>\n          <FormControl as=\"textarea\" \n            onChange={(event) => setTypingIn(event.target.value)}\n            value={typingIn}\n            id=\"textarea\"\n            aria-label=\"With textarea\" \n            />\n        </InputGroup>\n        <br />\n        <p>\n          {seconds === 30 ? \n            <Button variant=\"primary\">\n              Resume from Level X\n            </Button> : null || \n            <Button variant=\"primary\" onClick={resetLevel}>\n            Restart Level \n            </Button>}\n          {seconds === 30 ? \n            <Button\n              variant=\"primary\"\n              onClick={startGame}\n            >\n            {currentLevel === 0 ? `Start Game ` : `Start Level ${currentLevel+1}!`}\n            </Button> : null}\n        </p>\n      </Jumbotron>\n    </div>\n  )\n}\n\nexport default GameConsole\n","/home/robert/lighthouse/final-project-lhl/final-project/src/hooks/useApplicationData.js",[],"/home/robert/lighthouse/final-project-lhl/final-project/src/components/GameCompleteMsg.jsx",[],"/home/robert/lighthouse/final-project-lhl/final-project/src/components/NavbarTC.jsx",["75"],"import React, { useState, useEffect } from 'react';\nimport { Navbar, Image, Nav, Dropdown, Modal, Button } from 'react-bootstrap';\nimport { BrowserRouter as Link } from \"react-router-dom\";\nimport useApplicationData from \"../hooks/useApplicationData\";\nimport Register from './Register';\nimport Login from './Login';\n\nfunction NavbarTC() {\n\n  const {\n    loginStatus, \n    setLoginStatus,\n  } = useApplicationData();\n\n  const [showLogin, setShowLogin] = useState(false);\n  const [showRegister, setShowRegister] = useState(false);\n  const [username, setUsername] = useState(\"\");\n\n  const handleCloseLogin = () => setShowLogin(false);\n  const handleShowLogin = () => setShowLogin(true);\n  const handleCloseRegister = () => setShowRegister(false);\n  const handleShowRegister = () => setShowRegister(true);\n\n  useEffect(() => {\n    console.log(\"LOADED!!!\", loginStatus)\n    setUsername(loginStatus);\n  }, [loginStatus])\n\n  return (\n    <div className=\"navbar-tc\">\n      <Navbar sticky=\"top\" collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n        <Link to=\"/\">\n          <Image href=\"/\" src=\"images/typing-icon.png\" className=\"typecraft-logo\" />\n        </Link>\n        <Navbar.Brand href=\"/\">Typecraft</Navbar.Brand>\n        <Nav className=\"mr-auto\">\n        </Nav>\n        <Nav>\n          <Navbar.Brand>Welcome back, @{ localStorage.getItem(\"user_details\") && JSON.parse(localStorage.getItem(\"user_details\")).username }</Navbar.Brand>\n          <Nav.Link onClick={handleShowLogin}>Login</Nav.Link>\n          <Nav.Link onClick={handleShowRegister}>Register</Nav.Link>\n          <Dropdown>\n            <Dropdown.Toggle variant={'dark'} id=\"dropdown-basic\">\n              <Image src=\"images/fox.jpg\" className=\"navbar-avatar\" />\n            </Dropdown.Toggle>\n            <Dropdown.Menu className=\"dropdown-menu-container\">\n              <Dropdown.Item href=\"/profile\">View Profile</Dropdown.Item>\n              <Dropdown.Item href=\"/leaderboard\">View Leaderboard</Dropdown.Item>\n              <Dropdown.Item \n                href=\"/\"\n                onClick={() => localStorage.clear()}\n                >Logout</Dropdown.Item>\n            </Dropdown.Menu>\n          </Dropdown>\n        </Nav>\n      </Navbar>\n\n      {/* Modal for Login Form */}\n      <Modal show={showLogin} onHide={handleCloseLogin}>\n        <Modal.Header closeButton>\n          <Modal.Title>Login</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Login loginStatus={loginStatus} setLoginStatus={setLoginStatus} />\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"primary\" onClick={() => {handleCloseLogin(); handleShowRegister()}}>\n            New User? Click Here To Register!\n          </Button>\n        </Modal.Footer>\n      </Modal>\n\n      {/* Modal for Register Form */}\n      <Modal show={showRegister} onHide={handleCloseRegister}>\n        <Modal.Header closeButton>\n          <Modal.Title>Register</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Register />\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"primary\" onClick={() => {handleCloseRegister(); handleShowLogin()}}>\n            Already Registered? Click Here To Login!\n          </Button>\n        </Modal.Footer>\n      </Modal>     \n    </div>\n  )\n}\n\nexport default NavbarTC\n","/home/robert/lighthouse/final-project-lhl/final-project/src/components/EditUser.jsx",[],"/home/robert/lighthouse/final-project-lhl/final-project/src/components/EditPassword.jsx",[],{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":1,"column":17,"nodeType":"82","messageId":"83","endLine":1,"endColumn":25},{"ruleId":"80","severity":1,"message":"84","line":3,"column":50,"nodeType":"82","messageId":"83","endLine":3,"endColumn":54},{"ruleId":"80","severity":1,"message":"85","line":20,"column":5,"nodeType":"82","messageId":"83","endLine":20,"endColumn":16},{"ruleId":"80","severity":1,"message":"86","line":21,"column":5,"nodeType":"82","messageId":"83","endLine":21,"endColumn":16},{"ruleId":"80","severity":1,"message":"87","line":22,"column":5,"nodeType":"82","messageId":"83","endLine":22,"endColumn":22},{"ruleId":"80","severity":1,"message":"88","line":23,"column":5,"nodeType":"82","messageId":"83","endLine":23,"endColumn":14},{"ruleId":"80","severity":1,"message":"89","line":24,"column":5,"nodeType":"82","messageId":"83","endLine":24,"endColumn":17},{"ruleId":"80","severity":1,"message":"90","line":8,"column":18,"nodeType":"82","messageId":"83","endLine":8,"endColumn":26},{"ruleId":"80","severity":1,"message":"91","line":10,"column":20,"nodeType":"82","messageId":"83","endLine":10,"endColumn":31},{"ruleId":"92","severity":1,"message":"93","line":55,"column":5,"nodeType":"94","endLine":55,"endColumn":26,"suggestions":"95"},{"ruleId":"92","severity":1,"message":"96","line":89,"column":6,"nodeType":"94","endLine":89,"endColumn":28,"suggestions":"97"},{"ruleId":"80","severity":1,"message":"98","line":17,"column":10,"nodeType":"82","messageId":"83","endLine":17,"endColumn":18},"no-native-reassign",["99"],"no-negated-in-lhs",["100"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'setContents' is assigned a value but never used.","'gameConsole' is assigned a value but never used.","'updateGameConsole' is assigned a value but never used.","'userInput' is assigned a value but never used.","'setUserInput' is assigned a value but never used.","'setUsers' is assigned a value but never used.","'setSortType' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'currentLevel', 'props.contents', and 'typingIn'. Either include them or remove the dependency array.","ArrayExpression",["101"],"React Hook useEffect has missing dependencies: 'currentLevel', 'props.contents', and 'seconds'. Either include them or remove the dependency array. You can also do a functional update 'setCurrentLevel(c => ...)' if you only need 'currentLevel' in the 'setCurrentLevel' call.",["102"],"'username' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"103","fix":"104"},{"desc":"105","fix":"106"},"Update the dependencies array to be: [seconds, intervalId, props.contents, currentLevel, typingIn]",{"range":"107","text":"108"},"Update the dependencies array to be: [typingIn, intervalId, props.contents, currentLevel, seconds]",{"range":"109","text":"110"},[1661,1682],"[seconds, intervalId, props.contents, currentLevel, typingIn]",[2620,2642],"[typingIn, intervalId, props.contents, currentLevel, seconds]"]