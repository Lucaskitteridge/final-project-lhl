[{"/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/index.js":"1","/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/App.js":"2","/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/Register.jsx":"3","/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/Footer.jsx":"4","/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/Login.jsx":"5","/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/Leaderboard.jsx":"6","/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/Profile.jsx":"7","/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/WelcomePage.jsx":"8","/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/GameConsole.jsx":"9","/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/hooks/useApplicationData.js":"10","/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/GameCompleteMsg.jsx":"11","/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/NavbarTC.jsx":"12","/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/Attempts.jsx":"13","/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/Chat.jsx":"14","/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/TextContainer.jsx":"15","/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/Messages.jsx":"16","/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/Input.jsx":"17","/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/Message.jsx":"18","/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/InfoBar.jsx":"19","/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/PlayerMap.jsx":"20"},{"size":219,"mtime":1613183293159,"results":"21","hashOfConfig":"22"},{"size":1261,"mtime":1613788035569,"results":"23","hashOfConfig":"22"},{"size":5068,"mtime":1613788418191,"results":"24","hashOfConfig":"22"},{"size":1206,"mtime":1613788418168,"results":"25","hashOfConfig":"22"},{"size":2086,"mtime":1613790762387,"results":"26","hashOfConfig":"22"},{"size":4350,"mtime":1613788418181,"results":"27","hashOfConfig":"22"},{"size":6141,"mtime":1613791351002,"results":"28","hashOfConfig":"22"},{"size":1459,"mtime":1613791197915,"results":"29","hashOfConfig":"22"},{"size":11082,"mtime":1613788418172,"results":"30","hashOfConfig":"22"},{"size":1374,"mtime":1613621444271,"results":"31","hashOfConfig":"22"},{"size":459,"mtime":1613524052171,"results":"32","hashOfConfig":"22"},{"size":3365,"mtime":1613788418184,"results":"33","hashOfConfig":"22"},{"size":6034,"mtime":1613791495979,"results":"34","hashOfConfig":"22"},{"size":1910,"mtime":1613790454022,"results":"35","hashOfConfig":"22"},{"size":1168,"mtime":1613683562946,"results":"36","hashOfConfig":"22"},{"size":430,"mtime":1613630975008,"results":"37","hashOfConfig":"22"},{"size":508,"mtime":1613630974995,"results":"38","hashOfConfig":"22"},{"size":1014,"mtime":1613786659832,"results":"39","hashOfConfig":"22"},{"size":327,"mtime":1613788418176,"results":"40","hashOfConfig":"22"},{"size":2947,"mtime":1613788418186,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1kac59u",{"filePath":"45","messages":"46","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"44"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"44"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"44"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"44"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"44"},"/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/index.js",[],["91","92"],"/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/App.js",["93","94","95","96","97","98","99"],"import React, { useState } from 'react';\nimport useApplicationData from \"./hooks/useApplicationData\"\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\n// Import Components\nimport Footer from \"./components/Footer.jsx\";\nimport Leaderboard from \"./components/Leaderboard.jsx\";\nimport Profile from \"./components/Profile.jsx\";\nimport Welcomepage from \"./components/WelcomePage.jsx\";\nimport GameConsole from \"./components/GameConsole.jsx\";\nimport NavbarTC from \"./components/NavbarTC.jsx\";\n\n// Import stylesheets\nimport './App.css';\n\nfunction App() {\n\n  const {\n    contents,\n    setContents,\n    gameConsole,\n    updateGameConsole,\n    userInput,\n    setUserInput\n  } = useApplicationData();\n\n  return (\n    <Router>\n      <div className=\"app\">\n        <NavbarTC />\n        <Switch>\n          <Route path=\"/leaderboard\">\n            <Leaderboard />\n          </Route>\n          <Route path=\"/profile\">\n            <Profile />\n          </Route>\n          <Route path=\"/play\">\n            <GameConsole\n              contents={contents}\n            />\n          </Route>\n          <Route path=\"/\">\n            <Welcomepage />\n          </Route>\n        </Switch>\n        <Footer />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;","/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/Register.jsx",[],"/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/Footer.jsx",[],"/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/Login.jsx",[],"/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/Leaderboard.jsx",["100","101"],"import React, { useState, useMemo } from 'react'\nimport {Container, Table} from 'react-bootstrap';\nimport useApplicationData from \"../hooks/useApplicationData\"\nimport Map from \"./PlayerMap\";\nimport \"./Leaderboard.css\"\n\nfunction Leaderboard() {\n  \n  const { users, setUsers } = useApplicationData()\n\n  const [sortType, setSortType] = useState('levels');\n\n  const sortedUsers = useMemo(() => {\n    const sortArray = type => {\n      const types = {\n        wordsPerMin: 'words_per_min',\n        levels: 'highest_level_cleared',\n      };\n      const sortProperty = types[type];\n      const secondarySortProperty = types[type === 'levels' ? 'wordsPerMin' : 'levels']\n      const sorted = [...users].sort((a, b) => {\n        const initialDiff = b[sortProperty] - a[sortProperty]\n        if (initialDiff === 0) {\n          return b[secondarySortProperty] - a[secondarySortProperty]\n        } else {\n          return initialDiff;\n        }\n      });\n      return sorted;\n    };\n    return sortArray(sortType)\n  }, [users, sortType])\n\n\n\n  return (\n    <div className=\"leaderboard\">\n      <Container className=\"leadercontainer\">\n      <Table striped bordered hover variant=\"dark\">\n        <thead>\n          <tr>\n            <th colSpan=\"4\" className=\"align-me\">Leaderboard</th>\n          </tr>\n          <tr>\n            <th>Ranking</th>\n            <th>Username</th>\n            <th>Highest Level</th>\n            <th>Words Per Minute</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>1st</td>\n            <td>@{sortedUsers[0] && sortedUsers[0].username}</td>\n            <td>{sortedUsers[0] && sortedUsers[0].highest_level_cleared}</td>\n            <td>{sortedUsers[0] && sortedUsers[0].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>2nd</td>\n            <td>@{sortedUsers[1] && sortedUsers[1].username}</td>\n            <td>{sortedUsers[1] && sortedUsers[1].highest_level_cleared}</td>\n            <td>{sortedUsers[1] && sortedUsers[1].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>3rd</td>\n            <td>@{sortedUsers[2] && sortedUsers[2].username}</td>\n            <td>{sortedUsers[2] && sortedUsers[2].highest_level_cleared}</td>\n            <td>{sortedUsers[2] && sortedUsers[2].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>4th</td>\n            <td>@{sortedUsers[3] && sortedUsers[3].username}</td>\n            <td>{sortedUsers[3] && sortedUsers[3].highest_level_cleared}</td>\n            <td>{sortedUsers[3] && sortedUsers[3].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>5th</td>\n            <td>@{sortedUsers[4] && sortedUsers[4].username}</td>\n            <td>{sortedUsers[4] && sortedUsers[4].highest_level_cleared}</td>\n            <td>{sortedUsers[4] && sortedUsers[4].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>6th</td>\n            <td>@{sortedUsers[5] && sortedUsers[5].username}</td>\n            <td>{sortedUsers[5] && sortedUsers[5].highest_level_cleared}</td>\n            <td>{sortedUsers[5] && sortedUsers[5].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>7th</td>\n            <td>@{sortedUsers[6] && sortedUsers[6].username}</td>\n            <td>{sortedUsers[6] && sortedUsers[6].highest_level_cleared}</td>\n            <td>{sortedUsers[6] && sortedUsers[6].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>8th</td>\n            <td>@{sortedUsers[7] && sortedUsers[7].username}</td>\n            <td>{sortedUsers[7] && sortedUsers[7].highest_level_cleared}</td>\n            <td>{sortedUsers[7] && sortedUsers[7].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>9th</td>\n            <td>@{sortedUsers[8] && sortedUsers[8].username}</td>\n            <td>{sortedUsers[8] && sortedUsers[8].highest_level_cleared}</td>\n            <td>{sortedUsers[8] && sortedUsers[8].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>10th</td>\n            <td>@{sortedUsers[9] && sortedUsers[9].username}</td>\n            <td>{sortedUsers[9] && sortedUsers[9].highest_level_cleared}</td>\n            <td>{sortedUsers[9] && sortedUsers[9].words_per_min}</td>\n          </tr>\n        </tbody>\n      </Table>\n      </Container>\n      <Container className=\"googleMap\">\n      <Map />\n      </Container>\n    </div>\n  )\n}\n\nexport default Leaderboard\n","/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/Profile.jsx",["102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118"],"import React from 'react';\nimport { useState, useEffect } from \"react\";\nimport { Container, Row, Col, Card, Button, ProgressBar } from 'react-bootstrap';\nimport Attempts from \"./Attempts\";\nimport \"./Profile.css\";\nimport axios from \"axios\";\n\nfunction Profile() {\n\n  const [wpm, setWpm] = useState(0);\n  const [highest, setHighest] = useState(0);\n\n  useEffect(() => {\n    axios.get(\"http://localhost:3004/api/users\", {\n    })\n      .then(res => {\n        for (let user of res.data['users']) {\n          if (user.id === JSON.parse(localStorage.getItem(\"user_details\")).id) {\n            setWpm(user.words_per_min)\n            setHighest(user.highest_level_cleared)\n          }\n        }\n      })\n  }, [])\n\n  const roundTo = require('round-to');\n\n  const userGameStatus = (((localStorage.getItem(\"user_details\") && JSON.parse(localStorage.getItem(\"user_details\")).highest_level_cleared) / 12) * 100)\n\n  return (\n    <div className=\"profile\">\n      <Container>\n        <Row>\n          <Col>\n            <Card border=\"secondary\" style={{ width: '18rem' }}>\n              <Card.Img variant=\"top\" src=\"images/sample-avatar.jpg\" className=\"avatar\" />\n              <Card.Body>\n                <Card.Title className=\"profileName\">{localStorage.getItem(\"user_details\") && JSON.parse(localStorage.getItem(\"user_details\")).first_name} {localStorage.getItem(\"user_details\") && JSON.parse(localStorage.getItem(\"user_details\")).last_name}</Card.Title>\n                <Card.Subtitle className=\"profileUserName text-muted\">@{localStorage.getItem(\"user_details\") && JSON.parse(localStorage.getItem(\"user_details\")).username}</Card.Subtitle>\n                <ProgressBar animated aria-valuemin=\"0\" aria-valuemax=\"100\" now={highest * 8.4} label={roundTo(highest * 8.4, 0) + \"%\"} />\n                {userGameStatus == 100 ?\n                  <Card.Text className=\"medalCard\">\n                    <br />\n                    <Card.Img className=\"medal-icon\" variant=\"top\" src=\"images/rookiemedal.png\" className=\"medal-icon\" />\n                    <Card.Img className=\"medal-icon\" variant=\"top\" src=\"images/3medal.png\" className=\"medal-icon\" />\n                    <Card.Img className=\"medal-icon\" variant=\"top\" src=\"images/2medal.png\" className=\"medal-icon\" />\n                    <Card.Img className=\"medal-icon\" variant=\"top\" src=\"images/1medal.png\" className=\"medal-icon\" />\n                    <Card.Img className=\"medal-icon\" variant=\"top\" src=\"images/3startrophy.png\" className=\"medal-icon\" />\n                    <br />\n                    <strong className=\"progressTitle\">Master</strong>\n                  </Card.Text>\n                  : userGameStatus > 75 ?\n                    <Card.Text className=\"medalCard\">\n                      <br />\n                      <Card.Img className=\"medal-icon\" variant=\"top\" src=\"images/rookiemedal.png\" className=\"medal-icon\" />\n                      <Card.Img className=\"medal-icon\" variant=\"top\" src=\"images/3medal.png\" className=\"medal-icon\" />\n                      <Card.Img className=\"medal-icon\" variant=\"top\" src=\"images/2medal.png\" className=\"medal-icon\" />\n                      <Card.Img className=\"medal-icon\" variant=\"top\" src=\"images/1medal.png\" className=\"medal-icon\" />\n                      <br />\n                      <strong className=\"progressTitle\">Veteran</strong>\n                    </Card.Text>\n                    : userGameStatus > 50 ?\n                      <Card.Text className=\"medalCard\">\n                        <br />\n                        <Card.Img className=\"medal-icon\" variant=\"top\" src=\"images/rookiemedal.png\" className=\"medal-icon\" />\n                        <Card.Img className=\"medal-icon\" variant=\"top\" src=\"images/3medal.png\" className=\"medal-icon\" />\n                        <Card.Img className=\"medal-icon\" variant=\"top\" src=\"images/2medal.png\" className=\"medal-icon\" />\n                        <br />\n                        <strong className=\"progressTitle\">Experienced</strong>\n                      </Card.Text>\n                      : userGameStatus > 25 ?\n                        <Card.Text className=\"medalCard\">\n                          <br />\n                          <Card.Img className=\"medal-icon\" variant=\"top\" src=\"images/rookiemedal.png\" className=\"medal-icon\" />\n                          <Card.Img className=\"medal-icon\" variant=\"top\" src=\"images/3medal.png\" className=\"medal-icon\" />\n                          <br />\n                          <strong className=\"progressTitle\">Seasoned</strong>\n                        </Card.Text>\n                        : userGameStatus > 1 ?\n                        <Card.Text className=\"medalCard\">\n                          <br />\n                          <Card.Img className=\"medal-icon\" variant=\"top\" src=\"images/rookiemedal.png\" className=\"medal-icon\" />\n                          <br />\n                          <strong className=\"progressTitle\">Rookie</strong>\n                        </Card.Text>\n                        : \n                        <Card.Text className=\"medalCard\">\n                          <br />\n                          <Card.Img className=\"medal-icon\" variant=\"top\" src=\"images/new.png\" className=\"medal-icon\" />\n                          <br />\n                          <strong className=\"progressTitle\">Newbie</strong>\n                        </Card.Text>\n                }\n                <Card.Text>Highest Level Completed {highest + \"/12\"}</Card.Text>\n                <Card.Text>Average WPM: {wpm}</Card.Text>\n                <Button className=\"leaderboardButton\" variant=\"primary\" href=\"/leaderboard\">Global Leaderboard</Button>\n              </Card.Body>\n            </Card>\n          </Col>\n          <Col>\n            <Row>\n              <Card style={{ width: '45rem' }} >\n                <Card.Header as=\"h5\">🔥Your Top Typing Speeds🔥</Card.Header>\n                <Card.Body style={{ paddingBottom: '13px', paddingTop: '13px' }}>\n                  <Attempts />\n                </Card.Body>\n              </Card>\n            </Row>\n            <br />\n            <br />\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  )\n}\n\nexport default Profile\n","/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/WelcomePage.jsx",["119","120","121","122","123"],"import React, { useState } from 'react';\nimport { Container, Jumbotron, Image, Button, Fade } from 'react-bootstrap';\nimport Typing from \"react-typing-animation\";\nimport useSound from 'use-sound';\nimport DelayLink from 'react-delay-link';\nimport { useHistory } from 'react-router-dom';\nimport \"./WelcomePage.css\";\nimport useApplicationData from '../hooks/useApplicationData';\n\n\nfunction Welcomepage() {\n\n  const playGameSoundUrl = \"./sounds/SuperMarioBros.mp3\";\n  const [playGameSound] = useSound(playGameSoundUrl);\n\n  const history = useHistory();\n  const navigateToPlay = () => {\n    history.push(\"/play\");\n    history.go(0)\n  }\n\n  return (\n    <div className=\"welcome-container\">\n      <Jumbotron fluid className=\"container-of-bg\" style={{marginBottom: 0}}>\n        <Container className=\"welcome-text-box\">\n          <h1 className=\"welcome-to-typecraft\">\n            <Typing speed={60}>\n              Welcome to TypeCraft\n            </Typing>\n          </h1>\n          <h2>\n           🔥 10 Levels 🔥\n          </h2>\n          <h2>\n            🔥 30 Seconds Each 🔥\n          </h2>\n          <h2>\n            Do you have what it takes?\n          </h2>\n          <DelayLink delay={1000} to=\"/play\" clickAction={navigateToPlay} replace={false}>\n            <Button className=\"startGameButton\" variant=\"primary\" size=\"lg\">Play Game</Button>\n          </DelayLink>\n        </Container>\n      </Jumbotron>\n    </div>\n  )\n}\n\nexport default Welcomepage\n\n","/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/GameConsole.jsx",["124","125","126","127","128","129"],"import React, { useState, useEffect} from 'react';\nimport axios from \"axios\";\nimport { Jumbotron, Button, ProgressBar, Spinner, InputGroup, FormControl, Card } from 'react-bootstrap';\nimport GameCompleteMsg from './GameCompleteMsg';\nimport Chat from './Chat';\nimport \"./GameConsole.css\"\nimport useApplicationData from \"../hooks/useApplicationData\";\n\nfunction GameConsole(props) {\n\n  const { attempts, setAttempts, levels, setLevels } = useApplicationData()\n\n  const [seconds, setSeconds] = useState(30);\n  const [typingIn, setTypingIn] = useState(\"\");\n  const [currentLevel, setCurrentLevel] = useState(0);\n  const [intervalId, setIntervalId] = useState(null)\n  const [levelContent, setLevelContent] = useState(\"Are You Ready To Start?\")\n  const [levelStarted, setLevelStarted] = useState(false)\n  const [text, setText] = useState(\"\");\n  const [highestLevel, setHighestLevel] = useState(0);\n\n  const currentUser = (localStorage.getItem(\"user_details\") && JSON.parse(localStorage.getItem(\"user_details\"))?.id)\n\n  // calculate wpm of the user\n  const totalAvgWpm = function () {\n    let result = []\n    for (let attempt of attempts)\n      if (attempt.user_id === currentUser) {\n        result.push(attempt)\n      }\n    let totalWords = (result.reduce((a, b) => a + (parseInt(b.words_completed) || 0), 0))\n    let totalTime = result.reduce((a, b) => a + (parseInt(b.time_taken) || 0), 0) / 60\n    return totalWords / totalTime\n  }\n  //Get users so we can check the highest level cleared\n  useEffect(() => {\n    axios.get(\"http://localhost:3004/api/users\", {\n    })\n      .then(res => {\n        for (let user of res.data['users']) {\n          if (user.id === JSON.parse(localStorage.getItem(\"user_details\"))?.id) {\n            setHighestLevel(user.highest_level_cleared)\n          }\n        }\n      })\n  }, [highestLevel])\n\n  //Highlights the words that are right\n  const highlightWords = (event) => {\n    let value = event.target.value;\n    let txt = document.getElementById(\"console-text\").innerText;\n    let idx = txt.indexOf(value);\n    setTypingIn(value);\n    if (idx >= 0) {\n      let newText = [txt.substring(0, idx), <strong>{txt.substring(idx, idx + value.length)}</strong>, txt.substring(idx + value.length)];\n      setLevelContent(newText);\n    } else {\n      setLevelContent(levelContent);\n    }\n  }\n\n  //Timer to start and set seconds\n  const Timer = function (seconds) {\n    setLevelStarted(true)\n    setSeconds(seconds)\n    if (seconds > 0) {\n      setIntervalId(setInterval(() => setSeconds((s) => s - 1), 1000))\n    } else {\n      setSeconds(\"Game Over\");\n    }\n  }\n\n  // use randomtext api to get random sentences\n  const giveMeRandomText = (level_id) => {\n    if (level_id === 0) return \"Incorrect level_id entered.\"\n    if (levels[level_id - 1] === undefined) return \"Error occured\"\n    let nOfWords = levels[level_id - 1].number_of_words;\n    // console.log(\"Your requested number of words =>\", nOfWords, `p-1/${nOfWords}-${nOfWords}`);\n    axios.get(`https://www.randomtext.me/api/gibberish/p-1/${nOfWords}-${nOfWords}`)\n      .then(res => {\n        let taggedText = res.data.text_out;\n        // console.log(\"we get back>>\", taggedText)\n        let cleanText = taggedText.replace(/<\\/?[^>]+(>|$)/g, \"\");\n        postContentToDB(cleanText, level_id);\n        setLevelContent(cleanText)\n        setText(cleanText)\n      })\n  }\n\n  // giveMeRandomText(7);\n  // post random content from api to our server\n  const postContentToDB = (cleanText, level_id) => {\n    axios.post('/contents', {\n      cleanText: cleanText,\n      level_id: level_id,\n      theme_id: 1\n    })\n      .then(res => {\n      })\n      .catch(err => console.log(\"Catch block of posting content to DB from front end\", err))\n  }\n\n  //Starts the timer and the sets the level up\n  const startGame = function () {\n    console.log(currentLevel)\n    setLevelStarted(true);\n    setTypingIn(\"\");\n    clearInterval(intervalId)\n    Timer(30)\n    setCurrentLevel(currentLevel)\n    setLevelContent(giveMeRandomText(currentLevel + 1))\n    if (currentLevel === 0) {\n      setCurrentLevel(0);\n    }\n  }\n\n  //Triggered when they want to reset the current level\n  const resetLevel = function () {\n    setLevelStarted(false)\n    setLevelContent(\"Are You Ready To Start?\")\n    setTypingIn(\"\");\n    clearInterval(intervalId)\n    setCurrentLevel(currentLevel)\n    setSeconds(30)\n  }\n\n  // Restarts the game from the first level\n  const restartfromFirstLevel = function () {\n    setLevelStarted(false)\n    setLevelContent(\"Are You Ready To Start?\")\n    setTypingIn(\"\");\n    clearInterval(intervalId)\n    setCurrentLevel(0);\n    setSeconds(30)\n  }\n\n  //If they dont finish a level, this calcuates how many words were correct\n  const totalWordsCorrect = function (inputField, currentLevelContent) {\n    const typedIn = inputField.split(' ')\n    const matchingwords = []\n    for (let i = 0; i < typedIn.length; i++) {\n      if (typedIn[i] === currentLevelContent[i])\n        matchingwords.push(typedIn[i])\n    }\n    return matchingwords.length\n  }\n\n  //Resuming from the last cleared level button\n  const resumeFromLastClearedLevel = function () {\n    setLevelStarted(true)\n    setCurrentLevel(highestLevel);\n    setLevelContent(giveMeRandomText(highestLevel + 1))\n    setSeconds(30)\n    Timer(30)\n    clearInterval(intervalId)\n  }\n  useEffect(() => {\n    if (currentLevel !== 0) {\n      setTypingIn(\"\");\n      clearInterval(intervalId)\n      setLevelContent(giveMeRandomText(currentLevel + 1))\n      setSeconds(30)\n      Timer(30)\n    }\n    if ((currentLevel) > highestLevel) {\n      setHighestLevel(currentLevel)\n    }\n  }, [currentLevel])\n\n  //Post request to attempts if they fail the level.\n  useEffect(() => {\n    if (seconds === 0) {\n      setSeconds(\"Game Over\")\n      setLevelStarted(false)\n      let currentLevelWords = props.contents[currentLevel].content.split(' ')\n      let totalOfCorrectWords = totalWordsCorrect(typingIn, currentLevelWords)\n      let wpm = totalAvgWpm()\n      setLevelContent(\"GameOver\")\n      clearInterval(intervalId)\n      axios.post('/attempts', {\n        user_id: JSON.parse(localStorage.getItem(\"user_details\"))?.id,\n        level_id: currentLevel + 1,\n        words_completed: totalOfCorrectWords,\n        time_taken: 30,\n        passed: false,\n        current_highest_level_passed: JSON.parse(localStorage.getItem(\"user_details\"))?.highest_level_cleared,\n        wpm: wpm\n      })\n        .then(res => {\n          console.log(res)\n        })\n        .catch(err => console.log(err))\n    }\n  }, [seconds, intervalId]);\n\n  //Post request to attempts if both the text areas are the same\n  useEffect(() => {\n    if (typingIn === text.trim() && typingIn !== \"\") {\n      setLevelContent(giveMeRandomText(currentLevel))\n      let correctWords = text.split(' ').length;\n      let secondsLeft = 30 - seconds;\n      clearInterval(intervalId);\n      let wpm = totalAvgWpm()\n      setCurrentLevel(currentLevel + 1)\n      setSeconds(30)\n      setTypingIn(\"\");\n      axios.post('/attempts', {\n        user_id: JSON.parse(localStorage.getItem(\"user_details\"))?.id,\n        level_id: currentLevel + 1,\n        words_completed: correctWords,\n        time_taken: secondsLeft,\n        passed: true,\n        current_highest_level_passed: JSON.parse(localStorage.getItem(\"user_details\"))?.highest_level_cleared,\n        wpm: wpm\n      })\n        .then(res => {\n          console.log(res)\n        })\n        .catch(err => console.log(err))\n    }\n  }, [typingIn, intervalId])\n\n  //Stops from pasting into text field.\n  const handleChange = (e) => {\n    e.preventDefault();\n  };\n\n  return (\n    <div className=\"gameconsole\">\n      <Jumbotron className=\"game-area\" style={{ marginBottom: 0 }}>\n        <h1>TypeCraft</h1>\n        <>\n          <Spinner animation=\"border\" variant=\"primary\" />\n          <Spinner animation=\"border\" variant=\"secondary\" />\n          <Spinner animation=\"border\" variant=\"success\" />\n          <Spinner animation=\"border\" variant=\"danger\" />\n          <Spinner animation=\"border\" variant=\"warning\" />\n          <Spinner animation=\"border\" variant=\"info\" />\n          <Spinner animation=\"border\" variant=\"light\" />\n          <Spinner animation=\"border\" variant=\"dark\" />\n          <Spinner animation=\"grow\" variant=\"primary\" />\n          <Spinner animation=\"grow\" variant=\"secondary\" />\n          <Spinner animation=\"grow\" variant=\"success\" />\n          <Spinner animation=\"grow\" variant=\"danger\" />\n          <Spinner animation=\"grow\" variant=\"warning\" />\n          <Spinner animation=\"grow\" variant=\"info\" />\n          <Spinner animation=\"grow\" variant=\"light\" />\n          <Spinner animation=\"grow\" variant=\"dark\" />\n        </>\n        <br /><br /><br />\n        <ProgressBar aria-valuemin=\"0\" aria-valuemax=\"100\" animated now={props.contents[currentLevel] ? (typingIn.length / props.contents[currentLevel].content.length) * 100 : 0} variant=\"success\" />\n        <br />\n        <Card>\n          <Card.Header>{seconds}</Card.Header>\n          <Card.Body>\n            <blockquote className=\"blockquote mb-0\">\n              <div id=\"console-text\">\n                {currentLevel === 13 ? <GameCompleteMsg /> : levelContent}\n              </div>\n            </blockquote>\n          </Card.Body>\n        </Card>\n        <br />\n        <InputGroup>\n          <InputGroup.Prepend>\n            <InputGroup.Text id=\"textarea\">TYPE HERE:</InputGroup.Text>\n          </InputGroup.Prepend>\n          <FormControl as=\"textarea\"\n            // onChange={(event) => setTypingIn(event.target.value)}\n            onChange={(event) => highlightWords(event)}\n            value={typingIn}\n            id=\"textarea\"\n            aria-label=\"With textarea\"\n          // onCut={handleChange}\n          // onCopy={handleChange}\n          // onPaste={handleChange}\n          />\n        </InputGroup>\n        <br />\n        <p>\n          {levelStarted === false && currentLevel !== 0 ?\n            <Button className=\"startGame\" variant=\"primary\" onClick={restartfromFirstLevel}>\n              Start from the begining\n            </Button> : null}\n          {levelStarted === false && highestLevel >= 1 && highestLevel !== currentLevel ?\n            <Button className=\"startGame\" variant=\"primary\" onClick={resumeFromLastClearedLevel} >\n              Start from level {highestLevel + 1}\n            </Button> : null}\n          {levelStarted === true ?\n            <Button className=\"restartGame\" variant=\"primary\" onClick={resetLevel}>\n              Restart Level\n            </Button> : null}\n          {levelStarted === false ?\n            <Button\n              className=\"startGame\"\n              variant=\"primary\"\n              onClick={startGame}\n            >\n              {(levelStarted === false || seconds !== \"Game Over\") && currentLevel === 0 ? `Start Game ` : `Start Level ${currentLevel + 1}!`}\n            </Button> : null}\n          {/* {levelStarted === false ?\n              <Button variant=\"primary\" onClick={restartfromFirstLevel}>\n              Go back to Level 1\n            </Button> : null} */}\n        </p>\n      </Jumbotron>\n      <Chat />\n    </div>\n  )\n}\n\nexport default GameConsole\n","/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/hooks/useApplicationData.js",[],"/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/GameCompleteMsg.jsx",[],"/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/NavbarTC.jsx",["130"],"import React, { useState } from 'react';\nimport { Navbar, Image, Nav, Dropdown, Modal, Button } from 'react-bootstrap';\nimport { BrowserRouter as Link } from \"react-router-dom\";\nimport useApplicationData from \"../hooks/useApplicationData\";\nimport Register from './Register';\nimport Login from './Login';\n\nfunction NavbarTC() {\n\n  const { checkLoggedIn } = useApplicationData();\n\n  const [showLogin, setShowLogin] = useState(false);\n  const [showRegister, setShowRegister] = useState(false);\n\n  const handleCloseLogin = () => setShowLogin(false);\n  const handleShowLogin = () => setShowLogin(true);\n  const handleCloseRegister = () => setShowRegister(false);\n  const handleShowRegister = () => setShowRegister(true);\n\n  return (\n    <div className=\"navbar-tc\">\n      <Navbar sticky=\"top\" collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand style={{marginBottom: \"9px\", marginRight: \"0\"}} href=\"/\">\n          <Image href=\"/\" src=\"images/keyboard.png\" className=\"typecraft-logo\" />\n        </Navbar.Brand>\n        <Navbar.Brand href=\"/\">TypeCraft</Navbar.Brand>\n        <Nav className=\"mr-auto\">\n        </Nav>\n        <Nav>\n          <Navbar.Brand> {checkLoggedIn() && 'Welcome back, ' + JSON.parse(localStorage.getItem(\"user_details\")).username}</Navbar.Brand>\n          {!checkLoggedIn() && <Nav.Link onClick={handleShowLogin}>Login</Nav.Link>}\n          {!checkLoggedIn() && <Nav.Link onClick={handleShowRegister}>Register</Nav.Link>}\n          {checkLoggedIn() && \n            <Dropdown>\n              <Dropdown.Toggle variant={'dark'} id=\"dropdown-basic\">\n                <Image src=\"images/fox.jpg\" className=\"navbar-avatar\" />\n              </Dropdown.Toggle>\n              <Dropdown.Menu className=\"dropdown-menu-container\">\n                <Dropdown.Item href=\"/profile\">View Profile</Dropdown.Item>\n                <Dropdown.Item href=\"/leaderboard\">View Leaderboard</Dropdown.Item>\n                <Dropdown.Item \n                  href=\"/\"\n                  onClick={() => localStorage.clear()}\n                  >Logout</Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n          }\n        </Nav>\n      </Navbar>\n\n      {/* Modal for Login Form */}\n      {!checkLoggedIn() &&\n        <Modal show={showLogin} onHide={handleCloseLogin}>\n        <Modal.Header closeButton>\n          <Modal.Title>Login</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Login \n            handleCloseLogin={handleCloseLogin}\n          />\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"primary\" onClick={() => {handleCloseLogin(); handleShowRegister()}}>\n            New User? Click Here To Register!\n          </Button>\n        </Modal.Footer>\n      </Modal>\n      }\n\n\n      {/* Modal for Register Form */}\n      <Modal show={showRegister} onHide={handleCloseRegister}>\n        <Modal.Header closeButton>\n          <Modal.Title>Register</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Register \n            handleCloseRegister={handleCloseRegister}\n          />\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"primary\" onClick={() => {handleCloseRegister(); handleShowLogin()}}>\n            Already Registered? Click Here To Login!\n          </Button>\n        </Modal.Footer>\n      </Modal>     \n    </div>\n  )\n}\n\nexport default NavbarTC\n","/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/Attempts.jsx",["131","132","133","134"],"/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/Chat.jsx",["135","136"],"import io from \"socket.io-client\";\n\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./Chat.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { useEffect, useState } from \"react\";\nimport moment from \"moment\";\n\nimport TextContainer from './TextContainer';\nimport Messages from './Messages';\nimport InfoBar from './InfoBar';\nimport Input from './Input';\n\nimport './Chat.css';\n\nconst username = JSON.parse(localStorage.getItem(\"user_details\"))?.username\n\nconst socket = io(\"http://localhost:8000\", {\n  transports: [\"websocket\", \"polling\"]\n});\n\nconst Chat = () => {\n\n  const [users, setUsers] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n\n  useEffect(() => {\n    socket.on(\"connect\", () => {\n      socket.emit(\"username\", username);\n    });\n\n    socket.on(\"users\", users => {\n      setUsers(users);\n    });\n\n    socket.on(\"message\", message => {\n      setMessages(messages => [...messages, message]);\n    });\n\n    socket.on(\"connected\", user => {\n      setUsers(users => [...users, user]);\n    });\n\n    socket.on(\"disconnected\", id => {\n      setUsers(users => {\n        return users.filter(user => user.id !== id);\n      });\n    });\n  }, []);\n\n  // const submit = event => {\n  //   event.preventDefault();\n  //   socket.emit(\"send\", message);\n  //   setMessage(\"\");\n  // };\n  // window.location.reload();\n\n\n  const sendMessage = (event) => {\n    event.preventDefault();\n    setMessage('');\n    if(message) {\n      socket.emit('send', message, () => setMessage(''));\n    }\n  }\n\n  return (\n    <div className=\"outerContainer\">\n      <TextContainer users={users}/>\n      <div className=\"chat-container\">\n          <InfoBar />\n          <Messages messages={messages} name={username} />\n          <Input message={message} setMessage={setMessage} sendMessage={sendMessage} />\n      </div>\n    </div>\n  );\n\n}\nexport default Chat\n","/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/TextContainer.jsx",[],"/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/Messages.jsx",[],"/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/Input.jsx",[],"/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/Message.jsx",[],"/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/InfoBar.jsx",[],"/Users/saadkureshi/lighthouse/final-project-bootcamp/final-project/src/components/PlayerMap.jsx",["137","138"],"import React, { useState, useEffect } from 'react'\nimport { GoogleMap, Marker, InfoWindow, LoadScript } from '@react-google-maps/api';\nimport Geocode from \"react-geocode\";\nimport useApplicationData from \"../hooks/useApplicationData\"\n\nlet center = {\n  lat: 43.644357428479296,\n  lng: -79.40218810875912\n};\n\nconst containerStyle = {\n  width: '600px',\n  height: '600px',\n};\n\nfunction Map() {\n\n  const [selected, setSelected] = useState({});\n  const { users, setUsers } = useApplicationData();\n  const [points, setPoints] = useState();\n\n  Geocode.setApiKey(process.env.REACT_APP_GOOGLE_API_KEY);\n\n  // Get geocode based on a city and country\n  async function getLocation(city, country) {\n    try {\n      let response = await Geocode.fromAddress(`${city}, ${country}`);\n      return (\n        {\n          lat: response.results[0].geometry.location.lat,\n          lng: response.results[0].geometry.location.lng\n        }\n      )\n    }\n    catch(err) {\n      console.log(\"Error fetching geodata:\", err);\n    }\n    return null;\n  }\n  \n  // get geocode of each user in the database \n  async function getLocations(users) {\n    let result = [];\n    for (let user of users) {\n      const res = await getLocation(`${user.city}, ${user.country}`);\n      const newUser = {\n        name: user.username,\n        city: user.city,\n        country: user.country,\n        wordsPerMin: user.words_per_min,\n        level: user.highest_level_cleared,\n        location: res,\n      }\n      result.push(newUser)\n    }\n    return result;\n  }\n  \n  useEffect(() => {\n    (async () => {\n      const stuff = await getLocations(users).then((res) => {return res})\n      setPoints(stuff);\n    })()\n  }, [users]);\n\n  const onSelect = item => {\n    setSelected(item);\n  }\n\n  return (\n    <LoadScript\n      googleMapsApiKey={process.env.REACT_APP_GOOGLE_API_KEY}\n    >\n      <GoogleMap\n        mapContainerStyle={containerStyle}\n        center={center}\n        zoom={3}\n      >\n        {\n          points && points.map(item => {\n            return (\n              <Marker key={item.name}\n                position={item.location}\n                onClick={() => onSelect(item)}\n              />\n            )\n          })\n        }\n        {\n          selected.location &&\n          (\n            <InfoWindow\n              position={selected.location}\n              clickable={true}\n              onCloseClick={() => setSelected({})}\n            >\n              <div>\n                <img src=\"./images/user.png\" alt=\"User Icon\"></img>\n                <p style={{ margin: \"0\" }}>@{selected.name}</p>\n                <p style={{ margin: \"0\" }}>{selected.city}, {selected.country}</p>\n                <p style={{ margin: \"0\" }}>Level: {selected.level}</p>\n                <p style={{ margin: \"0\" }}>WPM: {selected.wordsPerMin}</p>\n              </div>\n            </InfoWindow>\n          )\n        }\n        <></>\n      </GoogleMap>\n    </LoadScript >\n  )\n}\n\nexport default React.memo(Map)",{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","severity":1,"message":"144","line":1,"column":17,"nodeType":"145","messageId":"146","endLine":1,"endColumn":25},{"ruleId":"143","severity":1,"message":"147","line":3,"column":50,"nodeType":"145","messageId":"146","endLine":3,"endColumn":54},{"ruleId":"143","severity":1,"message":"148","line":20,"column":5,"nodeType":"145","messageId":"146","endLine":20,"endColumn":16},{"ruleId":"143","severity":1,"message":"149","line":21,"column":5,"nodeType":"145","messageId":"146","endLine":21,"endColumn":16},{"ruleId":"143","severity":1,"message":"150","line":22,"column":5,"nodeType":"145","messageId":"146","endLine":22,"endColumn":22},{"ruleId":"143","severity":1,"message":"151","line":23,"column":5,"nodeType":"145","messageId":"146","endLine":23,"endColumn":14},{"ruleId":"143","severity":1,"message":"152","line":24,"column":5,"nodeType":"145","messageId":"146","endLine":24,"endColumn":17},{"ruleId":"143","severity":1,"message":"153","line":9,"column":18,"nodeType":"145","messageId":"146","endLine":9,"endColumn":26},{"ruleId":"143","severity":1,"message":"154","line":11,"column":20,"nodeType":"145","messageId":"146","endLine":11,"endColumn":31},{"ruleId":"155","severity":1,"message":"156","line":41,"column":33,"nodeType":"157","messageId":"158","endLine":41,"endColumn":35},{"ruleId":"159","severity":1,"message":"160","line":44,"column":97,"nodeType":"161","endLine":44,"endColumn":119},{"ruleId":"159","severity":1,"message":"160","line":45,"column":92,"nodeType":"161","endLine":45,"endColumn":114},{"ruleId":"159","severity":1,"message":"160","line":46,"column":92,"nodeType":"161","endLine":46,"endColumn":114},{"ruleId":"159","severity":1,"message":"160","line":47,"column":92,"nodeType":"161","endLine":47,"endColumn":114},{"ruleId":"159","severity":1,"message":"160","line":48,"column":97,"nodeType":"161","endLine":48,"endColumn":119},{"ruleId":"159","severity":1,"message":"160","line":55,"column":99,"nodeType":"161","endLine":55,"endColumn":121},{"ruleId":"159","severity":1,"message":"160","line":56,"column":94,"nodeType":"161","endLine":56,"endColumn":116},{"ruleId":"159","severity":1,"message":"160","line":57,"column":94,"nodeType":"161","endLine":57,"endColumn":116},{"ruleId":"159","severity":1,"message":"160","line":58,"column":94,"nodeType":"161","endLine":58,"endColumn":116},{"ruleId":"159","severity":1,"message":"160","line":65,"column":101,"nodeType":"161","endLine":65,"endColumn":123},{"ruleId":"159","severity":1,"message":"160","line":66,"column":96,"nodeType":"161","endLine":66,"endColumn":118},{"ruleId":"159","severity":1,"message":"160","line":67,"column":96,"nodeType":"161","endLine":67,"endColumn":118},{"ruleId":"159","severity":1,"message":"160","line":74,"column":103,"nodeType":"161","endLine":74,"endColumn":125},{"ruleId":"159","severity":1,"message":"160","line":75,"column":98,"nodeType":"161","endLine":75,"endColumn":120},{"ruleId":"159","severity":1,"message":"160","line":82,"column":103,"nodeType":"161","endLine":82,"endColumn":125},{"ruleId":"159","severity":1,"message":"160","line":89,"column":95,"nodeType":"161","endLine":89,"endColumn":117},{"ruleId":"143","severity":1,"message":"144","line":1,"column":17,"nodeType":"145","messageId":"146","endLine":1,"endColumn":25},{"ruleId":"143","severity":1,"message":"162","line":2,"column":32,"nodeType":"145","messageId":"146","endLine":2,"endColumn":37},{"ruleId":"143","severity":1,"message":"163","line":2,"column":47,"nodeType":"145","messageId":"146","endLine":2,"endColumn":51},{"ruleId":"143","severity":1,"message":"164","line":8,"column":8,"nodeType":"145","messageId":"146","endLine":8,"endColumn":26},{"ruleId":"143","severity":1,"message":"165","line":14,"column":10,"nodeType":"145","messageId":"146","endLine":14,"endColumn":23},{"ruleId":"143","severity":1,"message":"166","line":11,"column":21,"nodeType":"145","messageId":"146","endLine":11,"endColumn":32},{"ruleId":"143","severity":1,"message":"167","line":11,"column":42,"nodeType":"145","messageId":"146","endLine":11,"endColumn":51},{"ruleId":"168","severity":1,"message":"169","line":168,"column":6,"nodeType":"170","endLine":168,"endColumn":20,"suggestions":"171"},{"ruleId":"168","severity":1,"message":"172","line":194,"column":6,"nodeType":"170","endLine":194,"endColumn":27,"suggestions":"173"},{"ruleId":"168","severity":1,"message":"174","line":221,"column":6,"nodeType":"170","endLine":221,"endColumn":28,"suggestions":"175"},{"ruleId":"143","severity":1,"message":"176","line":224,"column":9,"nodeType":"145","messageId":"146","endLine":224,"endColumn":21},{"ruleId":"143","severity":1,"message":"147","line":3,"column":27,"nodeType":"145","messageId":"146","endLine":3,"endColumn":31},{"ruleId":"143","severity":1,"message":"166","line":23,"column":21,"nodeType":"145","messageId":"146","endLine":23,"endColumn":32},{"ruleId":"143","severity":1,"message":"177","line":29,"column":10,"nodeType":"145","messageId":"146","endLine":29,"endColumn":18},{"ruleId":"143","severity":1,"message":"154","line":29,"column":20,"nodeType":"145","messageId":"146","endLine":29,"endColumn":31},{"ruleId":"168","severity":1,"message":"178","line":41,"column":31,"nodeType":"145","endLine":41,"endColumn":38},{"ruleId":"143","severity":1,"message":"179","line":6,"column":8,"nodeType":"145","messageId":"146","endLine":6,"endColumn":16},{"ruleId":"143","severity":1,"message":"180","line":8,"column":8,"nodeType":"145","messageId":"146","endLine":8,"endColumn":14},{"ruleId":"143","severity":1,"message":"153","line":19,"column":18,"nodeType":"145","messageId":"146","endLine":19,"endColumn":26},{"ruleId":"168","severity":1,"message":"181","line":64,"column":6,"nodeType":"170","endLine":64,"endColumn":13,"suggestions":"182"},"no-native-reassign",["183"],"no-negated-in-lhs",["184"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'setContents' is assigned a value but never used.","'gameConsole' is assigned a value but never used.","'updateGameConsole' is assigned a value but never used.","'userInput' is assigned a value but never used.","'setUserInput' is assigned a value but never used.","'setUsers' is assigned a value but never used.","'setSortType' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'Image' is defined but never used.","'Fade' is defined but never used.","'useApplicationData' is defined but never used.","'playGameSound' is assigned a value but never used.","'setAttempts' is assigned a value but never used.","'setLevels' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'giveMeRandomText', 'highestLevel', and 'intervalId'. Either include them or remove the dependency array.","ArrayExpression",["185"],"React Hook useEffect has missing dependencies: 'currentLevel', 'props.contents', 'totalAvgWpm', and 'typingIn'. Either include them or remove the dependency array.",["186"],"React Hook useEffect has missing dependencies: 'currentLevel', 'giveMeRandomText', 'seconds', 'text', and 'totalAvgWpm'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setLevelContent' needs the current value of 'currentLevel'.",["187"],"'handleChange' is assigned a value but never used.","'sortType' is assigned a value but never used.","React Hook useMemo does nothing when called with only one argument. Did you forget to pass an array of dependencies?","'ReactDOM' is defined but never used.","'moment' is defined but never used.","React Hook useEffect has a missing dependency: 'getLocations'. Either include it or remove the dependency array.",["188"],"no-global-assign","no-unsafe-negation",{"desc":"189","fix":"190"},{"desc":"191","fix":"192"},{"desc":"193","fix":"194"},{"desc":"195","fix":"196"},"Update the dependencies array to be: [currentLevel, giveMeRandomText, highestLevel, intervalId]",{"range":"197","text":"198"},"Update the dependencies array to be: [seconds, intervalId, props.contents, currentLevel, typingIn, totalAvgWpm]",{"range":"199","text":"200"},"Update the dependencies array to be: [typingIn, intervalId, text, giveMeRandomText, currentLevel, seconds, totalAvgWpm]",{"range":"201","text":"202"},"Update the dependencies array to be: [getLocations, users]",{"range":"203","text":"204"},[5581,5595],"[currentLevel, giveMeRandomText, highestLevel, intervalId]",[6489,6510],"[seconds, intervalId, props.contents, currentLevel, typingIn, totalAvgWpm]",[7424,7446],"[typingIn, intervalId, text, giveMeRandomText, currentLevel, seconds, totalAvgWpm]",[1668,1675],"[getLocations, users]"]