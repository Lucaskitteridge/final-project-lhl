[{"/Users/lucas/lighthouse/final-project-lhl/final-project/src/index.js":"1","/Users/lucas/lighthouse/final-project-lhl/final-project/src/App.js":"2","/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/Register.jsx":"3","/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/Footer.jsx":"4","/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/Login.jsx":"5","/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/Leaderboard.jsx":"6","/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/Profile.jsx":"7","/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/WelcomePage.jsx":"8","/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/GameConsole.jsx":"9","/Users/lucas/lighthouse/final-project-lhl/final-project/src/hooks/useApplicationData.js":"10","/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/GameCompleteMsg.jsx":"11","/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/NavbarTC.jsx":"12"},{"size":219,"mtime":1613241334563,"results":"13","hashOfConfig":"14"},{"size":1263,"mtime":1613500062232,"results":"15","hashOfConfig":"14"},{"size":5276,"mtime":1613486934771,"results":"16","hashOfConfig":"14"},{"size":1127,"mtime":1613398916150,"results":"17","hashOfConfig":"14"},{"size":2196,"mtime":1613500062235,"results":"18","hashOfConfig":"14"},{"size":4252,"mtime":1613439536335,"results":"19","hashOfConfig":"14"},{"size":2240,"mtime":1613439536337,"results":"20","hashOfConfig":"14"},{"size":1511,"mtime":1613499742203,"results":"21","hashOfConfig":"14"},{"size":5303,"mtime":1613499742198,"results":"22","hashOfConfig":"14"},{"size":1338,"mtime":1613500062253,"results":"23","hashOfConfig":"14"},{"size":458,"mtime":1613431638491,"results":"24","hashOfConfig":"14"},{"size":3067,"mtime":1613500062251,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"72v973",{"filePath":"29","messages":"30","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/lucas/lighthouse/final-project-lhl/final-project/src/index.js",[],["55","56"],"/Users/lucas/lighthouse/final-project-lhl/final-project/src/App.js",["57","58","59","60","61","62","63"],"/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/Register.jsx",["64"],"import React from 'react'\nimport { useState } from 'react'\nimport axios from 'axios'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport Col from 'react-bootstrap/Col'\nimport \"./Register.css\"\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport useApplicationData from '../hooks/useApplicationData';\n\nfunction Register() {\n\n  const [newUserDetails, setNewUserDetails] = useState({\n    username: \"\",\n    first_name: \"\",\n    last_name: \"\",\n    email: \"\",\n    password: \"\",\n    avatar: \"\",\n    city: \"\",\n    country: \"\"\n  });\n\n  // const registerUser = () => {\n  //   axios.post('http://localhost:3004/api/users', {\n  //     username: newUserDetails.username,\n  //     first_name: newUserDetails.first_name,\n  //     last_name: newUserDetails.last_name,\n  //     email: newUserDetails.email,\n  //     password: newUserDetails.password,\n  //     avatar: newUserDetails.avatar,\n  //     city: newUserDetails.city,\n  //     country: newUserDetails.country\n  //   })\n  //     .then(res => {\n  //       console.log(res);\n  //     })\n  // }\n\n  const registerUser = () => {\n    axios.post('/register', {\n      username: newUserDetails.username,\n      first_name: newUserDetails.first_name,\n      last_name: newUserDetails.last_name,\n      email: newUserDetails.email,\n      password: newUserDetails.password,\n      avatar: newUserDetails.avatar,\n      city: newUserDetails.city,\n      country: newUserDetails.country\n    })\n      .then(res => {\n        console.log(res);\n      })\n  }\n\n  return (\n    <div className=\"register\">\n      <Form>\n        <Form.Row>\n          <Form.Group as={Col} controlId=\"formGridFirstName\">\n            <Form.Label>First Name</Form.Label>\n            <Form.Control \n              type=\"firstname\" \n              placeholder=\"Enter First Name\"\n              onChange={e => {\n                setNewUserDetails({\n                  ...newUserDetails,\n                  first_name: e.target.value\n                })\n              }} \n              />\n          </Form.Group>\n\n          <Form.Group as={Col} controlId=\"formGridPassword\">\n            <Form.Label>Last Name</Form.Label>\n            <Form.Control \n              type=\"lastname\" \n              placeholder=\"Enter Last Name\"\n              onChange={e => {\n                setNewUserDetails({\n                  ...newUserDetails,\n                  last_name: e.target.value\n                })\n              }} \n            />\n          </Form.Group>\n        </Form.Row>\n\n        <Form.Row>\n        <Form.Group as={Col} controlId=\"formBasicUsername\">\n          <Form.Label>Username</Form.Label>\n          <Form.Control \n            type=\"Username\" \n            placeholder=\"Enter Username\" \n            onChange={e => {\n              setNewUserDetails({\n                ...newUserDetails,\n                username: e.target.value\n              })\n            }}\n            />\n        </Form.Group>\n\n        <Form.Group as={Col} controlId=\"formBasicEmail\">\n          <Form.Label>Email address</Form.Label>\n          <Form.Control \n            type=\"email\" \n            placeholder=\"Enter Email\" \n            onChange={e => {\n              setNewUserDetails({\n                ...newUserDetails,\n                email: e.target.value\n              })\n            }}\n            />\n        </Form.Group>\n        </Form.Row>\n\n        <Form.Row>\n        <Form.Group as={Col} controlId=\"formBasicPassword\">\n          <Form.Label>Password</Form.Label>\n          <Form.Control \n            type=\"password\" \n            placeholder=\"Password\" \n            onChange={e => {\n              setNewUserDetails({\n                ...newUserDetails,\n                password: e.target.value\n              })\n            }}\n            />\n          <Form.Text id=\"passwordHelpBlock\" muted>\n            Your password must be 8-20 characters long.\n          </Form.Text>\n        </Form.Group>\n\n        <Form.Group as={Col} controlId=\"formBasicConfirmPassword\">\n          <Form.Label>Confirm Password</Form.Label>\n          <Form.Control type=\"password\" placeholder=\"Confirm Password\" />\n        </Form.Group>\n        </Form.Row>\n\n        <Form.Row>\n        <Form.Group as={Col} controlId=\"formBasicCity\">\n          <Form.Label>City</Form.Label>\n          <Form.Control \n            type=\"City\" \n            placeholder=\"Enter City\" \n            onChange={e => {\n              setNewUserDetails({\n                ...newUserDetails,\n                city: e.target.value\n              })\n            }}\n            />\n        </Form.Group>\n\n        <Form.Group as={Col} controlId=\"formBasicCountry\">\n          <Form.Label>Country</Form.Label>\n          <Form.Control \n            type=\"Country\" \n            placeholder=\"Enter Country\" \n            onChange={e => {\n              setNewUserDetails({\n                ...newUserDetails,\n                country: e.target.value\n              })\n            }}\n            />\n        </Form.Group>\n        </Form.Row>\n\n        <Form.Group>\n          <Form.File id=\"exampleFormControlFile1\" label=\"Avatar\" />\n        </Form.Group>\n\n        <Button \n          variant=\"primary\" \n          type=\"submit\"\n          onClick = {registerUser}\n          >\n          Submit\n        </Button>\n      </Form>\n    </div>\n  )\n}\n\nexport default Register","/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/Footer.jsx",[],"/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/Login.jsx",["65"],"/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/Leaderboard.jsx",["66","67","68"],"import React, { useState, useEffect, useMemo } from 'react'\nimport {Container, Table} from 'react-bootstrap';\nimport useApplicationData from \"../hooks/useApplicationData\"\nimport \"./Leaderboard.css\"\n\nfunction Leaderboard(props) {\n  \n  const { users, setUsers } = useApplicationData()\n\n  const [sortType, setSortType] = useState('levels');\n\n  const sortedUsers = useMemo(() => {\n    const sortArray = type => {\n      const types = {\n        wordsPerMin: 'words_per_min',\n        levels: 'highest_level_cleared',\n      };\n      const sortProperty = types[type];\n      const secondarySortProperty = types[type === 'levels' ? 'wordsPerMin' : 'levels']\n      const sorted = [...users].sort((a, b) => {\n        const initialDiff = b[sortProperty] - a[sortProperty]\n        if (initialDiff === 0) {\n          return b[secondarySortProperty] - a[secondarySortProperty]\n        } else {\n          return initialDiff;\n        }\n      });\n      return sorted;\n    };\n    return sortArray(sortType)\n  }, [users, sortType])\n\n\n\n  return (\n    <div className=\"leaderboard\">\n      <Container className=\"leadercontainer\">\n      <Table striped bordered hover variant=\"dark\">\n        <thead>\n          <tr>\n            <th colSpan=\"4\" classname=\"align-me\">Leaderboard</th>\n          </tr>\n          <tr>\n            <th>Ranking</th>\n            <th>Username</th>\n            <th>Highest Level</th>\n            <th>Words Per Minute</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>1st</td>\n            <td>{sortedUsers[0] && sortedUsers[0].username}</td>\n            <td>{sortedUsers[0] && sortedUsers[0].highest_level_cleared}</td>\n            <td>{sortedUsers[0] && sortedUsers[0].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>2nd</td>\n            <td>{sortedUsers[1] && sortedUsers[1].username}</td>\n            <td>{sortedUsers[1] && sortedUsers[1].highest_level_cleared}</td>\n            <td>{sortedUsers[1] && sortedUsers[1].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>3rd</td>\n            <td>{sortedUsers[2] && sortedUsers[2].username}</td>\n            <td>{sortedUsers[2] && sortedUsers[2].highest_level_cleared}</td>\n            <td>{sortedUsers[2] && sortedUsers[2].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>4th</td>\n            <td>{sortedUsers[3] && sortedUsers[3].username}</td>\n            <td>{sortedUsers[3] && sortedUsers[3].highest_level_cleared}</td>\n            <td>{sortedUsers[3] && sortedUsers[3].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>5th</td>\n            <td>{sortedUsers[4] && sortedUsers[4].username}</td>\n            <td>{sortedUsers[4] && sortedUsers[4].highest_level_cleared}</td>\n            <td>{sortedUsers[4] && sortedUsers[4].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>6th</td>\n            <td>{sortedUsers[5] && sortedUsers[5].username}</td>\n            <td>{sortedUsers[5] && sortedUsers[5].highest_level_cleared}</td>\n            <td>{sortedUsers[5] && sortedUsers[5].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>7th</td>\n            <td>{sortedUsers[6] && sortedUsers[6].username}</td>\n            <td>{sortedUsers[6] && sortedUsers[6].highest_level_cleared}</td>\n            <td>{sortedUsers[6] && sortedUsers[6].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>8th</td>\n            <td>{sortedUsers[7] && sortedUsers[7].username}</td>\n            <td>{sortedUsers[7] && sortedUsers[7].highest_level_cleared}</td>\n            <td>{sortedUsers[7] && sortedUsers[7].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>9th</td>\n            <td>{sortedUsers[8] && sortedUsers[8].username}</td>\n            <td>{sortedUsers[8] && sortedUsers[8].highest_level_cleared}</td>\n            <td>{sortedUsers[8] && sortedUsers[8].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>10th</td>\n            <td>{sortedUsers[9] && sortedUsers[9].username}</td>\n            <td>{sortedUsers[9] && sortedUsers[9].highest_level_cleared}</td>\n            <td>{sortedUsers[9] && sortedUsers[9].words_per_min}</td>\n          </tr>\n        </tbody>\n      </Table>\n      </Container>\n    </div>\n  )\n}\n\nexport default Leaderboard\n","/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/Profile.jsx",["69"],"import React from 'react';\nimport { Container, Row, Col, Image, Card, Button, ProgressBar } from 'react-bootstrap';\nimport \"./Profile.css\"\n\nfunction Profile() {\n  return (\n    <div className=\"profile\">\n      <Container>\n        <Row>\n          <Col>\n            <Card border=\"secondary\" style={{ width: '18rem' }}>\n              <Card.Img variant=\"top\" src=\"images/sample-avatar.jpg\" className=\"avatar\" />\n              <Card.Body>\n                <Card.Title>Bobby Bob</Card.Title>\n                <Card.Subtitle className=\"mb-2 text-muted\">bobthebuilder99</Card.Subtitle>\n                <ProgressBar animated now={70} label=\"70%\" />\n                {/* <Card.Text><i class=\"fas fa-certificate\"></i> Veteran</Card.Text> */}\n                <Card.Text>\n                  <br/>\n                  <Card.Img variant=\"top\" src=\"images/medal-icon.png\" className= \"medal-icon\" />\n                  Veteran\n                </Card.Text>\n                <Card.Text>Highest Level Completed: 4</Card.Text>\n                <Card.Text>Average WPM: 97</Card.Text>\n                <Button variant=\"primary\" href=\"/leaderboard\">Global Leaderboard</Button>\n              </Card.Body>\n            </Card>\n          </Col>\n          <Col>\n            <Row>\n              <Card style={{ width: '45rem' }} >\n                <Card.Header as=\"h5\">Edit Profile</Card.Header>\n                <Card.Body>\n                  <Card.Title>Special title treatment</Card.Title>\n                  <Card.Text>Change username</Card.Text>\n                  <Card.Text>Change location</Card.Text>\n                  <Button variant=\"primary\">Go somewhere</Button>\n                </Card.Body>\n              </Card>\n            </Row>\n            <br/>\n            <br/>\n            <Row>\n              <Card style={{ width: '45rem' }} >\n                <Card.Header as=\"h5\">Security</Card.Header>\n                <Card.Body>\n                  <Card.Title>Special title treatment</Card.Title>\n                  <Card.Text>Change password</Card.Text>\n                  <Button variant=\"primary\">Go somewhere</Button>\n                </Card.Body>\n              </Card>\n            </Row>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  )\n}\n\nexport default Profile\n","/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/WelcomePage.jsx",[],"/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/GameConsole.jsx",["70","71","72","73"],"import React, { useState, setState, useEffect } from 'react';\nimport \"./GameConsole.css\"\nimport axios from \"axios\";\nimport { Jumbotron, Button, ProgressBar, Spinner, InputGroup, FormControl, Card } from 'react-bootstrap';\nimport GameCompleteMsg from './GameCompleteMsg';\nimport useApplicationData from \"../hooks/useApplicationData\"\n\nfunction GameConsole(props) {\n\n  const [seconds, setSeconds] = useState(30);\n  const [typingIn, setTypingIn] = useState(\"\");\n  const [currentLevel, setCurrentLevel] = useState(0);\n  const [intervalId, setIntervalId] = useState(null)\n\n  const Timer = function (seconds){\n    setSeconds(seconds)\n    if (seconds > 0) {\n      setIntervalId(setInterval(() => setSeconds((s) => s-1), 1000))\n    } else {\n      setSeconds(\"Game Over\");\n    }\n  }\n\n  const totalWordsCorrect = function(inputField, currentLevelContent) {\n    const typedIn = inputField.split(' ')\n    const matchingwords = []\n    for (let i = 0; i < typedIn.length; i++) {\n      if(typedIn[i] === currentLevelContent[i])\n      matchingwords.push(typedIn[i])\n      }\n    return matchingwords.length\n  }\n  \n  const resetLevel = function () {\n    clearInterval(intervalId)\n    setCurrentLevel(0);\n    Timer(30)\n  }\n\n  useEffect(() => {\n    if(seconds === 0){\n      setSeconds(\"Game Over\")\n      let currentLevelWords = props.contents[currentLevel].content.split(' ')\n      let totalOfCorrectWords = totalWordsCorrect(typingIn, currentLevelWords)\n      clearInterval(intervalId)\n      axios.post('http://localhost:3004/api/attempts', {\n        user_id: \"\",\n        level_id: currentLevel + 1,\n        words_completed: totalOfCorrectWords,\n        time_taken: 30,\n        passed: false\n    })\n    .catch(error => (console.log(error)))\n    }\n  },[seconds, intervalId]);\n\n  const startGame = function() {\n    if(currentLevel === 0){\n      clearInterval(intervalId)\n      setCurrentLevel(0);\n      Timer(30)\n    } else {\n      clearInterval(intervalId)\n      Timer(30)\n    }\n  }\n\n  //Post request to attempts if both the text areas are the same\n  useEffect(() => {\n    if(typingIn === props.contents[currentLevel]?.content && typingIn !== \"\") {\n      let correctWords = props.contents[currentLevel].content.split(' ').length;\n      let secondsLeft = 30 - seconds;\n      clearInterval(intervalId);\n      setCurrentLevel(currentLevel + 1);\n      setSeconds(30)\n      setTypingIn(\"\");\n      axios.post('http://localhost:3004/api/attempts', {\n        user_id: \"\",\n        level_id: currentLevel + 1,\n        words_completed: correctWords,\n        time_taken: secondsLeft,\n        passed: true\n    })\n      .then(res => {\n        console.log(res);\n      })\n      .catch(error => (console.log(error)))\n    }\n  }, [typingIn, intervalId]) \n\n  return (\n    <div className=\"gameconsole\">\n      <Jumbotron>\n        <h1>TypeCraft</h1>\n        <>\n          <Spinner animation=\"border\" variant=\"primary\" />\n          <Spinner animation=\"border\" variant=\"secondary\" />\n          <Spinner animation=\"border\" variant=\"success\" />\n          <Spinner animation=\"border\" variant=\"danger\" />\n          <Spinner animation=\"border\" variant=\"warning\" />\n          <Spinner animation=\"border\" variant=\"info\" />\n          <Spinner animation=\"border\" variant=\"light\" />\n          <Spinner animation=\"border\" variant=\"dark\" />\n          <Spinner animation=\"grow\" variant=\"primary\" />\n          <Spinner animation=\"grow\" variant=\"secondary\" />\n          <Spinner animation=\"grow\" variant=\"success\" />\n          <Spinner animation=\"grow\" variant=\"danger\" />\n          <Spinner animation=\"grow\" variant=\"warning\" />\n          <Spinner animation=\"grow\" variant=\"info\" />\n          <Spinner animation=\"grow\" variant=\"light\" />\n          <Spinner animation=\"grow\" variant=\"dark\" />\n        </>\n        <br /><br /><br />\n        <ProgressBar aria-valuemin=\"0\" aria-valuemax=\"100\" animated now={props.contents[currentLevel]? (typingIn.length/props.contents[currentLevel].content.length) * 100 : 1} variant=\"success\" />\n        <br />\n        <Card>\n          <Card.Header>{seconds}</Card.Header>\n          <Card.Body>\n            <blockquote className=\"blockquote mb-0\">\n              <div>\n                {props.contents[currentLevel]?.content || <GameCompleteMsg />}\n              </div>\n            </blockquote>\n          </Card.Body>\n        </Card>\n        <br />\n        <InputGroup>\n          <InputGroup.Prepend>\n            <InputGroup.Text id=\"textarea\">TYPE HERE:</InputGroup.Text>\n          </InputGroup.Prepend>\n          <FormControl as=\"textarea\" \n            onChange={(event) => setTypingIn(event.target.value)}\n            value={typingIn}\n            id=\"textarea\"\n            aria-label=\"With textarea\" \n            />\n        </InputGroup>\n        <br />\n        <p>\n          {seconds === 30 ? \n            <Button variant=\"primary\">\n              Resume from Level X\n            </Button> : null || \n            <Button variant=\"primary\" onClick={resetLevel}>\n            Restart Level \n            </Button>}\n          {seconds === 30 ? \n            <Button\n              variant=\"primary\"\n              onClick={startGame}\n            >\n            {currentLevel === 0 ? `Start Game ` : `Start Level ${currentLevel+1}!`}\n            </Button> : null}\n        </p>\n      </Jumbotron>\n    </div>\n  )\n}\n\nexport default GameConsole\n","/Users/lucas/lighthouse/final-project-lhl/final-project/src/hooks/useApplicationData.js",[],"/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/GameCompleteMsg.jsx",[],"/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/NavbarTC.jsx",["74"],{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":1,"column":17,"nodeType":"81","messageId":"82","endLine":1,"endColumn":25},{"ruleId":"79","severity":1,"message":"83","line":3,"column":50,"nodeType":"81","messageId":"82","endLine":3,"endColumn":54},{"ruleId":"79","severity":1,"message":"84","line":20,"column":5,"nodeType":"81","messageId":"82","endLine":20,"endColumn":16},{"ruleId":"79","severity":1,"message":"85","line":21,"column":5,"nodeType":"81","messageId":"82","endLine":21,"endColumn":16},{"ruleId":"79","severity":1,"message":"86","line":22,"column":5,"nodeType":"81","messageId":"82","endLine":22,"endColumn":22},{"ruleId":"79","severity":1,"message":"87","line":23,"column":5,"nodeType":"81","messageId":"82","endLine":23,"endColumn":14},{"ruleId":"79","severity":1,"message":"88","line":24,"column":5,"nodeType":"81","messageId":"82","endLine":24,"endColumn":17},{"ruleId":"79","severity":1,"message":"89","line":10,"column":8,"nodeType":"81","messageId":"82","endLine":10,"endColumn":26},{"ruleId":"79","severity":1,"message":"89","line":4,"column":8,"nodeType":"81","messageId":"82","endLine":4,"endColumn":26},{"ruleId":"79","severity":1,"message":"90","line":1,"column":27,"nodeType":"81","messageId":"82","endLine":1,"endColumn":36},{"ruleId":"79","severity":1,"message":"91","line":8,"column":18,"nodeType":"81","messageId":"82","endLine":8,"endColumn":26},{"ruleId":"79","severity":1,"message":"92","line":10,"column":20,"nodeType":"81","messageId":"82","endLine":10,"endColumn":31},{"ruleId":"79","severity":1,"message":"93","line":2,"column":31,"nodeType":"81","messageId":"82","endLine":2,"endColumn":36},{"ruleId":"79","severity":1,"message":"94","line":1,"column":27,"nodeType":"81","messageId":"82","endLine":1,"endColumn":35},{"ruleId":"79","severity":1,"message":"89","line":6,"column":8,"nodeType":"81","messageId":"82","endLine":6,"endColumn":26},{"ruleId":"95","severity":1,"message":"96","line":55,"column":5,"nodeType":"97","endLine":55,"endColumn":26,"suggestions":"98"},{"ruleId":"95","severity":1,"message":"99","line":89,"column":6,"nodeType":"97","endLine":89,"endColumn":28,"suggestions":"100"},{"ruleId":"79","severity":1,"message":"101","line":18,"column":10,"nodeType":"81","messageId":"82","endLine":18,"endColumn":18},"no-native-reassign",["102"],"no-negated-in-lhs",["103"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'setContents' is assigned a value but never used.","'gameConsole' is assigned a value but never used.","'updateGameConsole' is assigned a value but never used.","'userInput' is assigned a value but never used.","'setUserInput' is assigned a value but never used.","'useApplicationData' is defined but never used.","'useEffect' is defined but never used.","'setUsers' is assigned a value but never used.","'setSortType' is assigned a value but never used.","'Image' is defined but never used.","'setState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'currentLevel', 'props.contents', and 'typingIn'. Either include them or remove the dependency array.","ArrayExpression",["104"],"React Hook useEffect has missing dependencies: 'currentLevel', 'props.contents', and 'seconds'. Either include them or remove the dependency array. You can also do a functional update 'setCurrentLevel(c => ...)' if you only need 'currentLevel' in the 'setCurrentLevel' call.",["105"],"'username' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"106","fix":"107"},{"desc":"108","fix":"109"},"Update the dependencies array to be: [seconds, intervalId, props.contents, currentLevel, typingIn]",{"range":"110","text":"111"},"Update the dependencies array to be: [typingIn, intervalId, props.contents, currentLevel, seconds]",{"range":"112","text":"113"},[1731,1752],"[seconds, intervalId, props.contents, currentLevel, typingIn]",[2690,2712],"[typingIn, intervalId, props.contents, currentLevel, seconds]"]