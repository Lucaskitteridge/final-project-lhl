[{"/home/robert/lighthouse/final-project/final-project/src/index.js":"1","/home/robert/lighthouse/final-project/final-project/src/App.js":"2","/home/robert/lighthouse/final-project/final-project/src/components/Footer.jsx":"3","/home/robert/lighthouse/final-project/final-project/src/components/Leaderboard.jsx":"4","/home/robert/lighthouse/final-project/final-project/src/components/Profile.jsx":"5","/home/robert/lighthouse/final-project/final-project/src/components/GameConsole.jsx":"6","/home/robert/lighthouse/final-project/final-project/src/components/NavbarTC.jsx":"7","/home/robert/lighthouse/final-project/final-project/src/components/WelcomePage.jsx":"8","/home/robert/lighthouse/final-project/final-project/src/hooks/useApplicationData.js":"9","/home/robert/lighthouse/final-project/final-project/src/components/Attempts.jsx":"10","/home/robert/lighthouse/final-project/final-project/src/components/Register.jsx":"11","/home/robert/lighthouse/final-project/final-project/src/components/Login.jsx":"12","/home/robert/lighthouse/final-project/final-project/src/components/PlayerMap.jsx":"13","/home/robert/lighthouse/final-project/final-project/src/components/GameCompleteMsg.jsx":"14","/home/robert/lighthouse/final-project/final-project/src/components/Chat.jsx":"15","/home/robert/lighthouse/final-project/final-project/src/components/TextContainer.jsx":"16","/home/robert/lighthouse/final-project/final-project/src/components/Messages.jsx":"17","/home/robert/lighthouse/final-project/final-project/src/components/InfoBar.jsx":"18","/home/robert/lighthouse/final-project/final-project/src/components/Input.jsx":"19","/home/robert/lighthouse/final-project/final-project/src/components/Message.jsx":"20"},{"size":219,"mtime":1613964776244,"results":"21","hashOfConfig":"22"},{"size":1700,"mtime":1614011482873,"results":"23","hashOfConfig":"22"},{"size":1411,"mtime":1614012256929,"results":"24","hashOfConfig":"22"},{"size":4718,"mtime":1614011482873,"results":"25","hashOfConfig":"22"},{"size":7054,"mtime":1613964776244,"results":"26","hashOfConfig":"22"},{"size":10559,"mtime":1613966163770,"results":"27","hashOfConfig":"22"},{"size":4514,"mtime":1614011482873,"results":"28","hashOfConfig":"22"},{"size":3438,"mtime":1613964776244,"results":"29","hashOfConfig":"22"},{"size":1374,"mtime":1613964776244,"results":"30","hashOfConfig":"22"},{"size":6287,"mtime":1614011482873,"results":"31","hashOfConfig":"22"},{"size":10285,"mtime":1613967446645,"results":"32","hashOfConfig":"22"},{"size":2459,"mtime":1613964776244,"results":"33","hashOfConfig":"22"},{"size":3766,"mtime":1613964776244,"results":"34","hashOfConfig":"22"},{"size":439,"mtime":1613964776244,"results":"35","hashOfConfig":"22"},{"size":1628,"mtime":1613964776244,"results":"36","hashOfConfig":"22"},{"size":643,"mtime":1613964776244,"results":"37","hashOfConfig":"22"},{"size":419,"mtime":1613964776244,"results":"38","hashOfConfig":"22"},{"size":340,"mtime":1613964776244,"results":"39","hashOfConfig":"22"},{"size":533,"mtime":1613964776244,"results":"40","hashOfConfig":"22"},{"size":983,"mtime":1613964776244,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1h298mw",{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"44"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"44"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"44"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"/home/robert/lighthouse/final-project/final-project/src/index.js",[],["91","92"],"/home/robert/lighthouse/final-project/final-project/src/App.js",["93","94"],"import React, { useState } from 'react';\nimport useApplicationData from \"./hooks/useApplicationData\"\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\n// Import Components\nimport Footer from \"./components/Footer.jsx\";\nimport Leaderboard from \"./components/Leaderboard.jsx\";\nimport Profile from \"./components/Profile.jsx\";\nimport Welcomepage from \"./components/WelcomePage.jsx\";\nimport GameConsole from \"./components/GameConsole.jsx\";\nimport NavbarTC from \"./components/NavbarTC.jsx\";\n\n// Import stylesheets\nimport './App.css';\n\nexport default function App() {\n\n  const currentUser = (localStorage.getItem(\"user_details\") && JSON.parse(localStorage.getItem(\"user_details\"))?.id)\n\n  const {\n    contents,\n  } = useApplicationData();\n\n  return (\n    <Router>\n      <div className=\"app\">\n        <NavbarTC />\n        <Switch>\n          {currentUser ?\n            <Route path=\"/leaderboard\">\n              <Leaderboard />\n            </Route>\n            :\n            <Route path=\"/\">\n              <Welcomepage />\n            </Route>\n          }\n          {currentUser ?\n            <Route path=\"/profile\">\n              <Profile />\n            </Route>\n            :\n            <Route path=\"/\">\n              <Welcomepage />\n            </Route>\n          }\n          {currentUser ?\n            <Route path=\"/play\">\n              <GameConsole\n                contents={contents}\n              />\n            </Route>\n            :\n            <Route path=\"/\">\n              <Welcomepage />\n            </Route>\n          }\n          <Route path=\"/\">\n            <Welcomepage />\n          </Route>\n        </Switch>\n        <Footer />\n      </div>\n    </Router>\n  );\n}\n","/home/robert/lighthouse/final-project/final-project/src/components/Footer.jsx",[],"/home/robert/lighthouse/final-project/final-project/src/components/Leaderboard.jsx",["95","96"],"import React, { useState, useMemo } from 'react'\nimport { Container, Table } from 'react-bootstrap';\nimport useApplicationData from \"../hooks/useApplicationData\"\nimport Map from \"./PlayerMap\";\nimport \"./Leaderboard.css\"\n\nexport default function Leaderboard() {\n\n  const { users, setUsers } = useApplicationData()\n  const [sortType, setSortType] = useState('levels');\n\n  const sortedUsers = useMemo(() => {\n    const sortArray = type => {\n      const types = {\n        wordsPerMin: 'words_per_min',\n        levels: 'highest_level_cleared',\n      };\n      const sortProperty = types[type];\n      const secondarySortProperty = types[type === 'levels' ? 'wordsPerMin' : 'levels']\n      const sorted = [...users].sort((a, b) => {\n        const initialDiff = b[sortProperty] - a[sortProperty]\n        if (initialDiff === 0) {\n          return b[secondarySortProperty] - a[secondarySortProperty]\n        } else {\n          return initialDiff;\n        }\n      });\n      return sorted;\n    };\n    return sortArray(sortType)\n  }, [users, sortType])\n\n  return (\n    <div className=\"leaderboard\">\n      <Container className=\"leadercontainer\">\n        <Table  bordered >\n          <thead>\n            <tr className=\"firstrow\">\n              <th colSpan=\"4\" className=\"align-me\">Leaderboard</th>\n            </tr>\n            <tr className=\"secondrow\">\n              <th>Ranking</th>\n              <th>Username</th>\n              <th>Highest Level</th>\n              <th>Words Per Minute</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr className=\"firstrow\">\n              <td>1st</td>\n              <td>@{sortedUsers[0] && sortedUsers[0].username}</td>\n              <td>{sortedUsers[0] && sortedUsers[0].highest_level_cleared}</td>\n              <td>{sortedUsers[0] && sortedUsers[0].words_per_min}</td>\n            </tr>\n            <tr className=\"secondrow\">\n              <td >2nd</td>\n              <td>@{sortedUsers[1] && sortedUsers[1].username}</td>\n              <td>{sortedUsers[1] && sortedUsers[1].highest_level_cleared}</td>\n              <td>{sortedUsers[1] && sortedUsers[1].words_per_min}</td>\n            </tr>\n            <tr className=\"firstrow\">\n              <td>3rd</td>\n              <td>@{sortedUsers[2] && sortedUsers[2].username}</td>\n              <td>{sortedUsers[2] && sortedUsers[2].highest_level_cleared}</td>\n              <td>{sortedUsers[2] && sortedUsers[2].words_per_min}</td>\n            </tr>\n            <tr className=\"secondrow\">\n              <td>4th</td>\n              <td>@{sortedUsers[3] && sortedUsers[3].username}</td>\n              <td>{sortedUsers[3] && sortedUsers[3].highest_level_cleared}</td>\n              <td>{sortedUsers[3] && sortedUsers[3].words_per_min}</td>\n            </tr>\n            <tr className=\"firstrow\">\n              <td>5th</td>\n              <td>@{sortedUsers[4] && sortedUsers[4].username}</td>\n              <td>{sortedUsers[4] && sortedUsers[4].highest_level_cleared}</td>\n              <td>{sortedUsers[4] && sortedUsers[4].words_per_min}</td>\n            </tr>\n            <tr className=\"secondrow\">\n              <td>6th</td>\n              <td>@{sortedUsers[5] && sortedUsers[5].username}</td>\n              <td>{sortedUsers[5] && sortedUsers[5].highest_level_cleared}</td>\n              <td>{sortedUsers[5] && sortedUsers[5].words_per_min}</td>\n            </tr>\n            <tr className=\"firstrow\">\n              <td>7th</td>\n              <td>@{sortedUsers[6] && sortedUsers[6].username}</td>\n              <td>{sortedUsers[6] && sortedUsers[6].highest_level_cleared}</td>\n              <td>{sortedUsers[6] && sortedUsers[6].words_per_min}</td>\n            </tr>\n            <tr className=\"secondrow\">\n              <td>8th</td>\n              <td>@{sortedUsers[7] && sortedUsers[7].username}</td>\n              <td>{sortedUsers[7] && sortedUsers[7].highest_level_cleared}</td>\n              <td>{sortedUsers[7] && sortedUsers[7].words_per_min}</td>\n            </tr>\n            <tr className=\"firstrow\">\n              <td>9th</td>\n              <td>@{sortedUsers[8] && sortedUsers[8].username}</td>\n              <td>{sortedUsers[8] && sortedUsers[8].highest_level_cleared}</td>\n              <td>{sortedUsers[8] && sortedUsers[8].words_per_min}</td>\n            </tr>\n            <tr className=\"secondrow\">\n              <td>10th</td>\n              <td>@{sortedUsers[9] && sortedUsers[9].username}</td>\n              <td>{sortedUsers[9] && sortedUsers[9].highest_level_cleared}</td>\n              <td>{sortedUsers[9] && sortedUsers[9].words_per_min}</td>\n            </tr>\n          </tbody>\n        </Table>\n      </Container>\n      <Container className=\"googleMap\">\n        <Map />\n      </Container>\n    </div>\n  )\n};","/home/robert/lighthouse/final-project/final-project/src/components/Profile.jsx",["97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113"],"import React, { useState, useEffect } from 'react';\nimport { Container, Row, Col, Card, Button, ProgressBar } from 'react-bootstrap';\nimport Attempts from \"./Attempts\";\nimport \"./Profile.css\";\nimport axios from \"axios\";\n\nexport default function Profile() {\n\n  const [wpm, setWpm] = useState(0);\n  const [highest, setHighest] = useState(0);\n\n  useEffect(() => {\n    axios.get(\"http://localhost:3004/api/users\", {\n    })\n      .then(res => {\n        for (let user of res.data['users']) {\n          if (user.id === JSON.parse(localStorage.getItem(\"user_details\")).id) {\n            setWpm(user.words_per_min)\n            setHighest(user.highest_level_cleared)\n          }\n        }\n      })\n  })\n\n  const roundTo = require('round-to');\n\n  const userGameStatus = (((localStorage.getItem(\"user_details\") && JSON.parse(localStorage.getItem(\"user_details\")).highest_level_cleared) / 12) * 100)\n\n  const userAvatar = (localStorage.getItem(\"user_details\") && JSON.parse(localStorage.getItem(\"user_details\")).avatar)\n\n  return (\n    <div className=\"profile\">\n      <Container>\n        <Row>\n          <Col>\n            <Card border=\"secondary\" style={{ width: '18rem' }}>\n              {userAvatar === \"Dinosaur\" ?\n                <Card.Img variant=\"top\" src=\"images/dinosaur.png\" className=\"avatar\" />\n                : userAvatar === \"Ghost\" ?\n                  <Card.Img variant=\"top\" src=\"images/ghost.png\" className=\"avatar\" />\n                  : userAvatar === \"Monster\" ?\n                    <Card.Img variant=\"top\" src=\"images/monster.png\" className=\"avatar\" />\n                    : userAvatar === \"Unicorn\" ?\n                      <Card.Img variant=\"top\" src=\"images/unicorn.png\" className=\"avatar\" />\n                      : userAvatar === \"Fox\" ?\n                        <Card.Img variant=\"top\" src=\"images/fox.png\" className=\"avatar\" />\n                        :\n                        <Card.Img variant=\"top\" src=\"images/sample-avatar.jpg\" className=\"avatar\" />\n              }\n              <Card.Body>\n                <Card.Title className=\"profileName\">{localStorage.getItem(\"user_details\") && JSON.parse(localStorage.getItem(\"user_details\")).first_name} {localStorage.getItem(\"user_details\") && JSON.parse(localStorage.getItem(\"user_details\")).last_name}</Card.Title>\n                <Card.Subtitle className=\"profileUserName text-muted\">@{localStorage.getItem(\"user_details\") && JSON.parse(localStorage.getItem(\"user_details\")).username}</Card.Subtitle>\n                <ProgressBar animated aria-valuemin=\"0\" aria-valuemax=\"100\" now={highest * 8.4} label={roundTo(highest * 8.4, 0) + \"%\"} />\n                {userGameStatus == 100 ?\n                  <Card.Text className=\"medalCard\">\n                    <br />\n                    <Card.Img className=\"medal-icon\" variant=\"top\" src=\"images/rookiemedal.png\" className=\"medal-icon\" />\n                    <Card.Img className=\"medal-icon\" variant=\"top\" src=\"images/3medal.png\" className=\"medal-icon\" />\n                    <Card.Img className=\"medal-icon\" variant=\"top\" src=\"images/2medal.png\" className=\"medal-icon\" />\n                    <Card.Img className=\"medal-icon\" variant=\"top\" src=\"images/1medal.png\" className=\"medal-icon\" />\n                    <Card.Img className=\"medal-icon\" variant=\"top\" src=\"images/3startrophy.png\" className=\"medal-icon\" />\n                    <br />\n                    <strong className=\"progressTitle\">Master</strong>\n                  </Card.Text>\n                  : userGameStatus > 75 ?\n                    <Card.Text className=\"medalCard\">\n                      <br />\n                      <Card.Img className=\"medal-icon\" variant=\"top\" src=\"images/rookiemedal.png\" className=\"medal-icon\" />\n                      <Card.Img className=\"medal-icon\" variant=\"top\" src=\"images/3medal.png\" className=\"medal-icon\" />\n                      <Card.Img className=\"medal-icon\" variant=\"top\" src=\"images/2medal.png\" className=\"medal-icon\" />\n                      <Card.Img className=\"medal-icon\" variant=\"top\" src=\"images/1medal.png\" className=\"medal-icon\" />\n                      <br />\n                      <strong className=\"progressTitle\">Veteran</strong>\n                    </Card.Text>\n                    : userGameStatus > 50 ?\n                      <Card.Text className=\"medalCard\">\n                        <br />\n                        <Card.Img className=\"medal-icon\" variant=\"top\" src=\"images/rookiemedal.png\" className=\"medal-icon\" />\n                        <Card.Img className=\"medal-icon\" variant=\"top\" src=\"images/3medal.png\" className=\"medal-icon\" />\n                        <Card.Img className=\"medal-icon\" variant=\"top\" src=\"images/2medal.png\" className=\"medal-icon\" />\n                        <br />\n                        <strong className=\"progressTitle\">Experienced</strong>\n                      </Card.Text>\n                      : userGameStatus > 25 ?\n                        <Card.Text className=\"medalCard\">\n                          <br />\n                          <Card.Img className=\"medal-icon\" variant=\"top\" src=\"images/rookiemedal.png\" className=\"medal-icon\" />\n                          <Card.Img className=\"medal-icon\" variant=\"top\" src=\"images/3medal.png\" className=\"medal-icon\" />\n                          <br />\n                          <strong className=\"progressTitle\">Seasoned</strong>\n                        </Card.Text>\n                        : userGameStatus > 1 ?\n                          <Card.Text className=\"medalCard\">\n                            <br />\n                            <Card.Img className=\"medal-icon\" variant=\"top\" src=\"images/rookiemedal.png\" className=\"medal-icon\" />\n                            <br />\n                            <strong className=\"progressTitle\">Rookie</strong>\n                          </Card.Text>\n                          :\n                          <Card.Text className=\"medalCard\">\n                            <br />\n                            <Card.Img className=\"medal-icon\" variant=\"top\" src=\"images/new.png\" className=\"medal-icon\" />\n                            <br />\n                            <strong className=\"progressTitle\">Newbie</strong>\n                          </Card.Text>\n                }\n                <Card.Text>Highest Level Completed {highest + \"/12\"}</Card.Text>\n                <Card.Text>Average WPM: {wpm}</Card.Text>\n                <Button\n                  className=\"leaderboardButton\"\n                  variant=\"outline\"\n                  href=\"/leaderboard\"\n                >Global Leaderboard</Button>\n              </Card.Body>\n            </Card>\n          </Col>\n          <Col>\n            <Row>\n              <Card style={{ width: '45rem' }} >\n                <Card.Header as=\"h5\">🔥Your Top Typing Speeds🔥</Card.Header>\n                <Card.Body style={{ paddingBottom: '13px', paddingTop: '13px' }}>\n                  <Attempts />\n                </Card.Body>\n              </Card>\n            </Row>\n            <br />\n            <br />\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  )\n}","/home/robert/lighthouse/final-project/final-project/src/components/GameConsole.jsx",["114","115","116","117","118"],"import React, { useState, useEffect } from 'react';\nimport axios from \"axios\";\nimport { Jumbotron, Button, ProgressBar, Spinner, InputGroup, FormControl, Card, Nav } from 'react-bootstrap';\nimport GameCompleteMsg from './GameCompleteMsg';\nimport Chat from './Chat';\nimport useApplicationData from \"../hooks/useApplicationData\";\nimport \"./GameConsole.css\"\n\nexport default function GameConsole(props) {\n\n  const { attempts, levels } = useApplicationData()\n\n  const [seconds, setSeconds] = useState(30);\n  const [typingIn, setTypingIn] = useState(\"\");\n  const [currentLevel, setCurrentLevel] = useState(0);\n  const [intervalId, setIntervalId] = useState(null)\n  const [levelContent, setLevelContent] = useState(\"Are You Ready To Start?\")\n  const [levelStarted, setLevelStarted] = useState(false)\n  const [text, setText] = useState(\"\");\n  const [highestLevel, setHighestLevel] = useState(0);\n\n  const currentUser = (localStorage.getItem(\"user_details\") && JSON.parse(localStorage.getItem(\"user_details\"))?.id)\n\n  // calculate wpm of the user\n  const totalAvgWpm = function () {\n    let result = []\n    for (let attempt of attempts) {\n      if (attempt.user_id === currentUser) {\n        result.push(attempt)\n      }\n    }\n    let totalWords = (result.reduce((a, b) => a + (parseInt(b.words_completed) || 0), 0))\n    let totalTime = result.reduce((a, b) => a + (parseInt(b.time_taken) || 0), 0) / 60\n    return totalWords / totalTime\n  }\n\n  //Get users so we can check the highest level cleared\n  useEffect(() => {\n    axios.get(\"/users\", {\n    })\n      .then(res => {\n        for (let user of res.data['users']) {\n          if (user.id === JSON.parse(localStorage.getItem(\"user_details\"))?.id) {\n            setHighestLevel(user.highest_level_cleared)\n          }\n        }\n      })\n  }, [highestLevel])\n\n  //Highlights the words that are right\n  const highlightWords = (event) => {\n    let value = event.target.value;\n    let txt = document.getElementById(\"console-text\").innerText;\n    let idx = txt.indexOf(value);\n    setTypingIn(value);\n    if (idx >= 0) {\n      let newText = [txt.substring(0, idx), <strong>{txt.substring(idx, idx + value.length)}</strong>, txt.substring(idx + value.length)];\n      setLevelContent(newText);\n    } else {\n      setLevelContent(levelContent);\n    }\n  }\n\n  //Timer to start and set seconds\n  const Timer = function (seconds) {\n    setLevelStarted(true)\n    setSeconds(seconds)\n    if (seconds > 0) {\n      setIntervalId(setInterval(() => setSeconds((s) => s - 1), 1000))\n    } else {\n      setSeconds(\"Game Over\");\n    }\n  }\n\n  // use randomtext api to get random sentences\n  const giveMeRandomText = (level_id) => {\n    if (level_id === 0) return \"Incorrect level_id entered.\"\n    if (levels[level_id - 1] === undefined) return \"Error occured\"\n    let nOfWords = levels[level_id - 1].number_of_words;\n    axios.get(`https://www.randomtext.me/api/gibberish/p-1/${nOfWords}-${nOfWords}`)\n      .then(res => {\n        let taggedText = res.data.text_out;\n        let cleanText = taggedText.replace(/<\\/?[^>]+(>|$)/g, \"\");\n        postContentToDB(cleanText, level_id);\n        setLevelContent(cleanText)\n        setText(cleanText)\n      })\n  }\n\n  // post random content from api to our server\n  const postContentToDB = (cleanText, level_id) => {\n    axios.post('/contents', {\n      cleanText: cleanText,\n      level_id: level_id,\n      theme_id: 1\n    })\n      .then(res => {\n      })\n      .catch(err => console.log(\"Catch block of posting content to DB from front end error\", err))\n  }\n\n  //Starts the timer and the sets the level up\n  const startGame = function () {\n    console.log(currentLevel)\n    setLevelStarted(true);\n    setTypingIn(\"\");\n    clearInterval(intervalId)\n    Timer(30)\n    setCurrentLevel(currentLevel)\n    setLevelContent(giveMeRandomText(currentLevel + 1))\n    if (currentLevel === 0) {\n      setCurrentLevel(0);\n    }\n  }\n\n  //Triggered when they want to reset the current level\n  const resetLevel = function () {\n    setLevelStarted(false)\n    setLevelContent(\"Are You Ready To Start?\")\n    setTypingIn(\"\");\n    clearInterval(intervalId)\n    setCurrentLevel(currentLevel)\n    setSeconds(30)\n  }\n\n  // Restarts the game from the first level\n  const restartfromFirstLevel = function () {\n    setLevelStarted(false)\n    setLevelContent(\"Are You Ready To Start?\")\n    setTypingIn(\"\");\n    clearInterval(intervalId)\n    setCurrentLevel(0);\n    setSeconds(30)\n  }\n\n  //If they dont finish a level, this calcuates how many words were correct\n  const totalWordsCorrect = function (inputField, currentLevelContent) {\n    const typedIn = inputField.split(' ')\n    const matchingwords = []\n    for (let i = 0; i < typedIn.length; i++) {\n      if (typedIn[i] === currentLevelContent[i])\n        matchingwords.push(typedIn[i])\n    }\n    return matchingwords.length\n  }\n\n  const transition = function() {\n    setLevelStarted(false)\n    setLevelContent()\n    setSeconds(3)\n    Timer(3)\n    clearInterval(intervalId)\n  }\n\n  //Resuming from the last cleared level button\n  const resumeFromLastClearedLevel = function () {\n    setLevelStarted(true)\n    setCurrentLevel(highestLevel);\n    setLevelContent(giveMeRandomText(highestLevel + 1))\n    setSeconds(30)\n    Timer(30)\n    clearInterval(intervalId)\n  }\n  useEffect(() => {\n    if (currentLevel !== 0) {\n      setTypingIn(\"\");\n      clearInterval(intervalId)\n      setLevelContent(giveMeRandomText(currentLevel + 1))\n      setSeconds(30)\n      Timer(30)\n    }\n    if ((currentLevel) > highestLevel) {\n      setHighestLevel(currentLevel)\n    }\n  }, [currentLevel])\n\n  //Post request to attempts if they fail the level.\n  useEffect(() => {\n    if (seconds === 0) {\n      setSeconds(\"Game Over\")\n      setLevelStarted(false)\n      let currentLevelWords = props.contents[currentLevel].content.split(' ')\n      let totalOfCorrectWords = totalWordsCorrect(typingIn, currentLevelWords)\n      let wpm = totalAvgWpm()\n      setLevelContent(\"Game Over\")\n      clearInterval(intervalId)\n      axios.post('/attempts', {\n        user_id: JSON.parse(localStorage.getItem(\"user_details\"))?.id,\n        level_id: currentLevel + 1,\n        words_completed: totalOfCorrectWords,\n        time_taken: 30,\n        passed: false,\n        current_highest_level_passed: JSON.parse(localStorage.getItem(\"user_details\"))?.highest_level_cleared,\n        wpm: wpm\n      })\n        .then(res => {\n\n        })\n        .catch(err => console.log(err))\n    }\n  }, [seconds, intervalId]);\n\n  //Post request to attempts if they pass the level\n  useEffect(() => {\n    if (typingIn === text.trim() && typingIn !== \"\") {\n      setLevelContent(giveMeRandomText(currentLevel))\n      let correctWords = text.split(' ').length;\n      let secondsLeft = 30 - seconds;\n      clearInterval(intervalId);\n      console.log((currentLevel + 1), JSON.parse(localStorage.getItem(\"user_details\"))?.highest_level_cleared)\n      setCurrentLevel(currentLevel + 1)\n      setSeconds(30)\n      setTypingIn(\"\");\n      axios.post('/attempts', {\n        user_id: JSON.parse(localStorage.getItem(\"user_details\"))?.id,\n        level_id: currentLevel + 1,\n        words_completed: correctWords,\n        time_taken: secondsLeft,\n        passed: true,\n        current_highest_level_passed: JSON.parse(localStorage.getItem(\"user_details\"))?.highest_level_cleared,\n        wpm: totalAvgWpm()\n      })\n        .then(res => {\n          axios.post(\"/users\", {\n            user_id: JSON.parse(localStorage.getItem(\"user_details\"))?.id,\n            level_id: currentLevel + 1,\n            wpm: totalAvgWpm(),\n            current_highest_level_passed: JSON.parse(localStorage.getItem(\"user_details\"))?.highest_level_cleared\n          })\n        })\n        .catch(err => console.log(err))\n    }\n  }, [typingIn, intervalId])\n\n  //Stops from pasting into text field.\n  const handleChange = (e) => {\n    e.preventDefault();\n  };\n\n  return (\n    <div className=\"gameconsole\">\n      <Jumbotron className=\"game-area\" style={{ marginBottom: 0 }}>\n        <h1>TypeCraft</h1>\n        <br />\n        <ProgressBar aria-valuemin=\"0\" aria-valuemax=\"100\" animated now={text ? (typingIn.length / text.length) * 100 : 0} variant=\"success\" />\n        <br />\n        <Card>\n          <Card.Header>\n            <Nav className=\"gamePlayNav\" variant=\"pills\">\n              <Nav.Item>\n                Current Level: {currentLevel + 1}\n              </Nav.Item>\n              { seconds > 0? \n              <Nav.Item>\n                Time Left: {seconds} seconds\n              </Nav.Item>\n              :\n              <Nav.Item style={{color: \"Red\"}}>\n                Time's Up!!!\n              </Nav.Item>\n              }\n              <Nav.Item>\n                Highest Level: {highestLevel}\n              </Nav.Item>\n            </Nav>\n          </Card.Header>\n          <Card.Body>\n            <blockquote className=\"blockquote mb-0\">\n              <div id=\"console-text\">\n                {currentLevel === 13 ? <GameCompleteMsg /> : levelContent}\n              </div>\n            </blockquote>\n          </Card.Body>\n        </Card>\n        <br />\n        <InputGroup>\n          <InputGroup.Prepend>\n            <InputGroup.Text id=\"textarea\">TYPE HERE:</InputGroup.Text>\n          </InputGroup.Prepend>\n          <FormControl as=\"textarea\"\n            onChange={(event) => highlightWords(event)}\n            value={typingIn}\n            id=\"textarea\"\n            aria-label=\"With textarea\"\n            onPaste={handleChange}\n          />\n        </InputGroup>\n        <br />\n        <p>\n          {levelStarted === false && currentLevel !== 0 ?\n            <Button className=\"startGame\" variant=\"primary\" onClick={restartfromFirstLevel}>\n              Start from the begining\n            </Button> : null}\n          {levelStarted === false && highestLevel >= 1 && highestLevel !== currentLevel ?\n            <Button className=\"startGame\" variant=\"primary\" onClick={resumeFromLastClearedLevel}>\n              Start from level {highestLevel + 1}\n            </Button> : null}\n          {levelStarted === true ?\n            <Button className=\"restartGame\" variant=\"primary\" onClick={resetLevel}>\n              Restart Level\n            </Button> : null}\n          {levelStarted === false ?\n            <Button\n              className=\"startGame\"\n              variant=\"primary\"\n              onClick={startGame}\n            >\n              {(levelStarted === false || seconds !== \"Game Over\") && currentLevel === 0 ? `Start Game ` : `Start Level ${currentLevel + 1}!`}\n            </Button> : null}\n        </p>\n      </Jumbotron>\n      <Chat />\n    </div>\n  )\n}","/home/robert/lighthouse/final-project/final-project/src/components/NavbarTC.jsx",[],"/home/robert/lighthouse/final-project/final-project/src/components/WelcomePage.jsx",["119"],"import React, { useState } from 'react';\nimport { Container, Jumbotron, Modal, Button, Nav } from 'react-bootstrap';\nimport { useHistory } from 'react-router-dom';\nimport Typing from \"react-typing-animation\";\nimport useSound from 'use-sound';\nimport DelayLink from 'react-delay-link';\nimport useApplicationData from '../hooks/useApplicationData';\nimport Register from './Register';\nimport Login from './Login';\nimport \"./WelcomePage.css\";\n\nexport default function Welcomepage() {\n\n  const { checkLoggedIn } = useApplicationData();\n\n  const history = useHistory();\n  const navigateToPlay = () => {\n    history.push(\"/play\");\n    history.go(0)\n  }\n\n  const playGameSoundUrl = \"./sounds/SuperMarioBros.mp3\";\n  const [playGameSound] = useSound(playGameSoundUrl);\n  const [showLogin, setShowLogin] = useState(false);\n  const [showRegister, setShowRegister] = useState(false);\n\n  const handleCloseLogin = () => setShowLogin(false);\n  const handleShowLogin = () => setShowLogin(true);\n  const handleCloseRegister = () => setShowRegister(false);\n  const handleShowRegister = () => setShowRegister(true);\n\n  return (\n    <div className=\"welcome-container\">\n      <Jumbotron fluid className=\"container-of-bg\" style={{ backgroundImage: \"url(/images/whitekeyboard.jpg)\" }}>\n        <Container className=\"welcome-text-box\" style={{ marginLeft: '6rem' }}>\n          <h1 className=\"welcome-to-typecraft\">\n            <Typing speed={60}>\n              TypeCraft\n            </Typing>\n          </h1>\n          <h2>\n            12 Levels 🏆\n          </h2>\n          <h2>\n            30 Seconds Each ⏳\n          </h2>\n          <h2>\n            Do you have what it takes?\n          </h2>\n          {checkLoggedIn() ?\n            <DelayLink delay={1000} to=\"/play\" clickAction={navigateToPlay} replace={false}>\n              <Button\n                variant=\"outline\"\n                size=\"lg\"\n                className=\"startGameButton\"\n              >\n                Play Now\n            </Button>\n            </DelayLink>\n            :\n            <Button className=\"startGameButton\" variant=\"outline\" onClick={handleShowLogin} size=\"lg\">Play Now</Button>\n          }\n        </Container>\n      </Jumbotron>\n\n      {/* Modal for Login Form */}\n      {!checkLoggedIn() &&\n        <Modal show={showLogin} onHide={handleCloseLogin}>\n          <Modal.Header closeButton>\n            <Modal.Title>Login</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Login\n              handleCloseLogin={handleCloseLogin}\n            />\n          </Modal.Body>\n          <Modal.Footer>\n            <Nav.Link className=\"navLink\" variant=\"primary\" onClick={() => { handleCloseLogin(); handleShowRegister() }}>\n              New User? Click Here To Register!\n            </Nav.Link>\n          </Modal.Footer>\n        </Modal>\n      }\n\n      {/* Modal for Register Form */}\n      <Modal show={showRegister} onHide={handleCloseRegister}>\n        <Modal.Header closeButton>\n          <Modal.Title>Register</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Register\n            handleCloseRegister={handleCloseRegister}\n          />\n        </Modal.Body>\n        <Modal.Footer>\n          <Nav.Link className=\"navLink\" variant=\"primary\" onClick={() => { handleCloseRegister(); handleShowLogin() }}>\n            Already Registered? Click Here To Login!\n          </Nav.Link>\n        </Modal.Footer>\n      </Modal>\n    </div>\n  )\n}","/home/robert/lighthouse/final-project/final-project/src/hooks/useApplicationData.js",[],"/home/robert/lighthouse/final-project/final-project/src/components/Attempts.jsx",["120","121"],"import React, { useMemo } from 'react';\nimport { Container, Table, Alert, Button } from 'react-bootstrap';\nimport useApplicationData from \"../hooks/useApplicationData\";\nimport Moment from 'react-moment';\nimport useSound from 'use-sound';\nimport DelayLink from 'react-delay-link';\nimport { useHistory } from 'react-router-dom';\nimport \"./Attempts.css\";\n\nexport default function Attempts() {\n\n  const soundUrl = \"./sounds/SuperMarioBros.mp3\";\n\n  const [play] = useSound(soundUrl);\n\n  const history = useHistory();\n  const navigateToPlay = () => {\n    history.push(\"/play\");\n    history.go(0);\n  }\n\n  const roundTo = require('round-to');\n\n  const { attempts } = useApplicationData();\n\n  for (const attempt of attempts) {\n    attempt.words_per_min = ((attempt.words_completed * 60) / attempt.time_taken);\n  };\n\n  const currentUser = (localStorage.getItem(\"user_details\") && JSON.parse(localStorage.getItem(\"user_details\"))?.id);\n\n  const sortedUsersId = () => {\n    let result = [];\n    for (let i = 0; i < attempts.length; i++) {\n      result.push(attempts[i].user_id);\n    }\n    return result;\n  };\n\n  const currentUserAttempts = useMemo(() => {\n    let result = []\n    for (let attempt of attempts)\n      if (attempt.user_id === currentUser && attempt.passed === true) {\n        result.push(attempt)\n      }\n    return result\n  })\n\n  const sortUserAttempts = currentUserAttempts.sort((a, b) => {\n    return b.words_per_min - a.words_per_min\n  })\n\n  if (sortedUsersId().includes(currentUser)) {\n    return (\n      <div className=\"leaderboard\">\n        <Container className=\"leadercontainer\">\n          <Table bordered >\n            <thead>\n              <tr className=\"firstrow\">\n                <th>Date</th>\n                <th>Level</th>\n                <th>Time Completed</th>\n                <th>Words Per Minute</th>\n              </tr>\n            </thead>\n            <tbody>\n              {sortUserAttempts[0] ? (\n                <tr className=\"secondrow\">\n                  <td>\n                    <Moment format='MMMM Do, YYYY'>\n                      {sortUserAttempts[0] && sortUserAttempts[0].attempted_at}\n                    </Moment>\n                  </td>\n                  <td>{sortUserAttempts[0] && sortUserAttempts[0].level_id}</td>\n                  <td>{sortUserAttempts[0] && sortUserAttempts[0].time_taken + \" Seconds\"}</td>\n                  <td>{roundTo((sortUserAttempts[0] && sortUserAttempts[0].words_per_min), 2)}</td>\n                </tr>) : null\n              }\n              {sortUserAttempts[1] ? (\n                <tr className=\"firstrow\">\n                  <td>\n                    <Moment format=\"MMMM Do, YYYY\">\n                      {sortUserAttempts[1] && sortUserAttempts[1].attempted_at}\n                    </Moment>\n                  </td>\n                  <td>{sortUserAttempts[1] && sortUserAttempts[1].level_id}</td>\n                  <td>{sortUserAttempts[1] && sortUserAttempts[1].time_taken + \" Seconds\"}</td>\n                  <td>{roundTo((sortUserAttempts[1] && sortUserAttempts[1].words_per_min), 2)}</td>\n                </tr>) : null\n              }\n              {sortUserAttempts[2] ? (\n                <tr className=\"secondrow\"> \n                  <td>\n                    <Moment format=\"MMMM Do, YYYY\">\n                      {sortUserAttempts[2] && sortUserAttempts[2].attempted_at}\n                    </Moment>\n                  </td>\n                  <td>{sortUserAttempts[2] && sortUserAttempts[2].level_id}</td>\n                  <td>{sortUserAttempts[2] && sortUserAttempts[2].time_taken + \" Seconds\"}</td>\n                  <td>{roundTo((sortUserAttempts[2] && sortUserAttempts[2].words_per_min), 2)}</td>\n                </tr>) : null\n              }\n              {sortUserAttempts[3] ? (\n                <tr className=\"firstrow\">\n                  <td>\n                    <Moment format=\"MMMM Do, YYYY\">\n                      {sortUserAttempts[3] && sortUserAttempts[3].attempted_at}\n                    </Moment>\n                  </td>\n                  <td>{sortUserAttempts[3] && sortUserAttempts[3].level_id}</td>\n                  <td>{sortUserAttempts[3] && sortUserAttempts[3].time_taken + \" Seconds\"}</td>\n                  <td>{roundTo((sortUserAttempts[3] && sortUserAttempts[3].words_per_min), 2)}</td>\n                </tr>) : null\n              }\n              {sortUserAttempts[4] ? (\n                <tr className=\"secondrow\"className=\"secondrow\">\n                  <td>\n                    <Moment format=\"MMMM Do, YYYY\">\n                      {sortUserAttempts[4] && sortUserAttempts[4].attempted_at}\n                    </Moment>\n                  </td>\n                  <td>{sortUserAttempts[4] && sortUserAttempts[4].level_id}</td>\n                  <td>{sortUserAttempts[4] && sortUserAttempts[4].time_taken + \" Seconds\"}</td>\n                  <td>{roundTo((sortUserAttempts[4] && sortUserAttempts[4].words_per_min), 2)}</td>\n                </tr>) : null\n              }\n\n            </tbody>\n          </Table>\n          <Alert className=\"alertContainer\" >\n            <Alert.Heading>Hey, nice to see you again!</Alert.Heading>\n            <p>\n              Congrats on the rad scores! Looks like you're doing quite well but don't let that stop you. Click on the button below to try and reach even better scores!\n        </p>\n            <hr />\n            <p className=\"mb-0\">\n              <DelayLink delay={1000} to=\"/play\" clickAction={navigateToPlay} replace={false}>\n                <Button className=\"alertButton\" variant=\"outline\" size=\"lg\">Play Game</Button>\n              </DelayLink>\n            </p>\n          </Alert>\n        </Container>\n      </div>\n    )\n  } else {\n    return (\n      <Alert className=\"alertContainer\">\n        <Alert.Heading>Hey, you must be new here!</Alert.Heading>\n        <p>\n          Aww yeah, so it looks like you haven't actually played yet. No worries! Simply click on the button below to play this super awesome game and build up your typing chops!\n        </p>\n        <hr />\n        <p className=\"mb-0\">\n          <DelayLink delay={3000} to=\"/play\" clickAction={play} replace={false}>\n            <Button className=\"alertButton\" variant=\"outline\" size=\"lg\">Play Game</Button>\n          </DelayLink>\n        </p>\n      </Alert>\n    )\n  }\n}\n","/home/robert/lighthouse/final-project/final-project/src/components/Register.jsx",["122","123","124","125","126"],"import React, { useState } from 'react';\nimport useApplicationData from \"../hooks/useApplicationData\";\nimport axios from 'axios';\nimport { Form, Button, Col, Row, InputGroup, OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport { useHistory } from 'react-router-dom';\nimport \"./Register.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nexport default function Register(props) {\n\n  const { users } = useApplicationData();\n\n  const history = useHistory();\n\n  const [usernameIsAvailable, setUsernameIsAvailable] = useState(true);\n\n  const [newUserDetails, setNewUserDetails] = useState({\n    username: \"\",\n    first_name: \"\",\n    last_name: \"\",\n    email: \"\",\n    password: \"\",\n    comfirmpassword: \"\",\n    avatar: \"\",\n    city: \"\",\n    country: \"\"\n  });\n\n  const checkUniqueUsername = (e) => {\n    let desiredUsername = e.target.value;\n    if (desiredUsername.length >= 1) {\n      setUsernameIsAvailable(true);\n    }\n    setNewUserDetails({\n      ...newUserDetails,\n      username: e.target.value\n    })\n    for (let i = 0; i < users.length; i++) {\n      console.log(users)\n      if (users[i].username === desiredUsername) {\n        setUsernameIsAvailable(false);\n        break;\n      }\n    }\n  }\n\n  //Register with validation for empty fields\n  const registerUser = (e) => {\n    e.preventDefault();\n    if (newUserDetails.username === \"\") {\n      alert(\"Username cannot be left blank.\")\n      return\n    } else if (newUserDetails.first_name === \"\") {\n      alert(\"First name cannot be left blank.\")\n      return\n    } else if (newUserDetails.last_name === \"\") {\n      alert(\"Last name cannot be left blank.\")\n      return\n    } else if (newUserDetails.email === \"\" || newUserDetails.email.includes(\"@\") !== true) {\n      alert(\"Email not valid. Please enter a valid e-mail address.\")\n      return\n    } else if (newUserDetails.password === \"\") {\n      alert(\"Password cannot be left blank.\")\n      return\n    } else if (newUserDetails.password.length < 8) {\n      alert(\"Password too short.\")\n      return\n    } else if (newUserDetails.password > 20) {\n      alert(\"Password too long.\")\n      return\n    } else if (newUserDetails.avatar === \"\") {\n      alert(\"Please select an avatar.\")\n    }\n    axios.post('/register', {\n      username: newUserDetails.username,\n      first_name: newUserDetails.first_name,\n      last_name: newUserDetails.last_name,\n      email: newUserDetails.email,\n      password: newUserDetails.password,\n      avatar: newUserDetails.avatar,\n      city: newUserDetails.city,\n      country: newUserDetails.country\n    })\n      .then(res => {\n        axios.post('/login', {\n          username: newUserDetails.username,\n          password: newUserDetails.password\n        })\n          .then(res => {\n            localStorage.setItem('user_details', JSON.stringify(res.data[0]))\n            history.push(\"/play\");\n            history.go(0)\n            props.handleCloseRegister();\n          })\n      })\n  }\n\n  return (\n    <div className=\"register\">\n      <Form>\n        <Form.Row>\n          <Form.Group as={Col} controlId=\"formGridFirstName\">\n            <Form.Label>First Name</Form.Label>\n            <Form.Control\n              type=\"firstname\"\n              placeholder=\"Enter First Name\"\n              onChange={e => {\n                setNewUserDetails({\n                  ...newUserDetails,\n                  first_name: e.target.value\n                })\n              }}\n            />\n          </Form.Group>\n\n          <Form.Group as={Col} controlId=\"formGridPassword\">\n            <Form.Label>Last Name</Form.Label>\n            <Form.Control\n              type=\"lastname\"\n              placeholder=\"Enter Last Name\"\n              onChange={e => {\n                setNewUserDetails({\n                  ...newUserDetails,\n                  last_name: e.target.value\n                })\n              }}\n            />\n          </Form.Group>\n        </Form.Row>\n\n        <Form.Row>\n          <Form.Group as={Col} controlId=\"formBasicUsername\">\n            <Form.Label>Username</Form.Label>\n            <OverlayTrigger\n              trigger = 'focus'\n              placement={'top'}\n              overlay={\n                newUserDetails.username.length > 0 ?\n                <Tooltip id={`tooltip-top`} style={{color: 'red'}}>\n                  {newUserDetails.username.length > 0 && (usernameIsAvailable ? \"Username is available\" : \"Username already taken\")}\n                </Tooltip> :\n                <Tooltip id={`tooltip-top`} style={{display: 'none'}}>\n                </Tooltip> \n              }\n            >\n              <InputGroup>\n                <InputGroup.Prepend>\n                  <InputGroup.Text>@</InputGroup.Text>\n                </InputGroup.Prepend>\n                <Form.Control\n                  type=\"Username\"\n                  placeholder=\"Enter Username\"\n                  value={newUserDetails.username}\n                  onChange={(e) => checkUniqueUsername(e)}\n                />\n              </InputGroup>\n            </OverlayTrigger>\n          </Form.Group>\n\n          <Form.Group as={Col} controlId=\"formBasicEmail\">\n            <Form.Label>Email address</Form.Label>\n            <Form.Control\n              type=\"email\"\n              placeholder=\"Enter Email\"\n              onChange={e => {\n                setNewUserDetails({\n                  ...newUserDetails,\n                  email: e.target.value\n                })\n              }}\n            />\n          </Form.Group>\n        </Form.Row>\n\n        <Form.Row>\n          <Form.Group as={Col} controlId=\"formBasicPassword\">\n            <Form.Label>Password</Form.Label>\n            <Form.Control\n              type=\"password\"\n              placeholder=\"Password\"\n              onChange={e => {\n                setNewUserDetails({\n                  ...newUserDetails,\n                  password: e.target.value\n                })\n              }}\n            />\n            <Form.Text id=\"passwordHelpBlock\" muted>\n              Your password must be 8-20 characters long.\n            </Form.Text>\n          </Form.Group>\n\n          <Form.Group as={Col} controlId=\"formBasicConfirmPassword\">\n            <Form.Label>Confirm Password</Form.Label>\n            <Form.Control type=\"password\"\n              placeholder=\"Confirm Password\"\n              onChange={e => {\n                setNewUserDetails({\n                  ...newUserDetails,\n                  comfirmpassword: e.target.value\n                })\n              }} />\n          </Form.Group>\n        </Form.Row>\n\n        <Form.Row >\n          <Form.Group as={Col} controlId=\"formBasicCity\">\n            <Form.Label>City</Form.Label>\n            <Form.Control\n              type=\"City\"\n              placeholder=\"Enter City\"\n              onChange={e => {\n                setNewUserDetails({\n                  ...newUserDetails,\n                  city: e.target.value\n                })\n              }}\n            />\n          </Form.Group>\n\n          <Form.Group as={Col} controlId=\"formBasicCountry\">\n            <Form.Label>Province</Form.Label>\n            <Form.Control\n              type=\"Country\"\n              placeholder=\"Enter Province\"\n              onChange={e => {\n                setNewUserDetails({\n                  ...newUserDetails,\n                  country: e.target.value\n                })\n              }}\n            />\n          </Form.Group>\n        </Form.Row>\n\n        <fieldset style={{ marginTop: \"1rem\", marginBottom: \"1rem\" }}>\n          <Form.Group as={Row}>\n            <Form.Label as=\"legend\" column sm={2}>\n              Avatar\n            </Form.Label>\n            <Row sm={10}>\n              <Form.Check\n                className=\"avatarCheckButton\"\n                type=\"radio\"\n                label={<img variant=\"top\" src=\"images/dinosaur.png\" className=\"registerAvatar\" />}\n                name=\"formHorizontalAvatars\"\n                id=\"Dinosaur\"\n                onChange={e => {\n                  setNewUserDetails({\n                    ...newUserDetails,\n                    avatar: e.target.id\n                  })\n                }}\n              />\n              <Form.Check\n                className=\"avatarCheckButton\"\n                type=\"radio\"\n                label={<img variant=\"top\" src=\"images/ghost.png\" className=\"registerAvatar\" />}\n                name=\"formHorizontalAvatars\"\n                id=\"Ghost\"\n                onChange={e => {\n                  setNewUserDetails({\n                    ...newUserDetails,\n                    avatar: e.target.id\n                  })\n                }}\n              />\n              <Form.Check\n                className=\"avatarCheckButton\"\n                type=\"radio\"\n                label={<img variant=\"top\" src=\"images/monster.png\" className=\"registerAvatar\" />}\n                name=\"formHorizontalAvatars\"\n                id=\"Monster\"\n                onChange={e => {\n                  setNewUserDetails({\n                    ...newUserDetails,\n                    avatar: e.target.id\n                  })\n                }}\n              />\n              <Form.Check\n                className=\"avatarCheckButton\"\n                type=\"radio\"\n                label={<img variant=\"top\" src=\"images/unicorn.png\" className=\"registerAvatar\" />}\n                name=\"formHorizontalAvatars\"\n                id=\"Unicorn\"\n                onChange={e => {\n                  setNewUserDetails({\n                    ...newUserDetails,\n                    avatar: e.target.id\n                  })\n                }}\n              />\n              <Form.Check\n                className=\"avatarCheckButton\"\n                type=\"radio\"\n                label={<img variant=\"top\" src=\"images/fox.png\" className=\"registerAvatar\" />}\n                name=\"formHorizontalAvatars\"\n                id=\"Fox\"\n                onChange={e => {\n                  setNewUserDetails({\n                    ...newUserDetails,\n                    avatar: e.target.id\n                  })\n                }}\n              />\n            </Row>\n          </Form.Group>\n        </fieldset>\n\n        <Button\n          className=\"formSubmitButton\"\n          variant=\"outline\"\n          type=\"submit\"\n          onClick={(e) => registerUser(e)}\n        >\n          Submit\n        </Button>\n      </Form>\n    </div>\n  )\n}","/home/robert/lighthouse/final-project/final-project/src/components/Login.jsx",[],"/home/robert/lighthouse/final-project/final-project/src/components/PlayerMap.jsx",["127","128","129","130","131","132","133","134"],"import React, { useState, useEffect } from 'react'\nimport { GoogleMap, Marker, InfoWindow, LoadScript } from '@react-google-maps/api';\nimport Geocode from \"react-geocode\";\nimport useApplicationData from \"../hooks/useApplicationData\";\n\nimport \"./PlayerMap.css\"\n\n// Default center of map on load\nlet center = {\n  lat: 43.644357428479296,\n  lng: -79.40218810875912\n};\n\n// Map cotainer size\nconst containerStyle = {\n  width: '1110px',\n  height: '600px',\n};\n\nexport default React.memo(function Map() {\n\n  const [selected, setSelected] = useState({});\n  const { users, setUsers } = useApplicationData();\n  const [points, setPoints] = useState();\n\n  Geocode.setApiKey(process.env.REACT_APP_GOOGLE_API_KEY);\n\n  // Get geocode based on a city and country\n  async function getLocation(city, country) {\n    try {\n      let response = await Geocode.fromAddress(`${city}, ${country}`);\n      return (\n        {\n          lat: response.results[0].geometry.location.lat,\n          lng: response.results[0].geometry.location.lng\n        }\n      )\n    }\n    catch (err) {\n      console.log(\"Error fetching geodata:\", err);\n    }\n    return null;\n  }\n  // get geocode of each user in the database \n  async function getLocations(users) {\n    let result = [];\n    for (let user of users) {\n      const res = await getLocation(`${user.city}, ${user.country}`);\n      const newUser = {\n        name: user.username,\n        city: user.city,\n        country: user.country,\n        wordsPerMin: user.words_per_min,\n        level: user.highest_level_cleared,\n        avatar: user.avatar,\n        location: res,\n      }\n      result.push(newUser)\n    }\n    return result;\n  }\n\n  useEffect(() => {\n    (async () => {\n      const stuff = await getLocations(users).then((res) => { return res })\n      setPoints(stuff);\n    })()\n  }, [users]);\n\n  const onSelect = item => {\n    setSelected(item);\n  }\n\n  return (\n    <LoadScript\n      googleMapsApiKey={process.env.REACT_APP_GOOGLE_API_KEY}\n    >\n      <GoogleMap\n        mapContainerStyle={containerStyle}\n        center={center}\n        zoom={3}\n      >\n        {\n          points && points.map(item => {\n            return (\n              <Marker key={item.name}\n                position={item.location}\n                onClick={() => onSelect(item)}\n              />\n            )\n          })\n        }\n        {\n          selected.location &&\n          (\n            <InfoWindow\n              position={selected.location}\n              clickable={true}\n              onCloseClick={() => setSelected({})}\n            >\n              <div>\n                {selected.avatar === \"Dinosaur\" ?\n                  <img src=\"images/dinosaur.png\" className=\"map-avatar\" />\n                  : selected.avatar === \"Ghost\" ?\n                    <img src=\"images/ghost.png\" className=\"map-avatar\" />\n                    : selected.avatar === \"Monster\" ?\n                      <img src=\"images/monster.png\" className=\"map-avatar\" />\n                      : selected.avatar === \"Unicorn\" ?\n                        <img src=\"images/unicorn.png\" className=\"map-avatar\" />\n                        : selected.avatar === \"Fox\" ?\n                          <img src=\"images/fox.png\" className=\"map-avatar\" />\n                          :\n                          <img src=\"images/sample-avatar.jpg\" className=\"map-avatar\" />\n                }\n                <p style={{ margin: \"0\" }}>@{selected.name}</p>\n                <p style={{ margin: \"0\" }}>{selected.city}, {selected.country}</p>\n                <p style={{ margin: \"0\" }}>Level: {selected.level}</p>\n                <p style={{ margin: \"0\" }}>WPM: {selected.wordsPerMin}</p>\n              </div>\n            </InfoWindow>\n          )\n        }\n        <></>\n      </GoogleMap>\n    </LoadScript >\n  )\n})","/home/robert/lighthouse/final-project/final-project/src/components/GameCompleteMsg.jsx",[],"/home/robert/lighthouse/final-project/final-project/src/components/Chat.jsx",[],"/home/robert/lighthouse/final-project/final-project/src/components/TextContainer.jsx",[],"/home/robert/lighthouse/final-project/final-project/src/components/Messages.jsx",[],"/home/robert/lighthouse/final-project/final-project/src/components/InfoBar.jsx",[],"/home/robert/lighthouse/final-project/final-project/src/components/Input.jsx",[],"/home/robert/lighthouse/final-project/final-project/src/components/Message.jsx",[],{"ruleId":"135","replacedBy":"136"},{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","severity":1,"message":"140","line":1,"column":17,"nodeType":"141","messageId":"142","endLine":1,"endColumn":25},{"ruleId":"139","severity":1,"message":"143","line":3,"column":50,"nodeType":"141","messageId":"142","endLine":3,"endColumn":54},{"ruleId":"139","severity":1,"message":"144","line":9,"column":18,"nodeType":"141","messageId":"142","endLine":9,"endColumn":26},{"ruleId":"139","severity":1,"message":"145","line":10,"column":20,"nodeType":"141","messageId":"142","endLine":10,"endColumn":31},{"ruleId":"146","severity":1,"message":"147","line":54,"column":33,"nodeType":"148","messageId":"149","endLine":54,"endColumn":35},{"ruleId":"150","severity":1,"message":"151","line":57,"column":97,"nodeType":"152","endLine":57,"endColumn":119},{"ruleId":"150","severity":1,"message":"151","line":58,"column":92,"nodeType":"152","endLine":58,"endColumn":114},{"ruleId":"150","severity":1,"message":"151","line":59,"column":92,"nodeType":"152","endLine":59,"endColumn":114},{"ruleId":"150","severity":1,"message":"151","line":60,"column":92,"nodeType":"152","endLine":60,"endColumn":114},{"ruleId":"150","severity":1,"message":"151","line":61,"column":97,"nodeType":"152","endLine":61,"endColumn":119},{"ruleId":"150","severity":1,"message":"151","line":68,"column":99,"nodeType":"152","endLine":68,"endColumn":121},{"ruleId":"150","severity":1,"message":"151","line":69,"column":94,"nodeType":"152","endLine":69,"endColumn":116},{"ruleId":"150","severity":1,"message":"151","line":70,"column":94,"nodeType":"152","endLine":70,"endColumn":116},{"ruleId":"150","severity":1,"message":"151","line":71,"column":94,"nodeType":"152","endLine":71,"endColumn":116},{"ruleId":"150","severity":1,"message":"151","line":78,"column":101,"nodeType":"152","endLine":78,"endColumn":123},{"ruleId":"150","severity":1,"message":"151","line":79,"column":96,"nodeType":"152","endLine":79,"endColumn":118},{"ruleId":"150","severity":1,"message":"151","line":80,"column":96,"nodeType":"152","endLine":80,"endColumn":118},{"ruleId":"150","severity":1,"message":"151","line":87,"column":103,"nodeType":"152","endLine":87,"endColumn":125},{"ruleId":"150","severity":1,"message":"151","line":88,"column":98,"nodeType":"152","endLine":88,"endColumn":120},{"ruleId":"150","severity":1,"message":"151","line":95,"column":105,"nodeType":"152","endLine":95,"endColumn":127},{"ruleId":"150","severity":1,"message":"151","line":102,"column":97,"nodeType":"152","endLine":102,"endColumn":119},{"ruleId":"139","severity":1,"message":"153","line":3,"column":42,"nodeType":"141","messageId":"142","endLine":3,"endColumn":49},{"ruleId":"139","severity":1,"message":"154","line":147,"column":9,"nodeType":"141","messageId":"142","endLine":147,"endColumn":19},{"ruleId":"155","severity":1,"message":"156","line":175,"column":6,"nodeType":"157","endLine":175,"endColumn":20,"suggestions":"158"},{"ruleId":"155","severity":1,"message":"159","line":201,"column":6,"nodeType":"157","endLine":201,"endColumn":27,"suggestions":"160"},{"ruleId":"155","severity":1,"message":"161","line":233,"column":6,"nodeType":"157","endLine":233,"endColumn":28,"suggestions":"162"},{"ruleId":"139","severity":1,"message":"163","line":23,"column":10,"nodeType":"141","messageId":"142","endLine":23,"endColumn":23},{"ruleId":"155","severity":1,"message":"164","line":40,"column":31,"nodeType":"141","endLine":40,"endColumn":38},{"ruleId":"150","severity":1,"message":"151","line":116,"column":42,"nodeType":"152","endLine":116,"endColumn":63},{"ruleId":"165","severity":1,"message":"166","line":245,"column":24,"nodeType":"167","endLine":245,"endColumn":98},{"ruleId":"165","severity":1,"message":"166","line":258,"column":24,"nodeType":"167","endLine":258,"endColumn":95},{"ruleId":"165","severity":1,"message":"166","line":271,"column":24,"nodeType":"167","endLine":271,"endColumn":97},{"ruleId":"165","severity":1,"message":"166","line":284,"column":24,"nodeType":"167","endLine":284,"endColumn":97},{"ruleId":"165","severity":1,"message":"166","line":297,"column":24,"nodeType":"167","endLine":297,"endColumn":93},{"ruleId":"139","severity":1,"message":"144","line":23,"column":18,"nodeType":"141","messageId":"142","endLine":23,"endColumn":26},{"ruleId":"155","severity":1,"message":"168","line":68,"column":6,"nodeType":"157","endLine":68,"endColumn":13,"suggestions":"169"},{"ruleId":"165","severity":1,"message":"166","line":103,"column":19,"nodeType":"167","endLine":103,"endColumn":75},{"ruleId":"165","severity":1,"message":"166","line":105,"column":21,"nodeType":"167","endLine":105,"endColumn":74},{"ruleId":"165","severity":1,"message":"166","line":107,"column":23,"nodeType":"167","endLine":107,"endColumn":78},{"ruleId":"165","severity":1,"message":"166","line":109,"column":25,"nodeType":"167","endLine":109,"endColumn":80},{"ruleId":"165","severity":1,"message":"166","line":111,"column":27,"nodeType":"167","endLine":111,"endColumn":78},{"ruleId":"165","severity":1,"message":"166","line":113,"column":27,"nodeType":"167","endLine":113,"endColumn":88},"no-native-reassign",["170"],"no-negated-in-lhs",["171"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'setUsers' is assigned a value but never used.","'setSortType' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'Spinner' is defined but never used.","'transition' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'giveMeRandomText', 'highestLevel', and 'intervalId'. Either include them or remove the dependency array.","ArrayExpression",["172"],"React Hook useEffect has missing dependencies: 'currentLevel', 'props.contents', 'totalAvgWpm', and 'typingIn'. Either include them or remove the dependency array.",["173"],"React Hook useEffect has missing dependencies: 'currentLevel', 'giveMeRandomText', 'seconds', 'text', and 'totalAvgWpm'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setLevelContent' needs the current value of 'currentLevel'.",["174"],"'playGameSound' is assigned a value but never used.","React Hook useMemo does nothing when called with only one argument. Did you forget to pass an array of dependencies?","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'getLocations'. Either include it or remove the dependency array.",["175"],"no-global-assign","no-unsafe-negation",{"desc":"176","fix":"177"},{"desc":"178","fix":"179"},{"desc":"180","fix":"181"},{"desc":"182","fix":"183"},"Update the dependencies array to be: [currentLevel, giveMeRandomText, highestLevel, intervalId]",{"range":"184","text":"185"},"Update the dependencies array to be: [seconds, intervalId, props.contents, currentLevel, typingIn, totalAvgWpm]",{"range":"186","text":"187"},"Update the dependencies array to be: [typingIn, intervalId, text, giveMeRandomText, currentLevel, seconds, totalAvgWpm]",{"range":"188","text":"189"},"Update the dependencies array to be: [getLocations, users]",{"range":"190","text":"191"},[5541,5555],"[currentLevel, giveMeRandomText, highestLevel, intervalId]",[6424,6445],"[seconds, intervalId, props.contents, currentLevel, typingIn, totalAvgWpm]",[7717,7739],"[typingIn, intervalId, text, giveMeRandomText, currentLevel, seconds, totalAvgWpm]",[1803,1810],"[getLocations, users]"]