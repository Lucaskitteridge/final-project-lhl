[{"/Users/lucas/lighthouse/final-project-lhl/final-project/src/index.js":"1","/Users/lucas/lighthouse/final-project-lhl/final-project/src/App.js":"2","/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/Register.jsx":"3","/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/Footer.jsx":"4","/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/Login.jsx":"5","/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/Leaderboard.jsx":"6","/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/Profile.jsx":"7","/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/WelcomePage.jsx":"8","/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/GameConsole.jsx":"9","/Users/lucas/lighthouse/final-project-lhl/final-project/src/hooks/useApplicationData.js":"10","/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/GameCompleteMsg.jsx":"11","/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/NavbarTC.jsx":"12","/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/Attempts.jsx":"13","/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/Chat.jsx":"14","/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/TextContainer.jsx":"15","/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/Messages.jsx":"16","/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/Input.jsx":"17","/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/Message.jsx":"18","/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/InfoBar.jsx":"19"},{"size":219,"mtime":1613241334563,"results":"20","hashOfConfig":"21"},{"size":1324,"mtime":1613687868159,"results":"22","hashOfConfig":"21"},{"size":4972,"mtime":1613525334304,"results":"23","hashOfConfig":"21"},{"size":1205,"mtime":1613661486090,"results":"24","hashOfConfig":"21"},{"size":2064,"mtime":1613661486093,"results":"25","hashOfConfig":"21"},{"size":4246,"mtime":1613607059523,"results":"26","hashOfConfig":"21"},{"size":5730,"mtime":1613688010176,"results":"27","hashOfConfig":"21"},{"size":1646,"mtime":1613682837715,"results":"28","hashOfConfig":"21"},{"size":9662,"mtime":1613687868167,"results":"29","hashOfConfig":"21"},{"size":1374,"mtime":1613683707067,"results":"30","hashOfConfig":"21"},{"size":459,"mtime":1613525334296,"results":"31","hashOfConfig":"21"},{"size":3290,"mtime":1613685309132,"results":"32","hashOfConfig":"21"},{"size":5860,"mtime":1613661486087,"results":"33","hashOfConfig":"21"},{"size":1859,"mtime":1613687868163,"results":"34","hashOfConfig":"21"},{"size":694,"mtime":1613687868170,"results":"35","hashOfConfig":"21"},{"size":430,"mtime":1613661486094,"results":"36","hashOfConfig":"21"},{"size":508,"mtime":1613661486091,"results":"37","hashOfConfig":"21"},{"size":1014,"mtime":1613682837711,"results":"38","hashOfConfig":"21"},{"size":454,"mtime":1613682837710,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"72v973",{"filePath":"43","messages":"44","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"42"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"/Users/lucas/lighthouse/final-project-lhl/final-project/src/index.js",[],["85","86"],"/Users/lucas/lighthouse/final-project-lhl/final-project/src/App.js",["87","88","89","90","91","92","93"],"import React, { useState } from 'react';\nimport useApplicationData from \"./hooks/useApplicationData\"\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\n// Import Components\nimport Footer from \"./components/Footer.jsx\";\nimport Leaderboard from \"./components/Leaderboard.jsx\";\nimport Profile from \"./components/Profile.jsx\";\nimport Welcomepage from \"./components/WelcomePage.jsx\";\nimport GameConsole from \"./components/GameConsole.jsx\";\nimport NavbarTC from \"./components/NavbarTC.jsx\";\nimport Chat from \"./components/Chat.jsx\";\n\n// Import stylesheets\nimport './App.css';\n\nfunction App() {\n\n  const {\n    contents,\n    setContents,\n    gameConsole,\n    updateGameConsole,\n    userInput,\n    setUserInput\n  } = useApplicationData();\n\n  return (\n    <Router>\n      <div className=\"app\">\n        <NavbarTC />\n        <Switch>\n          <Route path=\"/leaderboard\">\n            <Leaderboard />\n          </Route>\n          <Route path=\"/profile\">\n            <Profile />\n          </Route>\n          <Route path=\"/play\">\n            <Chat />\n            <GameConsole\n              contents={contents}\n            />\n          </Route>\n          <Route path=\"/\">\n            <Welcomepage />\n          </Route>\n        </Switch>\n        <Footer />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;","/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/Register.jsx",[],"/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/Footer.jsx",[],"/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/Login.jsx",[],"/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/Leaderboard.jsx",["94","95"],"import React, { useState, useMemo } from 'react'\nimport {Container, Table} from 'react-bootstrap';\nimport useApplicationData from \"../hooks/useApplicationData\"\nimport \"./Leaderboard.css\"\n\nfunction Leaderboard() {\n  \n  const { users, setUsers } = useApplicationData()\n\n  const [sortType, setSortType] = useState('levels');\n\n  const sortedUsers = useMemo(() => {\n    const sortArray = type => {\n      const types = {\n        wordsPerMin: 'words_per_min',\n        levels: 'highest_level_cleared',\n      };\n      const sortProperty = types[type];\n      const secondarySortProperty = types[type === 'levels' ? 'wordsPerMin' : 'levels']\n      const sorted = [...users].sort((a, b) => {\n        const initialDiff = b[sortProperty] - a[sortProperty]\n        if (initialDiff === 0) {\n          return b[secondarySortProperty] - a[secondarySortProperty]\n        } else {\n          return initialDiff;\n        }\n      });\n      return sorted;\n    };\n    return sortArray(sortType)\n  }, [users, sortType])\n\n\n\n  return (\n    <div className=\"leaderboard\">\n      <Container className=\"leadercontainer\">\n      <Table striped bordered hover variant=\"dark\">\n        <thead>\n          <tr>\n            <th colSpan=\"4\" classname=\"align-me\">Leaderboard</th>\n          </tr>\n          <tr>\n            <th>Ranking</th>\n            <th>Username</th>\n            <th>Highest Level</th>\n            <th>Words Per Minute</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>1st</td>\n            <td>@{sortedUsers[0] && sortedUsers[0].username}</td>\n            <td>{sortedUsers[0] && sortedUsers[0].highest_level_cleared}</td>\n            <td>{sortedUsers[0] && sortedUsers[0].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>2nd</td>\n            <td>@{sortedUsers[1] && sortedUsers[1].username}</td>\n            <td>{sortedUsers[1] && sortedUsers[1].highest_level_cleared}</td>\n            <td>{sortedUsers[1] && sortedUsers[1].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>3rd</td>\n            <td>@{sortedUsers[2] && sortedUsers[2].username}</td>\n            <td>{sortedUsers[2] && sortedUsers[2].highest_level_cleared}</td>\n            <td>{sortedUsers[2] && sortedUsers[2].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>4th</td>\n            <td>@{sortedUsers[3] && sortedUsers[3].username}</td>\n            <td>{sortedUsers[3] && sortedUsers[3].highest_level_cleared}</td>\n            <td>{sortedUsers[3] && sortedUsers[3].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>5th</td>\n            <td>@{sortedUsers[4] && sortedUsers[4].username}</td>\n            <td>{sortedUsers[4] && sortedUsers[4].highest_level_cleared}</td>\n            <td>{sortedUsers[4] && sortedUsers[4].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>6th</td>\n            <td>@{sortedUsers[5] && sortedUsers[5].username}</td>\n            <td>{sortedUsers[5] && sortedUsers[5].highest_level_cleared}</td>\n            <td>{sortedUsers[5] && sortedUsers[5].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>7th</td>\n            <td>@{sortedUsers[6] && sortedUsers[6].username}</td>\n            <td>{sortedUsers[6] && sortedUsers[6].highest_level_cleared}</td>\n            <td>{sortedUsers[6] && sortedUsers[6].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>8th</td>\n            <td>@{sortedUsers[7] && sortedUsers[7].username}</td>\n            <td>{sortedUsers[7] && sortedUsers[7].highest_level_cleared}</td>\n            <td>{sortedUsers[7] && sortedUsers[7].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>9th</td>\n            <td>@{sortedUsers[8] && sortedUsers[8].username}</td>\n            <td>{sortedUsers[8] && sortedUsers[8].highest_level_cleared}</td>\n            <td>{sortedUsers[8] && sortedUsers[8].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>10th</td>\n            <td>@{sortedUsers[9] && sortedUsers[9].username}</td>\n            <td>{sortedUsers[9] && sortedUsers[9].highest_level_cleared}</td>\n            <td>{sortedUsers[9] && sortedUsers[9].words_per_min}</td>\n          </tr>\n        </tbody>\n      </Table>\n      </Container>\n    </div>\n  )\n}\n\nexport default Leaderboard\n","/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/Profile.jsx",["96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112"],"/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/WelcomePage.jsx",["113","114","115","116","117"],"import React, { useState } from 'react';\nimport { Container, Jumbotron, Image, Button, Fade } from 'react-bootstrap';\nimport Typing from \"react-typing-animation\";\nimport useSound from 'use-sound';\nimport DelayLink from 'react-delay-link';\nimport \"./WelcomePage.css\";\nimport useApplicationData from '../hooks/useApplicationData';\n\n\nfunction Welcomepage() {\n\n  const { checkLoggedIn } = useApplicationData();\n\n  const playGameSoundUrl = \"./sounds/SuperMarioBros.mp3\";\n  const playTypeSoundURL = \"./sounds/type.mp3\";\n\n  const [playGameSound] = useSound(playGameSoundUrl);\n  const [playTypeSound] = useSound(playTypeSoundURL)\n\n  const [index, setIndex] = useState(0);\n\n  return (\n    <div className=\"welcome-container\">\n      <Jumbotron fluid>\n        <Container>\n          <Image src=\"images/keyboard.png\" className=\"typing-icon\" />\n          <h1>\n            <Typing speed={60}>\n              Welcome to TypeCraft!\n            </Typing>\n          </h1>\n          <h2>\n          <Typing startDelay={2000} speed={60}>\n              10 Levels!!!\n            </Typing>\n          </h2>\n          <h2>\n          <Typing startDelay={3000} speed={60}>\n              30 Seconds!!!\n            </Typing>\n          </h2>\n          <h2>\n          <Typing startDelay={4000} speed={60}>\n              Do you have what it takes???\n            </Typing>\n          </h2>\n          <DelayLink delay={3000} to=\"/play\" clickAction={playGameSound} replace={false}>\n            <Button className=\"startGameButton\" variant=\"primary\" size=\"lg\">Play Game</Button>\n          </DelayLink>\n        </Container>\n      </Jumbotron>\n    </div>\n  )\n}\n\nexport default Welcomepage\n\n","/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/GameConsole.jsx",["118","119","120","121","122"],"import React, { useState, useEffect, useMemo } from 'react';\nimport axios from \"axios\";\nimport { Jumbotron, Button, ProgressBar, Spinner, InputGroup, FormControl, Card } from 'react-bootstrap';\nimport GameCompleteMsg from './GameCompleteMsg';\nimport \"./GameConsole.css\"\nimport useApplicationData from \"../hooks/useApplicationData\";\n\nfunction GameConsole(props) {\n\n  const { attempts, setAttempts } = useApplicationData()\n\n  const [seconds, setSeconds] = useState(30);\n  const [typingIn, setTypingIn] = useState(\"\");\n  const [currentLevel, setCurrentLevel] = useState(0);\n  const [intervalId, setIntervalId] = useState(null)\n  const [levelContent, setLevelContent] = useState(\"\")\n  const [levelStarted, setLevelStarted] = useState(false)\n\n  const currentUser = (localStorage.getItem(\"user_details\") && JSON.parse(localStorage.getItem(\"user_details\"))?.id)\n\n  // calculate wpm of the user\n  const totalAvgWpm = function() {\n    let result = []\n    for (let attempt of attempts)\n      if (attempt.user_id === currentUser) {\n        result.push(attempt)\n      }\n    let totalWords = (result.reduce((a, b) => a + (parseInt(b.words_completed) || 0), 0))\n    let totalTime = result.reduce((a, b) => a + (parseInt(b.time_taken) || 0), 0) / 60\n    return totalWords/totalTime\n  }\n\n\n  //Highlights the words that are right\n  const highlightWords = (event) => {\n    let value = event.target.value;\n    let txt = document.getElementById(\"console-text\").innerText;\n    let idx = txt.indexOf(value);\n    if (idx >= 0) {\n      let newText = [txt.substring(0, idx), <strong>{txt.substring(idx, idx + value.length)}</strong>, txt.substring(idx + value.length)];\n      setTypingIn(value);\n      setLevelContent(newText);\n    } else {\n      setLevelContent(levelContent);\n      setTypingIn(value);\n    }\n  }\n\n  //Timer to start and set seconds\n  const Timer = function (seconds) {\n    setLevelStarted(true)\n    setSeconds(seconds)\n    if (seconds > 0) {\n      setIntervalId(setInterval(() => setSeconds((s) => s - 1), 1000))\n    } else {\n      setSeconds(\"Game Over\");\n    }\n  }\n\n  //Starts the timer and the sets the level up\n  const startGame = function () {\n    setLevelStarted(true)\n    if (currentLevel === 0) {\n      setTypingIn(\"\");\n      setLevelContent(props.contents[currentLevel]?.content)\n      clearInterval(intervalId)\n      setCurrentLevel(0);\n      Timer(30)\n    } else {\n      setTypingIn(\"\");\n      clearInterval(intervalId)\n      setLevelContent(props.contents[currentLevel]?.content)\n      Timer(30)\n    }\n  }\n\n  //Triggered when they want to reset the current level\n  const resetLevel = function () {\n    setLevelStarted(false)\n    setLevelContent(\"Are You Ready To Start?\")\n    setTypingIn(\"\");\n    clearInterval(intervalId)\n    setCurrentLevel(currentLevel);\n    setSeconds(30)\n  }\n\n  // Restarts the game from the first level\n  const restartfromFirstLevel = function () {\n    setLevelStarted(false)\n    setLevelContent(\"Are You Ready To Start?\")\n    setTypingIn(\"\");\n    clearInterval(intervalId)\n    setCurrentLevel(0);\n    setSeconds(30)\n  }\n\n  //If they dont finish a level, this calcuates how many words were correct\n  const totalWordsCorrect = function (inputField, currentLevelContent) {\n    const typedIn = inputField.split(' ')\n    const matchingwords = []\n    for (let i = 0; i < typedIn.length; i++) {\n      if (typedIn[i] === currentLevelContent[i])\n        matchingwords.push(typedIn[i])\n    }\n    return matchingwords.length\n  }\n\n  //Resuming from the last cleared level button\n  const resumeFromLastClearedLevel = function () {\n    setLevelStarted(true)\n    setCurrentLevel(JSON.parse(localStorage.getItem(\"user_details\"))?.highest_level_cleared);\n  }\n  useEffect(() => {\n    if (currentLevel !== 0) {\n      setTypingIn(\"\");\n      clearInterval(intervalId)\n      setLevelContent(props.contents[currentLevel]?.content)\n      setSeconds(30)\n      Timer(30)\n    }\n  }, [currentLevel])\n\n  //Post request to attempts if they fail the level.\n  useEffect(() => {\n    if (seconds === 0) {\n      setSeconds(\"Game Over\")\n      setLevelStarted(false)\n      let currentLevelWords = props.contents[currentLevel].content.split(' ')\n      let totalOfCorrectWords = totalWordsCorrect(typingIn, currentLevelWords)\n      let wpm = totalAvgWpm()\n      console.log(wpm)\n      setLevelContent(\"GameOver\")\n      clearInterval(intervalId)\n      axios.post('/attempts', {\n        user_id: JSON.parse(localStorage.getItem(\"user_details\"))?.id,\n        level_id: currentLevel + 1,\n        words_completed: totalOfCorrectWords,\n        time_taken: 30,\n        passed: false,\n        current_highest_level_passed: JSON.parse(localStorage.getItem(\"user_details\"))?.highest_level_cleared,\n        wpm: wpm\n      })\n        .then(res => {\n          console.log(res)\n        })\n        .catch(err => console.log(err))\n    }\n  }, [seconds, intervalId]);\n\n  //Post request to attempts if both the text areas are the same\n  useEffect(() => {\n    if (typingIn === props.contents[currentLevel]?.content && typingIn !== \"\") {\n      let correctWords = props.contents[currentLevel].content.split(' ').length;\n      let secondsLeft = 30 - seconds;\n      setLevelContent(\"Time for next level. Press the button below when you're ready to start\")\n      clearInterval(intervalId);\n      setLevelStarted(false)\n      let wpm = totalAvgWpm()\n      setCurrentLevel(currentLevel + 1)\n      setSeconds(30)\n      setTypingIn(\"\");\n      axios.post('/attempts', {\n        user_id: JSON.parse(localStorage.getItem(\"user_details\"))?.id,\n        level_id: currentLevel + 1,\n        words_completed: correctWords,\n        time_taken: secondsLeft,\n        passed: true,\n        current_highest_level_passed: JSON.parse(localStorage.getItem(\"user_details\"))?.highest_level_cleared,\n        wpm: wpm\n      })\n        .then(res => {\n          console.log(res)\n        })\n        .catch(err => console.log(err))\n    }\n  }, [typingIn, intervalId])\n\n  //Stops from pasting into text field.\n  const handleChange = (e) => {\n    e.preventDefault();\n  };\n\n  return (\n    <div className=\"gameconsole\">\n      <Jumbotron>\n        <h1>TypeCraft</h1>\n        <>\n          <Spinner animation=\"border\" variant=\"primary\" />\n          <Spinner animation=\"border\" variant=\"secondary\" />\n          <Spinner animation=\"border\" variant=\"success\" />\n          <Spinner animation=\"border\" variant=\"danger\" />\n          <Spinner animation=\"border\" variant=\"warning\" />\n          <Spinner animation=\"border\" variant=\"info\" />\n          <Spinner animation=\"border\" variant=\"light\" />\n          <Spinner animation=\"border\" variant=\"dark\" />\n          <Spinner animation=\"grow\" variant=\"primary\" />\n          <Spinner animation=\"grow\" variant=\"secondary\" />\n          <Spinner animation=\"grow\" variant=\"success\" />\n          <Spinner animation=\"grow\" variant=\"danger\" />\n          <Spinner animation=\"grow\" variant=\"warning\" />\n          <Spinner animation=\"grow\" variant=\"info\" />\n          <Spinner animation=\"grow\" variant=\"light\" />\n          <Spinner animation=\"grow\" variant=\"dark\" />\n        </>\n        <br /><br /><br />\n        <ProgressBar aria-valuemin=\"0\" aria-valuemax=\"100\" animated now={props.contents[currentLevel] ? (typingIn.length / props.contents[currentLevel].content.length) * 100 : 1} variant=\"success\" />\n        <br />\n        <Card>\n          <Card.Header>{seconds}</Card.Header>\n          <Card.Body>\n            <blockquote className=\"blockquote mb-0\">\n              <div id=\"console-text\">\n                {currentLevel === 13 ? <GameCompleteMsg /> : levelContent || setLevelContent(\"Are You Ready To Start?\")}\n              </div>\n            </blockquote>\n          </Card.Body>\n        </Card>\n        <br />\n        <InputGroup>\n          <InputGroup.Prepend>\n            <InputGroup.Text id=\"textarea\">TYPE HERE:</InputGroup.Text>\n          </InputGroup.Prepend>\n          <FormControl as=\"textarea\"\n            // onChange={(event) => setTypingIn(event.target.value)}\n            onChange={(event) => highlightWords(event)}\n            value={typingIn}\n            id=\"textarea\"\n            aria-label=\"With textarea\"\n            onCut={handleChange}\n            onCopy={handleChange}\n            onPaste={handleChange}\n          />\n        </InputGroup>\n        <br />\n        <p>\n          {levelStarted === false && currentLevel !== 0 ?\n            <Button className=\"startGame\" variant=\"primary\" onClick={restartfromFirstLevel}>\n              Start from the begining\n            </Button> : null}\n          {levelStarted === false && currentLevel === 0 && JSON.parse(localStorage.getItem(\"user_details\")) && currentLevel !== JSON.parse(localStorage.getItem(\"user_details\"))?.highest_level_cleared ?\n            <Button className=\"startGame\" variant=\"primary\" onClick={resumeFromLastClearedLevel} >\n              Start from level {JSON.parse(localStorage.getItem(\"user_details\"))?.highest_level_cleared + 1}\n            </Button> : null}\n          {levelStarted === true ?\n            <Button className=\"restartGame\" variant=\"primary\" onClick={resetLevel}>\n              Restart Level\n            </Button> : null}\n          {levelStarted === false ?\n            <Button\n              className=\"startGame\"\n              variant=\"primary\"\n              onClick={startGame}\n            >\n              {levelStarted === true && seconds !== \"Game Over\" ? `Start Game ` : `Start Level ${currentLevel + 1}!`}\n            </Button> : null}\n          {/* {levelStarted === false ?\n              <Button variant=\"primary\" onClick={restartfromFirstLevel}>\n              Go back to Level 1\n            </Button> : null} */}\n        </p>\n      </Jumbotron>\n    </div>\n  )\n}\n\nexport default GameConsole\n","/Users/lucas/lighthouse/final-project-lhl/final-project/src/hooks/useApplicationData.js",[],"/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/GameCompleteMsg.jsx",[],"/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/NavbarTC.jsx",[],"/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/Attempts.jsx",["123","124","125","126"],"import React, { useState, useMemo } from 'react';\nimport { Container, Table, Alert, Button } from 'react-bootstrap';\nimport useApplicationData from \"../hooks/useApplicationData\";\nimport Moment from 'react-moment';\nimport useSound from 'use-sound';\nimport DelayLink from 'react-delay-link';\n\nfunction Attempts() {\n\n  const soundUrl = \"./sounds/SuperMarioBros.mp3\";\n\n  const [play] = useSound(soundUrl);\n\n  const roundTo = require('round-to');\n\n  const { attempts, setAttempts } = useApplicationData()\n\n  for (const attempt of attempts) {\n    attempt.words_per_min=((attempt.words_completed * 60) / attempt.time_taken)\n  }\n\n  const [sortType, setSortType] = useState('words_per_min');\n\n  const currentUser = (localStorage.getItem(\"user_details\") && JSON.parse(localStorage.getItem(\"user_details\"))?.id)\n\n  const sortedUsersId = () => {\n    let result = [];\n    for (let i = 0; i < attempts.length; i++) {\n      result.push(attempts[i].user_id)\n    }\n    return result\n  }\n\n  const currentUserAttempts = useMemo(() => {\n    let result = []\n    for (let attempt of attempts)\n      if (attempt.user_id === currentUser && attempt.passed === true) {\n        result.push(attempt)\n      }\n    return result\n  })\n\n  const sortUserAttempts = currentUserAttempts.sort((a, b) => {\n    return b.words_per_min - a.words_per_min\n  })\n\n  if (sortedUsersId().includes(currentUser)) {\n    return (\n      <div className=\"leaderboard\">\n        <Container className=\"leadercontainer\">\n          <Table striped bordered hover variant=\"dark\">\n            <thead>\n              <tr>\n                <th>Date</th>\n                <th>Level</th>\n                <th>Time Completed</th>\n                <th>Words Per Minute</th>\n              </tr>\n            </thead>\n            <tbody>\n              {sortUserAttempts[0] ? (\n                <tr>\n                <td>\n                  <Moment format='MMMM Do, YYYY'>\n                    {sortUserAttempts[0] && sortUserAttempts[0].attempted_at}\n                  </Moment>\n                </td>\n                <td>{sortUserAttempts[0] && sortUserAttempts[0].level_id}</td>\n                <td>{sortUserAttempts[0] && sortUserAttempts[0].time_taken + \" Seconds\"}</td>\n                <td>{roundTo((sortUserAttempts[0] && sortUserAttempts[0].words_per_min), 2)}</td>\n              </tr>) : null\n              }\n              {sortUserAttempts[1] ? (              \n              <tr>\n                <td>\n                  <Moment format=\"MMMM Do, YYYY\">\n                    {sortUserAttempts[1] && sortUserAttempts[1].attempted_at}\n                  </Moment>\n                </td>\n                <td>{sortUserAttempts[1] && sortUserAttempts[1].level_id}</td>\n                <td>{sortUserAttempts[1] && sortUserAttempts[1].time_taken + \" Seconds\"}</td>\n                <td>{roundTo((sortUserAttempts[1] && sortUserAttempts[1].words_per_min), 2)}</td>\n              </tr>) : null\n              }\n              {sortUserAttempts[2] ? (\n              <tr>\n                <td>\n                  <Moment format=\"MMMM Do, YYYY\">\n                    {sortUserAttempts[2] && sortUserAttempts[2].attempted_at}\n                  </Moment>\n                </td>\n                <td>{sortUserAttempts[2] && sortUserAttempts[2].level_id}</td>\n                <td>{sortUserAttempts[2] && sortUserAttempts[2].time_taken + \" Seconds\"}</td>\n                <td>{roundTo((sortUserAttempts[2] && sortUserAttempts[2].words_per_min), 2)}</td>\n              </tr>) : null\n              }\n              {sortUserAttempts[3] ? (\n              <tr>\n                <td>\n                  <Moment format=\"MMMM Do, YYYY\">\n                    {sortUserAttempts[3] && sortUserAttempts[3].attempted_at}\n                  </Moment>\n                </td>\n                <td>{sortUserAttempts[3] && sortUserAttempts[3].level_id}</td>\n                <td>{sortUserAttempts[3] && sortUserAttempts[3].time_taken + \" Seconds\"}</td>\n                <td>{roundTo((sortUserAttempts[3] && sortUserAttempts[3].words_per_min), 2)}</td>\n              </tr>) : null\n              }\n              {sortUserAttempts[4] ? (\n              <tr>\n                <td>\n                  <Moment format=\"MMMM Do, YYYY\">\n                    {sortUserAttempts[4] && sortUserAttempts[4].attempted_at}\n                  </Moment>\n                </td>\n                <td>{sortUserAttempts[4] && sortUserAttempts[4].level_id}</td>\n                <td>{sortUserAttempts[4] && sortUserAttempts[4].time_taken + \" Seconds\"}</td>\n                <td>{roundTo((sortUserAttempts[4] && sortUserAttempts[4].words_per_min), 2)}</td>\n              </tr>) : null\n              }\n\n            </tbody>\n          </Table>\n          <Alert variant=\"success\">\n        <Alert.Heading>Hey, nice to see you again!</Alert.Heading>\n        <p>\n          Congrats on the rad scores! Looks like you're doing quite well but don't let that stop you. Click on the button below to try and reach even better scores!\n        </p>\n        <hr />\n        <p className=\"mb-0\">\n          <DelayLink delay={3000} to=\"/play\" clickAction={play} replace={false}>\n            <Button variant=\"primary\" size=\"lg\">Play Game</Button>\n          </DelayLink>\n        </p>\n      </Alert>\n        </Container>\n      </div>\n    )\n  } else {\n    return (\n      <Alert variant=\"danger\">\n        <Alert.Heading>Hey, you must be new here!</Alert.Heading>\n        <p>\n          Aww yeah, so it looks like you haven't actually played yet. No worries! Simply click on the button below to play this super awesome game and build up your typing chops!\n        </p>\n        <hr />\n        <p className=\"mb-0\">\n          <DelayLink delay={3000} to=\"/play\" clickAction={play} replace={false}>\n            <Button variant=\"primary\" size=\"lg\">Play Game</Button>\n          </DelayLink>\n        </p>\n      </Alert>\n    )\n  }\n}\n\nexport default Attempts\n","/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/Chat.jsx",["127","128"],"import io from \"socket.io-client\";\n\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./Chat.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { useEffect, useState } from \"react\";\nimport moment from \"moment\";\n\nimport TextContainer from './TextContainer';\nimport Messages from './Messages';\nimport InfoBar from './InfoBar';\nimport Input from './Input';\n\nimport './Chat.css';\n\nconst username = JSON.parse(localStorage.getItem(\"user_details\"))?.username\n\nconst socket = io(\"http://localhost:8000\", {\n  transports: [\"websocket\", \"polling\"]\n});\n\nconst Chat = () => {\n\n  const [users, setUsers] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n\n  useEffect(() => {\n    socket.on(\"connect\", () => {\n      socket.emit(\"username\", username);\n    });\n\n    socket.on(\"users\", users => {\n      setUsers(users);\n    });\n\n    socket.on(\"message\", message => {\n      setMessages(messages => [...messages, message]);\n    });\n\n    socket.on(\"connected\", user => {\n      setUsers(users => [...users, user]);\n    });\n\n    socket.on(\"disconnected\", id => {\n      setUsers(users => {\n        return users.filter(user => user.id !== id);\n      });\n    });\n  }, []);\n\n  // const submit = event => {\n  //   event.preventDefault();\n  //   socket.emit(\"send\", message);\n  //   setMessage(\"\");\n  // };\n\n  const sendMessage = (event) => {\n    event.preventDefault();\n\n    if(message) {\n      socket.emit('send', message, () => setMessage(''));\n    }\n  }\n\n  return (\n    <div className=\"outerContainer\">\n      <div className=\"chat-container\">\n          <InfoBar />\n          <Messages messages={messages} name={username} />\n          <Input message={message} setMessage={setMessage} sendMessage={sendMessage} />\n      </div>\n      <TextContainer users={users}/>\n    </div>\n  );\n\n}\nexport default Chat\n","/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/TextContainer.jsx",[],"/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/Messages.jsx",[],"/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/Input.jsx",[],"/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/Message.jsx",[],"/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/InfoBar.jsx",[],{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","severity":1,"message":"134","line":1,"column":17,"nodeType":"135","messageId":"136","endLine":1,"endColumn":25},{"ruleId":"133","severity":1,"message":"137","line":3,"column":50,"nodeType":"135","messageId":"136","endLine":3,"endColumn":54},{"ruleId":"133","severity":1,"message":"138","line":21,"column":5,"nodeType":"135","messageId":"136","endLine":21,"endColumn":16},{"ruleId":"133","severity":1,"message":"139","line":22,"column":5,"nodeType":"135","messageId":"136","endLine":22,"endColumn":16},{"ruleId":"133","severity":1,"message":"140","line":23,"column":5,"nodeType":"135","messageId":"136","endLine":23,"endColumn":22},{"ruleId":"133","severity":1,"message":"141","line":24,"column":5,"nodeType":"135","messageId":"136","endLine":24,"endColumn":14},{"ruleId":"133","severity":1,"message":"142","line":25,"column":5,"nodeType":"135","messageId":"136","endLine":25,"endColumn":17},{"ruleId":"133","severity":1,"message":"143","line":8,"column":18,"nodeType":"135","messageId":"136","endLine":8,"endColumn":26},{"ruleId":"133","severity":1,"message":"144","line":10,"column":20,"nodeType":"135","messageId":"136","endLine":10,"endColumn":31},{"ruleId":"133","severity":1,"message":"145","line":7,"column":8,"nodeType":"135","messageId":"136","endLine":7,"endColumn":26},{"ruleId":"146","severity":1,"message":"147","line":42,"column":33,"nodeType":"148","messageId":"149","endLine":42,"endColumn":35},{"ruleId":"150","severity":1,"message":"151","line":45,"column":97,"nodeType":"152","endLine":45,"endColumn":119},{"ruleId":"150","severity":1,"message":"151","line":46,"column":92,"nodeType":"152","endLine":46,"endColumn":114},{"ruleId":"150","severity":1,"message":"151","line":47,"column":92,"nodeType":"152","endLine":47,"endColumn":114},{"ruleId":"150","severity":1,"message":"151","line":48,"column":92,"nodeType":"152","endLine":48,"endColumn":114},{"ruleId":"150","severity":1,"message":"151","line":49,"column":97,"nodeType":"152","endLine":49,"endColumn":119},{"ruleId":"150","severity":1,"message":"151","line":56,"column":99,"nodeType":"152","endLine":56,"endColumn":121},{"ruleId":"150","severity":1,"message":"151","line":57,"column":94,"nodeType":"152","endLine":57,"endColumn":116},{"ruleId":"150","severity":1,"message":"151","line":58,"column":94,"nodeType":"152","endLine":58,"endColumn":116},{"ruleId":"150","severity":1,"message":"151","line":59,"column":94,"nodeType":"152","endLine":59,"endColumn":116},{"ruleId":"150","severity":1,"message":"151","line":66,"column":101,"nodeType":"152","endLine":66,"endColumn":123},{"ruleId":"150","severity":1,"message":"151","line":67,"column":96,"nodeType":"152","endLine":67,"endColumn":118},{"ruleId":"150","severity":1,"message":"151","line":68,"column":96,"nodeType":"152","endLine":68,"endColumn":118},{"ruleId":"150","severity":1,"message":"151","line":75,"column":103,"nodeType":"152","endLine":75,"endColumn":125},{"ruleId":"150","severity":1,"message":"151","line":76,"column":98,"nodeType":"152","endLine":76,"endColumn":120},{"ruleId":"150","severity":1,"message":"151","line":83,"column":103,"nodeType":"152","endLine":83,"endColumn":125},{"ruleId":"133","severity":1,"message":"153","line":2,"column":47,"nodeType":"135","messageId":"136","endLine":2,"endColumn":51},{"ruleId":"133","severity":1,"message":"154","line":12,"column":11,"nodeType":"135","messageId":"136","endLine":12,"endColumn":24},{"ruleId":"133","severity":1,"message":"155","line":18,"column":10,"nodeType":"135","messageId":"136","endLine":18,"endColumn":23},{"ruleId":"133","severity":1,"message":"156","line":20,"column":10,"nodeType":"135","messageId":"136","endLine":20,"endColumn":15},{"ruleId":"133","severity":1,"message":"157","line":20,"column":17,"nodeType":"135","messageId":"136","endLine":20,"endColumn":25},{"ruleId":"133","severity":1,"message":"158","line":1,"column":38,"nodeType":"135","messageId":"136","endLine":1,"endColumn":45},{"ruleId":"133","severity":1,"message":"159","line":10,"column":21,"nodeType":"135","messageId":"136","endLine":10,"endColumn":32},{"ruleId":"160","severity":1,"message":"161","line":121,"column":6,"nodeType":"162","endLine":121,"endColumn":20,"suggestions":"163"},{"ruleId":"160","severity":1,"message":"164","line":148,"column":6,"nodeType":"162","endLine":148,"endColumn":27,"suggestions":"165"},{"ruleId":"160","severity":1,"message":"166","line":176,"column":6,"nodeType":"162","endLine":176,"endColumn":28,"suggestions":"167"},{"ruleId":"133","severity":1,"message":"159","line":16,"column":21,"nodeType":"135","messageId":"136","endLine":16,"endColumn":32},{"ruleId":"133","severity":1,"message":"168","line":22,"column":10,"nodeType":"135","messageId":"136","endLine":22,"endColumn":18},{"ruleId":"133","severity":1,"message":"144","line":22,"column":20,"nodeType":"135","messageId":"136","endLine":22,"endColumn":31},{"ruleId":"160","severity":1,"message":"169","line":34,"column":31,"nodeType":"135","endLine":34,"endColumn":38},{"ruleId":"133","severity":1,"message":"170","line":6,"column":8,"nodeType":"135","messageId":"136","endLine":6,"endColumn":16},{"ruleId":"133","severity":1,"message":"171","line":8,"column":8,"nodeType":"135","messageId":"136","endLine":8,"endColumn":14},"no-native-reassign",["172"],"no-negated-in-lhs",["173"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'setContents' is assigned a value but never used.","'gameConsole' is assigned a value but never used.","'updateGameConsole' is assigned a value but never used.","'userInput' is assigned a value but never used.","'setUserInput' is assigned a value but never used.","'setUsers' is assigned a value but never used.","'setSortType' is assigned a value but never used.","'useApplicationData' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'Fade' is defined but never used.","'checkLoggedIn' is assigned a value but never used.","'playTypeSound' is assigned a value but never used.","'index' is assigned a value but never used.","'setIndex' is assigned a value but never used.","'useMemo' is defined but never used.","'setAttempts' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'intervalId' and 'props.contents'. Either include them or remove the dependency array. If 'setLevelContent' needs the current value of 'props.contents', you can also switch to useReducer instead of useState and read 'props.contents' in the reducer.","ArrayExpression",["174"],"React Hook useEffect has missing dependencies: 'currentLevel', 'props.contents', 'totalAvgWpm', and 'typingIn'. Either include them or remove the dependency array.",["175"],"React Hook useEffect has missing dependencies: 'currentLevel', 'props.contents', 'seconds', and 'totalAvgWpm'. Either include them or remove the dependency array. You can also do a functional update 'setCurrentLevel(c => ...)' if you only need 'currentLevel' in the 'setCurrentLevel' call.",["176"],"'sortType' is assigned a value but never used.","React Hook useMemo does nothing when called with only one argument. Did you forget to pass an array of dependencies?","'ReactDOM' is defined but never used.","'moment' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"177","fix":"178"},{"desc":"179","fix":"180"},{"desc":"181","fix":"182"},"Update the dependencies array to be: [currentLevel, intervalId, props.contents]",{"range":"183","text":"184"},"Update the dependencies array to be: [seconds, intervalId, props.contents, currentLevel, typingIn, totalAvgWpm]",{"range":"185","text":"186"},"Update the dependencies array to be: [typingIn, intervalId, props.contents, currentLevel, seconds, totalAvgWpm]",{"range":"187","text":"188"},[3885,3899],"[currentLevel, intervalId, props.contents]",[4816,4837],"[seconds, intervalId, props.contents, currentLevel, typingIn, totalAvgWpm]",[5880,5902],"[typingIn, intervalId, props.contents, currentLevel, seconds, totalAvgWpm]"]