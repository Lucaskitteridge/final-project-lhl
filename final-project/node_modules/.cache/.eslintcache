[{"/Users/lucas/lighthouse/final-project-lhl/final-project/src/index.js":"1","/Users/lucas/lighthouse/final-project-lhl/final-project/src/App.js":"2","/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/Register.jsx":"3","/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/Footer.jsx":"4","/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/Login.jsx":"5","/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/Leaderboard.jsx":"6","/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/Profile.jsx":"7","/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/WelcomePage.jsx":"8","/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/GameConsole.jsx":"9","/Users/lucas/lighthouse/final-project-lhl/final-project/src/hooks/useApplicationData.js":"10","/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/GameCompleteMsg.jsx":"11","/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/NavbarTC.jsx":"12","/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/EditUser.jsx":"13","/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/EditPassword.jsx":"14","/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/Attempts.jsx":"15","/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/Chat.jsx":"16"},{"size":219,"mtime":1613241334563,"results":"17","hashOfConfig":"18"},{"size":1320,"mtime":1613612797872,"results":"19","hashOfConfig":"18"},{"size":4972,"mtime":1613525334304,"results":"20","hashOfConfig":"18"},{"size":1208,"mtime":1613525334295,"results":"21","hashOfConfig":"18"},{"size":2087,"mtime":1613525334300,"results":"22","hashOfConfig":"18"},{"size":4246,"mtime":1613607059523,"results":"23","hashOfConfig":"18"},{"size":4116,"mtime":1613607059524,"results":"24","hashOfConfig":"18"},{"size":1954,"mtime":1613596487549,"results":"25","hashOfConfig":"18"},{"size":8996,"mtime":1613607738004,"results":"26","hashOfConfig":"18"},{"size":1374,"mtime":1613525334307,"results":"27","hashOfConfig":"18"},{"size":459,"mtime":1613525334296,"results":"28","hashOfConfig":"18"},{"size":3293,"mtime":1613525536739,"results":"29","hashOfConfig":"18"},{"size":4748,"mtime":1613525334294,"results":"30","hashOfConfig":"18"},{"size":1837,"mtime":1613525334293,"results":"31","hashOfConfig":"18"},{"size":5849,"mtime":1613607701109,"results":"32","hashOfConfig":"18"},{"size":3393,"mtime":1613612797873,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"72v973",{"filePath":"37","messages":"38","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},"/Users/lucas/lighthouse/final-project-lhl/final-project/src/index.js",[],["73","74"],"/Users/lucas/lighthouse/final-project-lhl/final-project/src/App.js",["75","76","77","78","79","80","81"],"import React, { useState } from 'react';\nimport useApplicationData from \"./hooks/useApplicationData\"\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\n// Import Components\nimport Footer from \"./components/Footer.jsx\";\nimport Leaderboard from \"./components/Leaderboard.jsx\";\nimport Profile from \"./components/Profile.jsx\";\nimport Welcomepage from \"./components/WelcomePage.jsx\";\nimport GameConsole from \"./components/GameConsole.jsx\";\nimport NavbarTC from \"./components/NavbarTC.jsx\";\nimport Chat from \"./components/Chat.jsx\";\n\n// Import stylesheets\nimport './App.css';\n\nfunction App() {\n\n  const {\n    contents,\n    setContents,\n    gameConsole,\n    updateGameConsole,\n    userInput,\n    setUserInput\n  } = useApplicationData();\n\n  return (\n    <Router>\n      <div className=\"app\">\n        <NavbarTC />\n        <Chat />\n        <Switch>\n          <Route path=\"/leaderboard\">\n            <Leaderboard />\n          </Route>\n          <Route path=\"/profile\">\n            <Profile />\n          </Route>\n          <Route path=\"/play\">\n            <GameConsole\n              contents={contents}\n            />\n          </Route>\n          <Route path=\"/\">\n            <Welcomepage />\n          </Route>\n        </Switch>\n        <Footer />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;","/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/Register.jsx",[],"/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/Footer.jsx",[],"/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/Login.jsx",[],"/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/Leaderboard.jsx",["82","83"],"import React, { useState, useMemo } from 'react'\nimport {Container, Table} from 'react-bootstrap';\nimport useApplicationData from \"../hooks/useApplicationData\"\nimport \"./Leaderboard.css\"\n\nfunction Leaderboard() {\n  \n  const { users, setUsers } = useApplicationData()\n\n  const [sortType, setSortType] = useState('levels');\n\n  const sortedUsers = useMemo(() => {\n    const sortArray = type => {\n      const types = {\n        wordsPerMin: 'words_per_min',\n        levels: 'highest_level_cleared',\n      };\n      const sortProperty = types[type];\n      const secondarySortProperty = types[type === 'levels' ? 'wordsPerMin' : 'levels']\n      const sorted = [...users].sort((a, b) => {\n        const initialDiff = b[sortProperty] - a[sortProperty]\n        if (initialDiff === 0) {\n          return b[secondarySortProperty] - a[secondarySortProperty]\n        } else {\n          return initialDiff;\n        }\n      });\n      return sorted;\n    };\n    return sortArray(sortType)\n  }, [users, sortType])\n\n\n\n  return (\n    <div className=\"leaderboard\">\n      <Container className=\"leadercontainer\">\n      <Table striped bordered hover variant=\"dark\">\n        <thead>\n          <tr>\n            <th colSpan=\"4\" classname=\"align-me\">Leaderboard</th>\n          </tr>\n          <tr>\n            <th>Ranking</th>\n            <th>Username</th>\n            <th>Highest Level</th>\n            <th>Words Per Minute</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>1st</td>\n            <td>@{sortedUsers[0] && sortedUsers[0].username}</td>\n            <td>{sortedUsers[0] && sortedUsers[0].highest_level_cleared}</td>\n            <td>{sortedUsers[0] && sortedUsers[0].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>2nd</td>\n            <td>@{sortedUsers[1] && sortedUsers[1].username}</td>\n            <td>{sortedUsers[1] && sortedUsers[1].highest_level_cleared}</td>\n            <td>{sortedUsers[1] && sortedUsers[1].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>3rd</td>\n            <td>@{sortedUsers[2] && sortedUsers[2].username}</td>\n            <td>{sortedUsers[2] && sortedUsers[2].highest_level_cleared}</td>\n            <td>{sortedUsers[2] && sortedUsers[2].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>4th</td>\n            <td>@{sortedUsers[3] && sortedUsers[3].username}</td>\n            <td>{sortedUsers[3] && sortedUsers[3].highest_level_cleared}</td>\n            <td>{sortedUsers[3] && sortedUsers[3].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>5th</td>\n            <td>@{sortedUsers[4] && sortedUsers[4].username}</td>\n            <td>{sortedUsers[4] && sortedUsers[4].highest_level_cleared}</td>\n            <td>{sortedUsers[4] && sortedUsers[4].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>6th</td>\n            <td>@{sortedUsers[5] && sortedUsers[5].username}</td>\n            <td>{sortedUsers[5] && sortedUsers[5].highest_level_cleared}</td>\n            <td>{sortedUsers[5] && sortedUsers[5].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>7th</td>\n            <td>@{sortedUsers[6] && sortedUsers[6].username}</td>\n            <td>{sortedUsers[6] && sortedUsers[6].highest_level_cleared}</td>\n            <td>{sortedUsers[6] && sortedUsers[6].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>8th</td>\n            <td>@{sortedUsers[7] && sortedUsers[7].username}</td>\n            <td>{sortedUsers[7] && sortedUsers[7].highest_level_cleared}</td>\n            <td>{sortedUsers[7] && sortedUsers[7].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>9th</td>\n            <td>@{sortedUsers[8] && sortedUsers[8].username}</td>\n            <td>{sortedUsers[8] && sortedUsers[8].highest_level_cleared}</td>\n            <td>{sortedUsers[8] && sortedUsers[8].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>10th</td>\n            <td>@{sortedUsers[9] && sortedUsers[9].username}</td>\n            <td>{sortedUsers[9] && sortedUsers[9].highest_level_cleared}</td>\n            <td>{sortedUsers[9] && sortedUsers[9].words_per_min}</td>\n          </tr>\n        </tbody>\n      </Table>\n      </Container>\n    </div>\n  )\n}\n\nexport default Leaderboard\n","/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/Profile.jsx",[],"/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/WelcomePage.jsx",["84","85","86","87","88"],"import React, { useState } from 'react';\nimport { Container, Jumbotron, Image, Button, Fade } from 'react-bootstrap';\nimport Typing from \"react-typing-animation\";\nimport useSound from 'use-sound';\nimport DelayLink from 'react-delay-link';\nimport \"./WelcomePage.css\";\nimport Leaderboard from \"./Leaderboard\"\nimport useApplicationData from '../hooks/useApplicationData';\n\n\nfunction Welcomepage() {\n\n  const { checkLoggedIn } = useApplicationData();\n\n  const soundUrl = \"./sounds/SuperMarioBros.mp3\";\n\n  const [play] = useSound(soundUrl);\n\n  const [index, setIndex] = useState(0);\n\n  const handleSelect = (selectedIndex, e) => {\n    setIndex(selectedIndex);\n  };\n\n  return (\n    <div className=\"welcome-container\">\n      <Jumbotron fluid>\n        <Container>\n          <Image src=\"images/typing-icon.png\" className=\"typing-icon\" />\n          <h1>\n            <Typing speed={40}>\n              Welcome to Typecraft!\n            </Typing>\n          </h1>\n          <p>\n            Before you start playing, here's how the game is going to work:\n          </p>\n          <ul>\n            1. A selection of words will appear on the screen\n          </ul>\n          <ul>\n            2. You have to type the words as fast as possible!\n          </ul>\n          <ul>\n            3. You won't be able to advance on to the next level if there are any mistakes so make sure you check for mistakes as well\n          </ul>\n          <ul>\n            4. As the levels go up. the time allocated to each level will stay the same but the amount of words will get bigger.\n          </ul>\n          <ul>\n            5. When you run out of time without having finished typing your paragraph, Game Over!\n          </ul>\n          <DelayLink delay={3000} to=\"/play\" clickAction={play} replace={false}>\n            <Button variant=\"primary\" size=\"lg\">Play Game</Button>\n          </DelayLink>\n        </Container>\n      </Jumbotron>\n    </div>\n  )\n}\n\nexport default Welcomepage\n\n","/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/GameConsole.jsx",["89","90","91"],"import React, { useState, useEffect } from 'react';\nimport axios from \"axios\";\nimport { Jumbotron, Button, ProgressBar, Spinner, InputGroup, FormControl, Card } from 'react-bootstrap';\nimport GameCompleteMsg from './GameCompleteMsg';\nimport \"./GameConsole.css\"\n\nfunction GameConsole(props) {\n\n  const [seconds, setSeconds] = useState(30);\n  const [typingIn, setTypingIn] = useState(\"\");\n  const [currentLevel, setCurrentLevel] = useState(0);\n  const [intervalId, setIntervalId] = useState(null)\n  const [levelContent, setLevelContent] = useState(\"\")\n  const [levelStarted, setLevelStarted] = useState(false)\n\n  //Highlights the words that are right\n  const highlightWords = (event) => {\n    let value = event.target.value;\n    let txt = document.getElementById(\"console-text\").innerText;\n    let idx = txt.indexOf(value);\n    if (idx >= 0) {\n      let newText = [txt.substring(0, idx), <strong>{txt.substring(idx, idx + value.length)}</strong>, txt.substring(idx + value.length)];\n      setTypingIn(value);\n      setLevelContent(newText);\n    } else {\n      setLevelContent(levelContent);\n      setTypingIn(value);\n    }\n  }\n  \n  //Timer to start and set seconds\n  const Timer = function (seconds) {\n    setLevelStarted(true)\n    setSeconds(seconds)\n    if (seconds > 0) {\n      setIntervalId(setInterval(() => setSeconds((s) => s - 1), 1000))\n    } else {\n      setSeconds(\"Game Over\");\n    }\n  }\n\n  //Starts the timer and the sets the level up\n  const startGame = function () {\n    setLevelStarted(true)\n    if (currentLevel === 0) {\n      setTypingIn(\"\");\n      setLevelContent(props.contents[currentLevel]?.content)\n      clearInterval(intervalId)\n      setCurrentLevel(0);\n      Timer(30)\n    } else {\n      setTypingIn(\"\");\n      clearInterval(intervalId)\n      setLevelContent(props.contents[currentLevel]?.content)\n      Timer(30)\n    }\n  }\n\n  //Triggered when they want to reset the current level\n  const resetLevel = function () {\n    setLevelStarted(false)\n    setLevelContent(\"Are You Ready To Start?\")\n    setTypingIn(\"\");\n    clearInterval(intervalId)\n    setCurrentLevel(currentLevel);\n    setSeconds(30)\n  }\n\n  // Restarts the game from the first level\n  const restartfromFirstLevel = function () {\n    setLevelStarted(false)\n    setLevelContent(\"Are You Ready To Start?\")\n    setTypingIn(\"\");\n    clearInterval(intervalId)\n    setCurrentLevel(0);\n    setSeconds(30)\n  }\n\n  //If they dont finish a level, this calcuates how many words were correct\n  const totalWordsCorrect = function (inputField, currentLevelContent) {\n    const typedIn = inputField.split(' ')\n    const matchingwords = []\n    for (let i = 0; i < typedIn.length; i++) {\n      if (typedIn[i] === currentLevelContent[i])\n        matchingwords.push(typedIn[i])\n    }\n    return matchingwords.length\n  }\n\n  //Resuming from the last cleared level button\n  const resumeFromLastClearedLevel = function () {\n    setLevelStarted(true)\n    setCurrentLevel(JSON.parse(localStorage.getItem(\"user_details\"))?.highest_level_cleared);\n  }\n  useEffect(() => {\n    if (currentLevel !== 0) {\n      setTypingIn(\"\");\n      clearInterval(intervalId)\n      setLevelContent(props.contents[currentLevel]?.content)\n      setSeconds(30)\n      Timer(30)\n    }\n  }, [currentLevel])\n\n  //Post request to attempts if they fail the level.\n  useEffect(() => {\n    if (seconds === 0) {\n      setSeconds(\"Game Over\")\n      setLevelStarted(false)\n      let currentLevelWords = props.contents[currentLevel].content.split(' ')\n      let totalOfCorrectWords = totalWordsCorrect(typingIn, currentLevelWords)\n      setLevelContent(\"GameOver\")\n      clearInterval(intervalId)\n      console.log(\"totalOFcorrectword function gives\", totalOfCorrectWords)\n      console.log(\"current level gives\", currentLevel)\n      axios.post('/attempts', {\n        user_id: JSON.parse(localStorage.getItem(\"user_details\"))?.id,\n        level_id: currentLevel + 1,\n        words_completed: totalOfCorrectWords,\n        time_taken: 30,\n        passed: false\n      })\n        .then(res => {\n          //if currentlevel+1 > highest level in local storage, make a patch request to user to update highest level completed\n          console.log(\"I DID REACH HERE\")\n          console.log(res);\n        })\n    }\n  }, [seconds, intervalId]);\n\n  //Post request to attempts if both the text areas are the same\n  useEffect(() => {\n    if (typingIn === props.contents[currentLevel]?.content && typingIn !== \"\") {\n      let correctWords = props.contents[currentLevel].content.split(' ').length;\n      let secondsLeft = 30 - seconds;\n      setLevelContent(\"Time for next level. Press the button below when you're ready to start\")\n      clearInterval(intervalId);\n      setLevelStarted(false)\n      setCurrentLevel(currentLevel + 1)\n      setSeconds(30)\n      setTypingIn(\"\");\n      axios.post('/attempts', {\n        user_id: JSON.parse(localStorage.getItem(\"user_details\"))?.id,\n        level_id: currentLevel + 1,\n        words_completed: correctWords,\n        time_taken: secondsLeft,\n        passed: true\n      })\n        .then(res => {\n          console.log(\"user completed level posted to db\", res);\n          //if currentlevel+1 > highest level in local storage, make a patch request to user to update highest level completed\n        })\n    }\n  }, [typingIn, intervalId])\n\n  //Stops from pasting into text field.\n  const handleChange = (e) => {\n    e.preventDefault();\n  };\n\n  return (\n    <div className=\"gameconsole\">\n      <Jumbotron>\n        <h1>TypeCraft</h1>\n        <>\n          <Spinner animation=\"border\" variant=\"primary\" />\n          <Spinner animation=\"border\" variant=\"secondary\" />\n          <Spinner animation=\"border\" variant=\"success\" />\n          <Spinner animation=\"border\" variant=\"danger\" />\n          <Spinner animation=\"border\" variant=\"warning\" />\n          <Spinner animation=\"border\" variant=\"info\" />\n          <Spinner animation=\"border\" variant=\"light\" />\n          <Spinner animation=\"border\" variant=\"dark\" />\n          <Spinner animation=\"grow\" variant=\"primary\" />\n          <Spinner animation=\"grow\" variant=\"secondary\" />\n          <Spinner animation=\"grow\" variant=\"success\" />\n          <Spinner animation=\"grow\" variant=\"danger\" />\n          <Spinner animation=\"grow\" variant=\"warning\" />\n          <Spinner animation=\"grow\" variant=\"info\" />\n          <Spinner animation=\"grow\" variant=\"light\" />\n          <Spinner animation=\"grow\" variant=\"dark\" />\n        </>\n        <br /><br /><br />\n        <ProgressBar aria-valuemin=\"0\" aria-valuemax=\"100\" animated now={props.contents[currentLevel] ? (typingIn.length / props.contents[currentLevel].content.length) * 100 : 1} variant=\"success\" />\n        <br />\n        <Card>\n          <Card.Header>{seconds}</Card.Header>\n          <Card.Body>\n            <blockquote className=\"blockquote mb-0\">\n              <div id=\"console-text\">\n                {currentLevel === 13 ? <GameCompleteMsg /> : levelContent || setLevelContent(\"Are You Ready To Start?\")}\n              </div>\n            </blockquote>\n          </Card.Body>\n        </Card>\n        <br />\n        <InputGroup>\n          <InputGroup.Prepend>\n            <InputGroup.Text id=\"textarea\">TYPE HERE:</InputGroup.Text>\n          </InputGroup.Prepend>\n          <FormControl as=\"textarea\"\n            // onChange={(event) => setTypingIn(event.target.value)}\n            onChange={(event) => highlightWords(event)}\n            value={typingIn}\n            id=\"textarea\"\n            aria-label=\"With textarea\"\n            onCut={handleChange}\n            onCopy={handleChange}\n            onPaste={handleChange}\n          />\n        </InputGroup>\n        <br />\n        <p>\n          {levelStarted === false && currentLevel !== 0 ?\n            <Button className=\"startGame\" variant=\"primary\" onClick={restartfromFirstLevel}>\n              Start from the begining\n            </Button> : null}\n          {levelStarted === false && currentLevel === 0 && JSON.parse(localStorage.getItem(\"user_details\")) && currentLevel !== JSON.parse(localStorage.getItem(\"user_details\"))?.highest_level_cleared ?\n            <Button variant=\"primary\" onClick={resumeFromLastClearedLevel} >\n              Start from level {JSON.parse(localStorage.getItem(\"user_details\"))?.highest_level_cleared + 1}\n            </Button> : null}\n          {levelStarted === true ?\n            <Button className=\"restartGame\" variant=\"primary\" onClick={resetLevel}>\n              Restart Level\n            </Button> : null}\n          {levelStarted === false ?\n            <Button\n              className=\"startGame\"\n              variant=\"primary\"\n              onClick={startGame}\n            >\n              {levelStarted === true ? `Start Game ` : `Start Level ${currentLevel + 1}!`}\n            </Button> : null}\n          {/* {levelStarted === false ?\n              <Button variant=\"primary\" onClick={restartfromFirstLevel}>\n              Go back to Level 1\n            </Button> : null} */}\n        </p>\n      </Jumbotron>\n    </div>\n  )\n}\n\nexport default GameConsole\n","/Users/lucas/lighthouse/final-project-lhl/final-project/src/hooks/useApplicationData.js",[],"/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/GameCompleteMsg.jsx",[],"/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/NavbarTC.jsx",[],"/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/EditUser.jsx",[],"/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/EditPassword.jsx",[],"/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/Attempts.jsx",["92","93","94","95"],"import React, { useState, useMemo } from 'react';\nimport { Container, Table, Alert, Button } from 'react-bootstrap';\nimport useApplicationData from \"../hooks/useApplicationData\";\nimport Moment from 'react-moment';\nimport useSound from 'use-sound';\nimport DelayLink from 'react-delay-link';\n\nfunction Attempts() {\n\n  const soundUrl = \"./sounds/SuperMarioBros.mp3\";\n\n  const [play] = useSound(soundUrl);\n\n  const roundTo = require('round-to');\n\n  const { attempts, setAttempts } = useApplicationData()\n\n  for (const attempt of attempts) {\n    attempt.words_per_min=((attempt.words_completed * 60) / attempt.time_taken)\n  }\n\n  const [sortType, setSortType] = useState('words_per_min');\n\n  const currentUser = (localStorage.getItem(\"user_details\") && JSON.parse(localStorage.getItem(\"user_details\"))?.id)\n\n  const sortedUsersId = () => {\n    let result = [];\n    for (let i = 0; i < attempts.length; i++) {\n      result.push(attempts[i].user_id)\n    }\n    return result\n  }\n\n  const currentUserAttempts = useMemo(() => {\n    let result = []\n    for (let attempt of attempts)\n      if (attempt.user_id === currentUser && attempt.passed === true) {\n        result.push(attempt)\n      }\n    return result\n  })\n\n  const sortUserAttempts = currentUserAttempts.sort((a, b) => {\n    return b.words_per_min - a.words_per_min\n  })\n\n  if (sortedUsersId().includes(currentUser)) {\n    return (\n      <div className=\"leaderboard\">\n        <Container className=\"leadercontainer\">\n          <Table striped bordered hover variant=\"dark\">\n            <thead>\n              <tr>\n                <th>Date</th>\n                <th>Level</th>\n                <th>Time Completed</th>\n                <th>Words Per Minute</th>\n              </tr>\n            </thead>\n            <tbody>\n              {sortUserAttempts[0] ? (\n                <tr>\n                <td>\n                  <Moment format='MMMM Do, YYYY'>\n                    {sortUserAttempts[0] && sortUserAttempts[0].attempted_at}\n                  </Moment>\n                </td>\n                <td>{sortUserAttempts[0] && sortUserAttempts[0].level_id}</td>\n                <td>{sortUserAttempts[0] && sortUserAttempts[0].time_taken + \" Seconds\"}</td>\n                <td>{roundTo((sortUserAttempts[0] && sortUserAttempts[0].words_per_min), 2)}</td>\n              </tr>) : null\n              }\n              {sortUserAttempts[1] ? (              \n              <tr>\n                <td>\n                  <Moment format=\"MMMM Do, YYYY\">\n                    {sortUserAttempts[1] && sortUserAttempts[1].attempted_at}\n                  </Moment>\n                </td>\n                <td>{sortUserAttempts[1] && sortUserAttempts[1].level_id}</td>\n                <td>{sortUserAttempts[1] && sortUserAttempts[1].time_taken + \" Seconds\"}</td>\n                <td>{roundTo((sortUserAttempts[1] && sortUserAttempts[1].words_per_min), 2)}</td>\n              </tr>) : null\n              }\n              {sortUserAttempts[2] ? (\n              <tr>\n                <td>\n                  <Moment format=\"MMMM Do, YYYY\">\n                    {sortUserAttempts[2] && sortUserAttempts[2].attempted_at}\n                  </Moment>\n                </td>\n                <td>{sortUserAttempts[2] && sortUserAttempts[2].level_id}</td>\n                <td>{sortUserAttempts[2] && sortUserAttempts[2].time_taken + \" Seconds\"}</td>\n                <td>{roundTo((sortUserAttempts[2] && sortUserAttempts[2].words_per_min), 2)}</td>\n              </tr>) : null\n              }\n              {sortUserAttempts[3] ? (\n              <tr>\n                <td>\n                  <Moment format=\"MMMM Do, YYYY\">\n                    {sortUserAttempts[3] && sortUserAttempts[3].attempted_at}\n                  </Moment>\n                </td>\n                <td>{sortUserAttempts[3] && sortUserAttempts[3].level_id}</td>\n                <td>{sortUserAttempts[3] && sortUserAttempts[3].time_taken + \" Seconds\"}</td>\n                <td>{roundTo((sortUserAttempts[3] && sortUserAttempts[3].words_per_min), 2)}</td>\n              </tr>) : null\n              }\n              {sortUserAttempts[4] ? (\n              <tr>\n                <td>\n                  <Moment format=\"MMMM Do, YYYY\">\n                    {sortUserAttempts[4] && sortUserAttempts[4].attempted_at}\n                  </Moment>\n                </td>\n                <td>{sortUserAttempts[4] && sortUserAttempts[4].level_id}</td>\n                <td>{sortUserAttempts[4] && sortUserAttempts[4].time_taken + \" Seconds\"}</td>\n                <td>{roundTo((sortUserAttempts[4] && sortUserAttempts[4].words_per_min), 2)}</td>\n              </tr>) : null\n              }\n\n            </tbody>\n          </Table>\n          <Alert variant=\"success\">\n        <Alert.Heading>Hey, nice to see you!</Alert.Heading>\n        <p>\n          Congrats on the rad scores! Looks like you're doing quite well but don't let that stop you. Click on the button below to try and reach even better scores!\n        </p>\n        <hr />\n        <p className=\"mb-0\">\n          <DelayLink delay={3000} to=\"/play\" clickAction={play} replace={false}>\n            <Button variant=\"primary\" size=\"lg\">Play Game</Button>\n          </DelayLink>\n        </p>\n      </Alert>\n        </Container>\n      </div>\n    )\n  } else {\n    return (\n      <Alert variant=\"danger\">\n        <Alert.Heading>Hey, nice to see you!</Alert.Heading>\n        <p>\n          Aww yeah, so it looks like you haven't actually played yet. No worries! Simply click on the button below to play this super awesome game and build up your typing chops!\n        </p>\n        <hr />\n        <p className=\"mb-0\">\n          <DelayLink delay={3000} to=\"/play\" clickAction={play} replace={false}>\n            <Button variant=\"primary\" size=\"lg\">Play Game</Button>\n          </DelayLink>\n        </p>\n      </Alert>\n    )\n  }\n}\n\nexport default Attempts\n","/Users/lucas/lighthouse/final-project-lhl/final-project/src/components/Chat.jsx",["96","97"],"import React, { useState, useEffect, useRef } from 'react';\nimport styled from \"styled-components\";\nimport io from 'socket.io-client';\n\nconst Page = styled.div`\n  display: flex;\n  height: 100vh;\n  width: 100%;\n  align-items: center;\n  background-color: #46516e;\n  flex-direction: column;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 500px;\n  max-height: 500px;\n  overflow: auto;\n  width: 400px;\n  border: 1px solid lightgray;\n  border-radius: 10px;\n  padding-bottom: 10px;\n  margin-top: 25px;\n`;\n\nconst TextArea = styled.textarea`\n  width: 98%;\n  height: 100px;\n  border-radius: 10px;\n  margin-top: 10px;\n  padding-left: 10px;\n  padding-top: 10px;\n  font-size: 17px;\n  background-color: transparent;\n  border: 1px solid lightgray;\n  outline: none;\n  color: lightgray;\n  letter-spacing: 1px;\n  line-height: 20px;\n  ::placeholder {\n    color: lightgray;\n  }\n`;\n\nconst Button = styled.button`\n  background-color: pink;\n  width: 100%;\n  border: none;\n  height: 50px;\n  border-radius: 10px;\n  color: #46516e;\n  font-size: 17px;\n`;\n\nconst Form = styled.form`\n  width: 400px;\n`;\n\nconst MyRow = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: flex-end;\n  margin-top: 10px;\n`;\n\nconst MyMessage = styled.div`\n  width: 45%;\n  background-color: pink;\n  color: #46516e;\n  padding: 10px;\n  margin-right: 5px;\n  text-align: center;\n  border-top-right-radius: 10%;\n  border-bottom-right-radius: 10%;\n`;\n\nconst PartnerRow = styled(MyRow)`\n  justify-content: flex-start;\n`;\n\nconst PartnerMessage = styled.div`\n  width: 45%;\n  background-color: transparent;\n  color: lightgray;\n  border: 1px solid lightgray;\n  padding: 10px;\n  margin-left: 5px;\n  text-align: center;\n  border-top-left-radius: 10%;\n  border-bottom-left-radius: 10%;\n`;\n\nconst Chat = () => {\n\n  const [yourID, setYourID] = useState();\n  const [users, setUsers] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState(\"\");\n\n  const socketRef = useRef();\n\n  useEffect(() => {\n\n    socketRef.current = io.connect('/');\n\n    socketRef.current.on(\"your id\", id => {\n      setYourID(id);\n    }, []);\n\n    socketRef.current.on(\"message\", (message) => {\n      console.log(\"here\");\n      receivedMessage(message);\n    })\n  }, []);\n\n  function receivedMessage(message) {\n    setMessages(oldMsgs => [...oldMsgs, message]);\n  }\n\n  function sendMessage(e) {\n    e.preventDefault();\n    const messageObject = {\n      body: message,\n      id: yourID,\n    };\n    setMessage(\"\");\n    socketRef.current.emit(\"send message\", messageObject);\n  }\n\n  function handleChange(e) {\n    setMessage(e.target.value);\n  }\n\n  return (\n    <Page>\n      <Container>\n        {messages.map((message, index) => {\n          if (message.id === yourID) {\n            return (\n              <MyRow key={index}>\n                <MyMessage>\n                  {message.body}\n                </MyMessage>\n              </MyRow>\n            )\n          }\n          return (\n            <PartnerRow key={index}>\n              <PartnerMessage>\n                {message.body}\n              </PartnerMessage>\n            </PartnerRow>\n          )\n        })}\n      </Container>\n      <Form onSubmit={sendMessage}>\n        <TextArea value={message} onChange={handleChange} placeholder=\"Say something...\" />\n        <Button>Send</Button>\n      </Form>\n    </Page>\n  )\n}\n\nexport default Chat\n",{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","severity":1,"message":"103","line":1,"column":17,"nodeType":"104","messageId":"105","endLine":1,"endColumn":25},{"ruleId":"102","severity":1,"message":"106","line":3,"column":50,"nodeType":"104","messageId":"105","endLine":3,"endColumn":54},{"ruleId":"102","severity":1,"message":"107","line":21,"column":5,"nodeType":"104","messageId":"105","endLine":21,"endColumn":16},{"ruleId":"102","severity":1,"message":"108","line":22,"column":5,"nodeType":"104","messageId":"105","endLine":22,"endColumn":16},{"ruleId":"102","severity":1,"message":"109","line":23,"column":5,"nodeType":"104","messageId":"105","endLine":23,"endColumn":22},{"ruleId":"102","severity":1,"message":"110","line":24,"column":5,"nodeType":"104","messageId":"105","endLine":24,"endColumn":14},{"ruleId":"102","severity":1,"message":"111","line":25,"column":5,"nodeType":"104","messageId":"105","endLine":25,"endColumn":17},{"ruleId":"102","severity":1,"message":"112","line":8,"column":18,"nodeType":"104","messageId":"105","endLine":8,"endColumn":26},{"ruleId":"102","severity":1,"message":"113","line":10,"column":20,"nodeType":"104","messageId":"105","endLine":10,"endColumn":31},{"ruleId":"102","severity":1,"message":"114","line":2,"column":47,"nodeType":"104","messageId":"105","endLine":2,"endColumn":51},{"ruleId":"102","severity":1,"message":"115","line":7,"column":8,"nodeType":"104","messageId":"105","endLine":7,"endColumn":19},{"ruleId":"102","severity":1,"message":"116","line":13,"column":11,"nodeType":"104","messageId":"105","endLine":13,"endColumn":24},{"ruleId":"102","severity":1,"message":"117","line":19,"column":10,"nodeType":"104","messageId":"105","endLine":19,"endColumn":15},{"ruleId":"102","severity":1,"message":"118","line":21,"column":9,"nodeType":"104","messageId":"105","endLine":21,"endColumn":21},{"ruleId":"119","severity":1,"message":"120","line":103,"column":6,"nodeType":"121","endLine":103,"endColumn":20,"suggestions":"122"},{"ruleId":"119","severity":1,"message":"123","line":129,"column":6,"nodeType":"121","endLine":129,"endColumn":27,"suggestions":"124"},{"ruleId":"119","severity":1,"message":"125","line":154,"column":6,"nodeType":"121","endLine":154,"endColumn":28,"suggestions":"126"},{"ruleId":"102","severity":1,"message":"127","line":16,"column":21,"nodeType":"104","messageId":"105","endLine":16,"endColumn":32},{"ruleId":"102","severity":1,"message":"128","line":22,"column":10,"nodeType":"104","messageId":"105","endLine":22,"endColumn":18},{"ruleId":"102","severity":1,"message":"113","line":22,"column":20,"nodeType":"104","messageId":"105","endLine":22,"endColumn":31},{"ruleId":"119","severity":1,"message":"129","line":34,"column":31,"nodeType":"104","endLine":34,"endColumn":38},{"ruleId":"102","severity":1,"message":"130","line":97,"column":10,"nodeType":"104","messageId":"105","endLine":97,"endColumn":15},{"ruleId":"102","severity":1,"message":"112","line":97,"column":17,"nodeType":"104","messageId":"105","endLine":97,"endColumn":25},"no-native-reassign",["131"],"no-negated-in-lhs",["132"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'setContents' is assigned a value but never used.","'gameConsole' is assigned a value but never used.","'updateGameConsole' is assigned a value but never used.","'userInput' is assigned a value but never used.","'setUserInput' is assigned a value but never used.","'setUsers' is assigned a value but never used.","'setSortType' is assigned a value but never used.","'Fade' is defined but never used.","'Leaderboard' is defined but never used.","'checkLoggedIn' is assigned a value but never used.","'index' is assigned a value but never used.","'handleSelect' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'intervalId' and 'props.contents'. Either include them or remove the dependency array. If 'setLevelContent' needs the current value of 'props.contents', you can also switch to useReducer instead of useState and read 'props.contents' in the reducer.","ArrayExpression",["133"],"React Hook useEffect has missing dependencies: 'currentLevel', 'props.contents', and 'typingIn'. Either include them or remove the dependency array.",["134"],"React Hook useEffect has missing dependencies: 'currentLevel', 'props.contents', and 'seconds'. Either include them or remove the dependency array. You can also do a functional update 'setCurrentLevel(c => ...)' if you only need 'currentLevel' in the 'setCurrentLevel' call.",["135"],"'setAttempts' is assigned a value but never used.","'sortType' is assigned a value but never used.","React Hook useMemo does nothing when called with only one argument. Did you forget to pass an array of dependencies?","'users' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"136","fix":"137"},{"desc":"138","fix":"139"},{"desc":"140","fix":"141"},"Update the dependencies array to be: [currentLevel, intervalId, props.contents]",{"range":"142","text":"143"},"Update the dependencies array to be: [seconds, intervalId, props.contents, currentLevel, typingIn]",{"range":"144","text":"145"},"Update the dependencies array to be: [typingIn, intervalId, props.contents, currentLevel, seconds]",{"range":"146","text":"147"},[3223,3237],"[currentLevel, intervalId, props.contents]",[4233,4254],"[seconds, intervalId, props.contents, currentLevel, typingIn]",[5263,5285],"[typingIn, intervalId, props.contents, currentLevel, seconds]"]