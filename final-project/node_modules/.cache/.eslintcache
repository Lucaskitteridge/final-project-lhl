[{"/home/robert/lighthouse/final-project-lhl/final-project/src/index.js":"1","/home/robert/lighthouse/final-project-lhl/final-project/src/App.js":"2","/home/robert/lighthouse/final-project-lhl/final-project/src/components/Register.jsx":"3","/home/robert/lighthouse/final-project-lhl/final-project/src/components/Login.jsx":"4","/home/robert/lighthouse/final-project-lhl/final-project/src/components/Footer.jsx":"5","/home/robert/lighthouse/final-project-lhl/final-project/src/components/Leaderboard.jsx":"6","/home/robert/lighthouse/final-project-lhl/final-project/src/components/Profile.jsx":"7","/home/robert/lighthouse/final-project-lhl/final-project/src/components/WelcomePage.jsx":"8","/home/robert/lighthouse/final-project-lhl/final-project/src/components/GameConsole.jsx":"9","/home/robert/lighthouse/final-project-lhl/final-project/src/hooks/useApplicationData.js":"10","/home/robert/lighthouse/final-project-lhl/final-project/src/components/GameCompleteMsg.jsx":"11","/home/robert/lighthouse/final-project-lhl/final-project/src/components/NavbarTC.jsx":"12","/home/robert/lighthouse/final-project-lhl/final-project/src/components/EditUser.jsx":"13","/home/robert/lighthouse/final-project-lhl/final-project/src/components/EditPassword.jsx":"14","/home/robert/lighthouse/final-project-lhl/final-project/src/components/Attempts.jsx":"15"},{"size":219,"mtime":1613239059969,"results":"16","hashOfConfig":"17"},{"size":1263,"mtime":1613500459617,"results":"18","hashOfConfig":"17"},{"size":4972,"mtime":1613527800512,"results":"19","hashOfConfig":"17"},{"size":2087,"mtime":1613527800512,"results":"20","hashOfConfig":"17"},{"size":1208,"mtime":1613523712985,"results":"21","hashOfConfig":"17"},{"size":4251,"mtime":1613512459928,"results":"22","hashOfConfig":"17"},{"size":4103,"mtime":1613591506441,"results":"23","hashOfConfig":"17"},{"size":1701,"mtime":1613532012533,"results":"24","hashOfConfig":"17"},{"size":8002,"mtime":1613591582534,"results":"25","hashOfConfig":"17"},{"size":1374,"mtime":1613527800512,"results":"26","hashOfConfig":"17"},{"size":459,"mtime":1613511970478,"results":"27","hashOfConfig":"17"},{"size":3293,"mtime":1613527800512,"results":"28","hashOfConfig":"17"},{"size":4748,"mtime":1613529292303,"results":"29","hashOfConfig":"17"},{"size":1837,"mtime":1613516169298,"results":"30","hashOfConfig":"17"},{"size":5711,"mtime":1613591587926,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"pev822",{"filePath":"35","messages":"36","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"34"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/robert/lighthouse/final-project-lhl/final-project/src/index.js",[],["67","68"],"/home/robert/lighthouse/final-project-lhl/final-project/src/App.js",["69","70","71","72","73","74","75"],"import React, { useState } from 'react';\nimport useApplicationData from \"./hooks/useApplicationData\"\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\n// Import Components\nimport Footer from \"./components/Footer.jsx\";\nimport Leaderboard from \"./components/Leaderboard.jsx\";\nimport Profile from \"./components/Profile.jsx\";\nimport Welcomepage from \"./components/WelcomePage.jsx\";\nimport GameConsole from \"./components/GameConsole.jsx\";\nimport NavbarTC from \"./components/NavbarTC.jsx\";\n\n// Import stylesheets\nimport './App.css';\n\nfunction App() {\n\n  const {\n    contents, \n    setContents,\n    gameConsole,\n    updateGameConsole,\n    userInput,\n    setUserInput\n  } = useApplicationData();\n\n  return (\n    <Router>\n      <div className=\"app\">\n        <NavbarTC />\n        <Switch>\n          <Route path=\"/leaderboard\">\n            <Leaderboard />\n          </Route>\n          <Route path=\"/profile\">\n            <Profile />\n          </Route>\n          <Route path=\"/play\">\n            <GameConsole \n              contents={contents}\n            />\n          </Route>\n          <Route path=\"/\">\n            <Welcomepage />\n          </Route>\n        </Switch>\n        <Footer />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;","/home/robert/lighthouse/final-project-lhl/final-project/src/components/Register.jsx",[],"/home/robert/lighthouse/final-project-lhl/final-project/src/components/Login.jsx",[],"/home/robert/lighthouse/final-project-lhl/final-project/src/components/Footer.jsx",[],"/home/robert/lighthouse/final-project-lhl/final-project/src/components/Leaderboard.jsx",["76","77"],"import React, { useState, useMemo } from 'react'\nimport {Container, Table} from 'react-bootstrap';\nimport useApplicationData from \"../hooks/useApplicationData\"\nimport \"./Leaderboard.css\"\n\nfunction Leaderboard(props) {\n  \n  const { users, setUsers } = useApplicationData()\n\n  const [sortType, setSortType] = useState('levels');\n\n  const sortedUsers = useMemo(() => {\n    const sortArray = type => {\n      const types = {\n        wordsPerMin: 'words_per_min',\n        levels: 'highest_level_cleared',\n      };\n      const sortProperty = types[type];\n      const secondarySortProperty = types[type === 'levels' ? 'wordsPerMin' : 'levels']\n      const sorted = [...users].sort((a, b) => {\n        const initialDiff = b[sortProperty] - a[sortProperty]\n        if (initialDiff === 0) {\n          return b[secondarySortProperty] - a[secondarySortProperty]\n        } else {\n          return initialDiff;\n        }\n      });\n      return sorted;\n    };\n    return sortArray(sortType)\n  }, [users, sortType])\n\n\n\n  return (\n    <div className=\"leaderboard\">\n      <Container className=\"leadercontainer\">\n      <Table striped bordered hover variant=\"dark\">\n        <thead>\n          <tr>\n            <th colSpan=\"4\" classname=\"align-me\">Leaderboard</th>\n          </tr>\n          <tr>\n            <th>Ranking</th>\n            <th>Username</th>\n            <th>Highest Level</th>\n            <th>Words Per Minute</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>1st</td>\n            <td>@{sortedUsers[0] && sortedUsers[0].username}</td>\n            <td>{sortedUsers[0] && sortedUsers[0].highest_level_cleared}</td>\n            <td>{sortedUsers[0] && sortedUsers[0].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>2nd</td>\n            <td>@{sortedUsers[1] && sortedUsers[1].username}</td>\n            <td>{sortedUsers[1] && sortedUsers[1].highest_level_cleared}</td>\n            <td>{sortedUsers[1] && sortedUsers[1].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>3rd</td>\n            <td>@{sortedUsers[2] && sortedUsers[2].username}</td>\n            <td>{sortedUsers[2] && sortedUsers[2].highest_level_cleared}</td>\n            <td>{sortedUsers[2] && sortedUsers[2].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>4th</td>\n            <td>@{sortedUsers[3] && sortedUsers[3].username}</td>\n            <td>{sortedUsers[3] && sortedUsers[3].highest_level_cleared}</td>\n            <td>{sortedUsers[3] && sortedUsers[3].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>5th</td>\n            <td>@{sortedUsers[4] && sortedUsers[4].username}</td>\n            <td>{sortedUsers[4] && sortedUsers[4].highest_level_cleared}</td>\n            <td>{sortedUsers[4] && sortedUsers[4].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>6th</td>\n            <td>@{sortedUsers[5] && sortedUsers[5].username}</td>\n            <td>{sortedUsers[5] && sortedUsers[5].highest_level_cleared}</td>\n            <td>{sortedUsers[5] && sortedUsers[5].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>7th</td>\n            <td>@{sortedUsers[6] && sortedUsers[6].username}</td>\n            <td>{sortedUsers[6] && sortedUsers[6].highest_level_cleared}</td>\n            <td>{sortedUsers[6] && sortedUsers[6].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>8th</td>\n            <td>@{sortedUsers[7] && sortedUsers[7].username}</td>\n            <td>{sortedUsers[7] && sortedUsers[7].highest_level_cleared}</td>\n            <td>{sortedUsers[7] && sortedUsers[7].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>9th</td>\n            <td>@{sortedUsers[8] && sortedUsers[8].username}</td>\n            <td>{sortedUsers[8] && sortedUsers[8].highest_level_cleared}</td>\n            <td>{sortedUsers[8] && sortedUsers[8].words_per_min}</td>\n          </tr>\n          <tr>\n            <td>10th</td>\n            <td>@{sortedUsers[9] && sortedUsers[9].username}</td>\n            <td>{sortedUsers[9] && sortedUsers[9].highest_level_cleared}</td>\n            <td>{sortedUsers[9] && sortedUsers[9].words_per_min}</td>\n          </tr>\n        </tbody>\n      </Table>\n      </Container>\n    </div>\n  )\n}\n\nexport default Leaderboard\n","/home/robert/lighthouse/final-project-lhl/final-project/src/components/Profile.jsx",[],"/home/robert/lighthouse/final-project-lhl/final-project/src/components/WelcomePage.jsx",["78","79","80","81"],"import React, { useState } from 'react';\nimport { Container, Jumbotron, Image, Button, Carousel } from 'react-bootstrap';\nimport useSound from 'use-sound';\nimport DelayLink from 'react-delay-link';\nimport \"./WelcomePage.css\";\nimport Leaderboard from \"./Leaderboard\"\n\n\nfunction Welcomepage() {\n  const soundUrl = \"./sounds/roll.mp3\";\n\n  const [play] = useSound(soundUrl);\n\n  const [index, setIndex] = useState(0);\n\n  const handleSelect = (selectedIndex, e) => {\n    setIndex(selectedIndex);\n  };\n\n  return (\n    <div className=\"welcome-container\">\n      <Jumbotron fluid>\n        <Container>\n          <Image src=\"images/typing-icon.png\" className=\"typing-icon\" />\n          <h1>Welcome to Typecraft!</h1>\n          <p>\n            Before you start playing, here's how the game is going to work:\n          </p>\n          <ul>\n            A selection of words will appear on the screen\n          </ul>\n          <ul>\n            You have to type the worst as fast as possible!\n          </ul>\n          <ul>\n            But, you wont be able to advance on to the next level if there are any mistakes so make sure you check for mistakes as well\n          </ul>\n          <ul>\n            As the levels go up the time allocated to each level will stay the same but the amount of words will get bigger.\n          </ul>\n          <ul>\n            When you run out of time without having finished typing your paragraph, then Game Over\n          </ul>\n          <DelayLink delay={3000} to=\"/play\" clickAction={play} replace={false}>\n            <Button variant=\"primary\" size=\"lg\">Play Game</Button>\n          </DelayLink>\n        </Container>\n      </Jumbotron>\n    </div>\n  )\n}\n\nexport default Welcomepage\n\n","/home/robert/lighthouse/final-project-lhl/final-project/src/components/GameConsole.jsx",["82","83","84"],"import React, { useState, useEffect } from 'react';\nimport axios from \"axios\";\nimport { Jumbotron, Button, ProgressBar, Spinner, InputGroup, FormControl, Card } from 'react-bootstrap';\nimport GameCompleteMsg from './GameCompleteMsg';\nimport \"./GameConsole.css\"\n\nfunction GameConsole(props) {\n\n  const [seconds, setSeconds] = useState(30);\n  const [typingIn, setTypingIn] = useState(\"\");\n  const [currentLevel, setCurrentLevel] = useState(0);\n  const [intervalId, setIntervalId] = useState(null)\n  const [levelContent, setLevelContent] = useState(\"\")\n  const [levelStarted, setLevelStarted] = useState(false)\n\n  const Timer = function (seconds){\n    setLevelStarted(true)\n    setSeconds(seconds)\n    if (seconds > 0) {\n      setIntervalId(setInterval(() => setSeconds((s) => s-1), 1000))\n    } else {\n      setSeconds(\"Game Over\");\n    }\n  }\n\n  console.log(JSON.parse(localStorage.getItem(\"user_details\")).highest_level_cleared)\n\n  const highlightWords = (event) => {\n    let value = event.target.value;\n    let txt = document.getElementById(\"console-text\").innerText;\n    let idx = txt.indexOf(value);\n    if(idx >= 0) {\n      let newText = [txt.substring(0, idx), <strong>{txt.substring(idx, idx + value.length)}</strong>, txt.substring(idx + value.length)];\n      setTypingIn(value);\n      setLevelContent(newText);\n    } else {\n      setLevelContent(levelContent);\n      setTypingIn(value);\n    }    \n  }\n\n  // useEffect(() => {\n  //   for (let i = 0; i < typingIn.length; i++){\n  //     if(levelContent[typingIn.length - 1] !== typingIn[typingIn.length - 1]) { \n\n  //       levelContent.replace(levelContent[typingIn.length - 1] ,<span>hello</span>)\n  //       return\n  //     }\n  //   }\n  // },[typingIn])\n\n  const totalWordsCorrect = function(inputField, currentLevelContent) {\n    const typedIn = inputField.split(' ')\n    const matchingwords = []\n    for (let i = 0; i < typedIn.length; i++) {\n      if(typedIn[i] === currentLevelContent[i])\n      matchingwords.push(typedIn[i])\n      }\n    return matchingwords.length\n  }\n  \n  const resetLevel = function () {\n    setLevelStarted(false)\n    setLevelContent(\"Are you Ready to start\")\n    setTypingIn(\"\");\n    clearInterval(intervalId)\n    setCurrentLevel(currentLevel);\n    setSeconds(30)\n  }\n\n  useEffect(() => {\n    if(seconds === 0){\n      setSeconds(\"Game Over\")\n      let currentLevelWords = props.contents[currentLevel].content.split(' ')\n      let totalOfCorrectWords = totalWordsCorrect(typingIn, currentLevelWords)\n      clearInterval(intervalId)\n      axios.post('/attempts', {\n        user_id: JSON.parse(localStorage.getItem(\"user_details\")).id,\n        level_id: currentLevel + 1,\n        words_completed: totalOfCorrectWords,\n        time_taken: 30,\n        passed: false\n    })\n    .catch(error => (console.log(error)))\n    }\n  },[seconds, intervalId]);\n\n  const startGame = function() {\n    setLevelStarted(true)\n    if(currentLevel === 0){\n      setTypingIn(\"\");\n      setLevelContent(props.contents[currentLevel]?.content)\n      clearInterval(intervalId)\n      setCurrentLevel(0);\n      Timer(30)\n    } else {\n      setTypingIn(\"\");\n      clearInterval(intervalId)\n      setLevelContent(props.contents[currentLevel]?.content)\n      Timer(30)\n    }\n  }\n\n  const restartfromFirstLevel = function() {\n    setLevelStarted(false)\n    setLevelContent(\"Are you Ready to start\")\n    setTypingIn(\"\");\n    clearInterval(intervalId)\n    setCurrentLevel(0);\n    setSeconds(30)\n  }\n\n  const resumeFromLastClearedLevel = function () {\n    setLevelStarted(false)\n    setLevelContent(\"Are you Ready to start\")\n    setTypingIn(\"\");\n    clearInterval(intervalId)\n    setCurrentLevel(JSON.parse(localStorage.getItem(\"user_details\")).highest_level_cleared);\n    setSeconds(30)\n  }\n\n  //Post request to attempts if both the text areas are the same\n  useEffect(() => {\n    if(typingIn === props.contents[currentLevel]?.content && typingIn !== \"\") {\n      let correctWords = props.contents[currentLevel].content.split(' ').length;\n      let secondsLeft = 30 - seconds;\n      setLevelContent(\"Time for next level. Press the button below when you're ready to start\")\n      clearInterval(intervalId);\n      setCurrentLevel(currentLevel + 1);\n      setSeconds(30)\n      setTypingIn(\"\");\n      axios.post('/attempts', {\n        user_id: JSON.parse(localStorage.getItem(\"user_details\")).id,\n        level_id: currentLevel + 1,\n        words_completed: correctWords,\n        time_taken: secondsLeft,\n        passed: true\n    })\n      .then(res => {\n        console.log(res);\n      })\n      .catch(error => (console.log(error)))\n    }\n  }, [typingIn, intervalId])\n  \n  const handleChange = (e) => {\n    e.preventDefault();\n  };\n\n  return (\n    <div className=\"gameconsole\">\n      <Jumbotron>\n        <h1>TypeCraft</h1>\n        <>\n          <Spinner animation=\"border\" variant=\"primary\" />\n          <Spinner animation=\"border\" variant=\"secondary\" />\n          <Spinner animation=\"border\" variant=\"success\" />\n          <Spinner animation=\"border\" variant=\"danger\" />\n          <Spinner animation=\"border\" variant=\"warning\" />\n          <Spinner animation=\"border\" variant=\"info\" />\n          <Spinner animation=\"border\" variant=\"light\" />\n          <Spinner animation=\"border\" variant=\"dark\" />\n          <Spinner animation=\"grow\" variant=\"primary\" />\n          <Spinner animation=\"grow\" variant=\"secondary\" />\n          <Spinner animation=\"grow\" variant=\"success\" />\n          <Spinner animation=\"grow\" variant=\"danger\" />\n          <Spinner animation=\"grow\" variant=\"warning\" />\n          <Spinner animation=\"grow\" variant=\"info\" />\n          <Spinner animation=\"grow\" variant=\"light\" />\n          <Spinner animation=\"grow\" variant=\"dark\" />\n        </>\n        <br /><br /><br />\n        <ProgressBar aria-valuemin=\"0\" aria-valuemax=\"100\" animated now={props.contents[currentLevel] ? (typingIn.length/props.contents[currentLevel].content.length) * 100 : 1} variant=\"success\" />\n        <br />\n        <Card>\n          <Card.Header>{seconds}</Card.Header>\n          <Card.Body>\n            <blockquote className=\"blockquote mb-0\">\n              <div id=\"console-text\">\n                {levelContent || setLevelContent(\"Are you Ready to start\")}\n              </div>\n            </blockquote>\n          </Card.Body>\n        </Card>\n        <br />\n        <InputGroup>\n          <InputGroup.Prepend>\n            <InputGroup.Text id=\"textarea\">TYPE HERE:</InputGroup.Text>\n          </InputGroup.Prepend>\n          <FormControl as=\"textarea\" \n            // onChange={(event) => setTypingIn(event.target.value)}\n            onChange={(event) => highlightWords(event)}\n            value={typingIn}\n            id=\"textarea\"\n            aria-label=\"With textarea\" \n            onCut={handleChange}\n            onCopy={handleChange}\n            onPaste={handleChange}\n            />\n        </InputGroup>\n        <br />\n        <p>\n          {levelStarted === false && currentLevel !== 0? \n            <Button variant=\"primary\" onClick={restartfromFirstLevel}>\n              Start from the begining\n            </Button> : null}\n          {levelStarted === false && currentLevel !== JSON.parse(localStorage.getItem(\"user_details\")).highest_level_cleared? \n            <Button variant=\"primary\" onClick={resumeFromLastClearedLevel} onclick='button.style.display = \"none\"'>\n              Start from last cleared level\n            </Button> : null}\n            {levelStarted === true ?\n            <Button variant=\"primary\" onClick={resetLevel}>\n              Restart Level \n            </Button> : null}\n           {levelStarted === false ? \n            <Button\n              variant=\"primary\"\n              onClick={startGame}\n            >\n            {levelStarted === true ? `Start Game ` : `Start Level ${currentLevel+1}!`}\n            </Button> : null ||\n            <Button variant=\"primary\" onClick={restartfromFirstLevel}>\n            Go back to Level 1\n            </Button>}\n        </p>\n      </Jumbotron>\n    </div>\n  )\n}\n\nexport default GameConsole\n","/home/robert/lighthouse/final-project-lhl/final-project/src/hooks/useApplicationData.js",[],"/home/robert/lighthouse/final-project-lhl/final-project/src/components/GameCompleteMsg.jsx",[],"/home/robert/lighthouse/final-project-lhl/final-project/src/components/NavbarTC.jsx",[],"/home/robert/lighthouse/final-project-lhl/final-project/src/components/EditUser.jsx",[],"/home/robert/lighthouse/final-project-lhl/final-project/src/components/EditPassword.jsx",[],"/home/robert/lighthouse/final-project-lhl/final-project/src/components/Attempts.jsx",["85","86","87"],{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","severity":1,"message":"93","line":1,"column":17,"nodeType":"94","messageId":"95","endLine":1,"endColumn":25},{"ruleId":"92","severity":1,"message":"96","line":3,"column":50,"nodeType":"94","messageId":"95","endLine":3,"endColumn":54},{"ruleId":"92","severity":1,"message":"97","line":20,"column":5,"nodeType":"94","messageId":"95","endLine":20,"endColumn":16},{"ruleId":"92","severity":1,"message":"98","line":21,"column":5,"nodeType":"94","messageId":"95","endLine":21,"endColumn":16},{"ruleId":"92","severity":1,"message":"99","line":22,"column":5,"nodeType":"94","messageId":"95","endLine":22,"endColumn":22},{"ruleId":"92","severity":1,"message":"100","line":23,"column":5,"nodeType":"94","messageId":"95","endLine":23,"endColumn":14},{"ruleId":"92","severity":1,"message":"101","line":24,"column":5,"nodeType":"94","messageId":"95","endLine":24,"endColumn":17},{"ruleId":"92","severity":1,"message":"102","line":8,"column":18,"nodeType":"94","messageId":"95","endLine":8,"endColumn":26},{"ruleId":"92","severity":1,"message":"103","line":10,"column":20,"nodeType":"94","messageId":"95","endLine":10,"endColumn":31},{"ruleId":"92","severity":1,"message":"104","line":2,"column":47,"nodeType":"94","messageId":"95","endLine":2,"endColumn":55},{"ruleId":"92","severity":1,"message":"105","line":6,"column":8,"nodeType":"94","messageId":"95","endLine":6,"endColumn":19},{"ruleId":"92","severity":1,"message":"106","line":14,"column":10,"nodeType":"94","messageId":"95","endLine":14,"endColumn":15},{"ruleId":"92","severity":1,"message":"107","line":16,"column":9,"nodeType":"94","messageId":"95","endLine":16,"endColumn":21},{"ruleId":"92","severity":1,"message":"108","line":4,"column":8,"nodeType":"94","messageId":"95","endLine":4,"endColumn":23},{"ruleId":"109","severity":1,"message":"110","line":86,"column":5,"nodeType":"111","endLine":86,"endColumn":26,"suggestions":"112"},{"ruleId":"109","severity":1,"message":"113","line":144,"column":6,"nodeType":"111","endLine":144,"endColumn":28,"suggestions":"114"},{"ruleId":"92","severity":1,"message":"115","line":16,"column":21,"nodeType":"94","messageId":"95","endLine":16,"endColumn":32},{"ruleId":"92","severity":1,"message":"103","line":18,"column":20,"nodeType":"94","messageId":"95","endLine":18,"endColumn":31},{"ruleId":"109","severity":1,"message":"116","line":53,"column":28,"nodeType":"94","endLine":53,"endColumn":35},"no-native-reassign",["117"],"no-negated-in-lhs",["118"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'setContents' is assigned a value but never used.","'gameConsole' is assigned a value but never used.","'updateGameConsole' is assigned a value but never used.","'userInput' is assigned a value but never used.","'setUserInput' is assigned a value but never used.","'setUsers' is assigned a value but never used.","'setSortType' is assigned a value but never used.","'Carousel' is defined but never used.","'Leaderboard' is defined but never used.","'index' is assigned a value but never used.","'handleSelect' is assigned a value but never used.","'GameCompleteMsg' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'currentLevel', 'props.contents', and 'typingIn'. Either include them or remove the dependency array.","ArrayExpression",["119"],"React Hook useEffect has missing dependencies: 'currentLevel', 'props.contents', and 'seconds'. Either include them or remove the dependency array. You can also do a functional update 'setCurrentLevel(c => ...)' if you only need 'currentLevel' in the 'setCurrentLevel' call.",["120"],"'setAttempts' is assigned a value but never used.","React Hook useMemo does nothing when called with only one argument. Did you forget to pass an array of dependencies?","no-global-assign","no-unsafe-negation",{"desc":"121","fix":"122"},{"desc":"123","fix":"124"},"Update the dependencies array to be: [seconds, intervalId, props.contents, currentLevel, typingIn]",{"range":"125","text":"126"},"Update the dependencies array to be: [typingIn, intervalId, props.contents, currentLevel, seconds]",{"range":"127","text":"128"},[2803,2824],"[seconds, intervalId, props.contents, currentLevel, typingIn]",[4585,4607],"[typingIn, intervalId, props.contents, currentLevel, seconds]"]